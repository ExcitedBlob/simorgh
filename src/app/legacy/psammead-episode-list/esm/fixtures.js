import _styled from "@emotion/styled/base";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

/* eslint-disable jsx-a11y/aria-role */

/* eslint-disable react/prop-types */
// This provides fixture data and helper functions that are useful to both storybook and unit tests
import React from 'react';
import VisuallyHiddenText from '@bbc/psammead-visually-hidden-text';
import { formatDuration } from '@bbc/psammead-timestamp-container/utilities';
import SectionLabel from '@bbc/psammead-section-label';
import { C_WHITE, C_MIDNIGHT_BLACK } from '@bbc/psammead-styles/colours';
import { GEL_SPACING, GEL_SPACING_DBL, GEL_SPACING_TRPL } from '@bbc/gel-foundations/spacings';
import { GEL_GROUP_2_SCREEN_WIDTH_MIN, GEL_GROUP_3_SCREEN_WIDTH_MIN } from '@bbc/gel-foundations/breakpoints';
import EpisodeList from '.';
export var exampleEpisodes = [{
  id: '1',
  url: 'https://www.bbc.com/blahasda',
  brandTitle: 'Magazine de la Culture',
  date: '4 Avril 2020',
  dateTime: '2020-04-04',
  duration: 'PT3M',
  durationLabel: 'Durée',
  time: '14:00',
  locale: 'fr'
}, {
  id: '2',
  url: 'https://www.bbc.com/1',
  brandTitle: 'Le Journal',
  episodeTitle: "Le premier rendez-vous d'information de la soirée.",
  date: '20 octobre 2020',
  dateTime: '2020-10-20',
  duration: 'PT1H30M',
  durationLabel: 'Durée',
  time: '14:00',
  locale: 'fr'
}, {
  id: '3',
  url: 'https://www.bbc.com/2',
  brandTitle: 'Afrique Avenir',
  episodeTitle: 'Tout savoir sur les jeunes entrepreneurs africains.',
  date: '21 octobre 2020',
  dateTime: '2020-10-21',
  duration: 'PT59M',
  durationLabel: 'Durée',
  time: '14:00',
  locale: 'fr'
}];
var rtlEpisode = {
  brandTitle: 'یونیورسٹی کی اندھیری',
  date: 'بی بی سی اردو ڈاٹ کام، کرا',
  durationLabel: 'المدة',
  time: 'ریشان',
  locale: 'ar'
};
export var rtlEpisodes = [_objectSpread({
  id: '1',
  url: 'https://www.bbc.com',
  duration: 'PT3M',
  episodeTitle: 'بی بی سی ا یونیورسٹی ردو'
}, rtlEpisode), _objectSpread({
  id: '2',
  url: 'https://www.bbc.com/a',
  duration: 'PT1H30M'
}, rtlEpisode), _objectSpread({
  id: '3',
  url: 'https://www.bbc.com/b',
  duration: 'PT59M'
}, rtlEpisode)];
export var exampleVideoEpisodes = exampleEpisodes.map(function (episode) {
  return _objectSpread(_objectSpread({}, episode), {}, {
    image: 'https://ichef.bbci.co.uk/images/ic/768x432/p08b22y1.png',
    altText: 'BBC News Afrique'
  });
});
export var exampleRtlVideoEpisodes = rtlEpisodes.map(function (episode) {
  return _objectSpread(_objectSpread({}, episode), {}, {
    image: 'https://ichef.bbci.co.uk/images/ic/768x432/p08b22y1.png',
    altText: 'BBC News Afrique'
  });
});

var Spacer = _styled("aside", process.env.NODE_ENV === "production" ? {
  target: "e1c0i89j2"
} : {
  target: "e1c0i89j2",
  label: "Spacer"
})("background:", function (_ref) {
  var darkMode = _ref.darkMode;
  return darkMode ? C_MIDNIGHT_BLACK : 'unset';
}, ";position:absolute;top:0;bottom:0;right:0;left:0;padding:0 ", GEL_SPACING, ";@media (min-width: ", GEL_GROUP_2_SCREEN_WIDTH_MIN, "){padding:0 ", GEL_SPACING_DBL, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

var StyledSectionLabel = /*#__PURE__*/_styled(SectionLabel, process.env.NODE_ENV === "production" ? {
  target: "e1c0i89j1"
} : {
  target: "e1c0i89j1",
  label: "StyledSectionLabel"
})("margin-bottom:0;@media (min-width: ", GEL_GROUP_2_SCREEN_WIDTH_MIN, "){margin-bottom:", GEL_SPACING_DBL, ";}@media (min-width: ", GEL_GROUP_3_SCREEN_WIDTH_MIN, "){margin-bottom:", GEL_SPACING_TRPL, ";}", function (_ref2) {
  var darkMode = _ref2.darkMode;
  return darkMode && "color: ".concat(C_WHITE);
}, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

var InlineDiv = _styled("div", process.env.NODE_ENV === "production" ? {
  target: "e1c0i89j0"
} : {
  target: "e1c0i89j0",
  label: "InlineDiv"
})(process.env.NODE_ENV === "production" ? {
  name: "1u4hpl4",
  styles: "display:inline"
} : {
  name: "1u4hpl4",
  styles: "display:inline",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var SurroundingComponents = function SurroundingComponents(_ref3) {
  var children = _ref3.children,
      script = _ref3.script,
      service = _ref3.service,
      dir = _ref3.dir,
      darkMode = _ref3.darkMode;
  return (
    /*#__PURE__*/
    // eslint-disable-next-line jsx-a11y/aria-role
    React.createElement(Spacer, {
      darkMode: darkMode,
      role: "complimentary",
      "aria-labelledby": "recent-episodes"
    }, /*#__PURE__*/React.createElement(StyledSectionLabel, _extends({
      script: script,
      service: service,
      dir: dir,
      darkMode: darkMode,
      labelId: "recent-episodes"
    }, darkMode ? {
      backgroundColor: C_MIDNIGHT_BLACK
    } : {}), "Recent Episodes"), children)
  );
};

export var renderEpisodes = function renderEpisodes(_ref4) {
  var episodes = _ref4.episodes,
      script = _ref4.script,
      service = _ref4.service,
      dir = _ref4.dir,
      withSurroundingComponents = _ref4.withSurroundingComponents,
      darkMode = _ref4.darkMode,
      ulProps = _ref4.ulProps,
      liProps = _ref4.liProps;
  var Wrapper = withSurroundingComponents ? SurroundingComponents : React.Fragment;
  return /*#__PURE__*/React.createElement(Wrapper, withSurroundingComponents ? {
    script: script,
    service: service,
    dir: dir,
    darkMode: darkMode
  } : {}, /*#__PURE__*/React.createElement(EpisodeList, {
    script: script,
    service: service,
    dir: dir,
    ulProps: ulProps,
    liProps: liProps
  }, episodes.map(function (episode) {
    return /*#__PURE__*/React.createElement(EpisodeList.Episode, {
      key: episode.id
    }, /*#__PURE__*/React.createElement(EpisodeList.Link, {
      href: episode.url
    }, /*#__PURE__*/React.createElement(VisuallyHiddenText, null, "Audio, "), /*#__PURE__*/React.createElement(EpisodeList.Title, {
      className: "episode-list__title--hover episode-list__title--visited"
    }, episode.brandTitle), /*#__PURE__*/React.createElement(VisuallyHiddenText, null, ", "), /*#__PURE__*/React.createElement(EpisodeList.Description, {
      className: "episode-list__description--hover episode-list__description--visited"
    }, episode.episodeTitle || "".concat(episode.date, ", ").concat(episode.time)), /*#__PURE__*/React.createElement(VisuallyHiddenText, null, ", "), /*#__PURE__*/React.createElement(VisuallyHiddenText, null, " ".concat(episode.durationLabel, " ").concat(formatDuration({
      duration: episode.duration,
      format: episode.duration.includes('H') ? 'h,mm,ss' : 'mm,ss',
      locale: episode.locale
    }), " ")), /*#__PURE__*/React.createElement(EpisodeList.DateTimeDuration, null, /*#__PURE__*/React.createElement("span", {
      "aria-hidden": "true"
    }, " ".concat(episode.durationLabel, " ").concat(formatDuration({
      duration: episode.duration,
      locale: episode.locale
    }))))), episode.episodeTitle && /*#__PURE__*/React.createElement(InlineDiv, null, /*#__PURE__*/React.createElement(EpisodeList.DateTimeDuration, {
      as: "time",
      hasBorder: true,
      dateTime: episode.dateTime
    }, episode.date)));
  })));
};
export var renderVideoEpisodes = function renderVideoEpisodes(_ref5) {
  var episodes = _ref5.episodes,
      script = _ref5.script,
      service = _ref5.service,
      dir = _ref5.dir,
      withSurroundingComponents = _ref5.withSurroundingComponents,
      darkMode = _ref5.darkMode;
  var Wrapper = withSurroundingComponents ? SurroundingComponents : React.Fragment;
  return /*#__PURE__*/React.createElement(Wrapper, withSurroundingComponents ? {
    script: script,
    service: service,
    dir: dir,
    darkMode: darkMode
  } : {}, /*#__PURE__*/React.createElement(EpisodeList, {
    script: script,
    service: service,
    dir: dir,
    darkMode: darkMode
  }, episodes.map(function (episode) {
    return /*#__PURE__*/React.createElement(EpisodeList.Episode, {
      key: episode.id
    }, /*#__PURE__*/React.createElement(EpisodeList.Image, {
      src: episode.image,
      alt: episode.altText,
      duration: formatDuration({
        duration: episode.duration,
        locale: episode.locale
      })
    }), /*#__PURE__*/React.createElement(EpisodeList.Link, {
      href: episode.url
    }, /*#__PURE__*/React.createElement(VisuallyHiddenText, null, "Video, "), /*#__PURE__*/React.createElement(EpisodeList.Title, {
      className: "episode-list__title--hover episode-list__title--visited"
    }, episode.brandTitle), /*#__PURE__*/React.createElement(VisuallyHiddenText, null, ", "), /*#__PURE__*/React.createElement(EpisodeList.Description, {
      className: "episode-list__description--hover episode-list__description--visited"
    }, episode.episodeTitle || episode.date), /*#__PURE__*/React.createElement(VisuallyHiddenText, null, ", "), /*#__PURE__*/React.createElement(VisuallyHiddenText, null, " ".concat(episode.durationLabel, " ").concat(formatDuration({
      duration: episode.duration,
      format: episode.duration.includes('H') ? 'h,mm,ss' : 'mm,ss',
      locale: episode.locale
    }), " "))), episode.episodeTitle && /*#__PURE__*/React.createElement(InlineDiv, null, /*#__PURE__*/React.createElement(EpisodeList.DateTimeDuration, {
      as: "time",
      dateTime: episode.dateTime
    }, episode.date)));
  })));
};