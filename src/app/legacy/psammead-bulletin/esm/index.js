import _styled from "@emotion/styled/base";
import React from 'react';
import { GEL_GROUP_3_SCREEN_WIDTH_MIN, GEL_GROUP_3_SCREEN_WIDTH_MAX } from '@bbc/gel-foundations/breakpoints';
import { GEL_SPACING, GEL_SPACING_DBL } from '@bbc/gel-foundations/spacings';
import { C_WHITE, C_POSTBOX, C_SHADOW, C_EBON, C_LUNAR } from '@bbc/psammead-styles/colours';
import { string, oneOf, node, bool, shape } from 'prop-types';
import { getSansRegular, getSerifMedium } from '@bbc/psammead-styles/font-styles';
import { scriptPropType } from '@bbc/gel-foundations/prop-types';
import { getPica, getGreatPrimer, getLongPrimer } from '@bbc/gel-foundations/typography';
import { mediaIcons } from '@bbc/psammead-assets/svgs';
import LiveLabel from '@bbc/psammead-live-label';
import VisuallyHiddenText from '@bbc/psammead-visually-hidden-text';
import { Link } from '@bbc/psammead-story-promo';
import ImageGridItem from './ImageStyles';
import TextGridItem from './TextStyles';
var bulletinWrapperStyles = "\n  position: relative;\n  background-color: ".concat(C_LUNAR, ";\n  display: grid;\n  grid-template-columns: repeat(6, 1fr);\n  grid-column-gap: ").concat(GEL_SPACING_DBL, ";\n");

var RadioBulletinWrapper = _styled("div", process.env.NODE_ENV === "production" ? {
  target: "esr7k9o5"
} : {
  target: "esr7k9o5",
  label: "RadioBulletinWrapper"
})(bulletinWrapperStyles, ";background-color:", C_LUNAR, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

var TVBulletinWrapper = _styled("div", process.env.NODE_ENV === "production" ? {
  target: "esr7k9o4"
} : {
  target: "esr7k9o4",
  label: "TVBulletinWrapper"
})(bulletinWrapperStyles, ";@media (min-width: ", GEL_GROUP_3_SCREEN_WIDTH_MIN, "){padding:", GEL_SPACING_DBL, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

var headingStyles = function headingStyles(_ref) {
  var service = _ref.service;
  return "\n  color: ".concat(C_EBON, ";\n  margin: 0; /* Reset */\n  padding: ").concat(GEL_SPACING, ";\n  ").concat(service && getSerifMedium(service), "\n");
};

var radioHeading = function radioHeading(_ref2) {
  var script = _ref2.script,
      dir = _ref2.dir;
  return "\n  ".concat(script && getPica(script), "\n  @media (min-width: ").concat(GEL_GROUP_3_SCREEN_WIDTH_MIN, ") and (max-width: ").concat(GEL_GROUP_3_SCREEN_WIDTH_MAX, ") {\n    padding-top: ").concat(GEL_SPACING, ";\n    padding-bottom: ").concat(GEL_SPACING, ";\n    ").concat(dir === 'ltr' ? "padding-left: 0;" : "padding-right: 0;", "\n  }\n");
};

var tvHeading = function tvHeading(_ref3) {
  var script = _ref3.script;
  return "\n  ".concat(script && getGreatPrimer(script), "\n  @media (min-width: ").concat(GEL_GROUP_3_SCREEN_WIDTH_MIN, ") {\n    padding: 0 0 ").concat(GEL_SPACING, " 0;\n  }\n");
};

var bulletinHeadinStyles = {
  radio: radioHeading,
  tv: tvHeading
};

var BulletinHeading = _styled("h3", process.env.NODE_ENV === "production" ? {
  target: "esr7k9o3"
} : {
  target: "esr7k9o3",
  label: "BulletinHeading"
})(headingStyles, " ", function (_ref4) {
  var bulletinType = _ref4.bulletinType;
  return bulletinHeadinStyles[bulletinType];
}, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

var radioSummary = function radioSummary(_ref5) {
  var dir = _ref5.dir;
  return "\n  @media (min-width: ".concat(GEL_GROUP_3_SCREEN_WIDTH_MIN, ") and (max-width: ").concat(GEL_GROUP_3_SCREEN_WIDTH_MAX, ") {\n    ").concat(dir === 'ltr' ? 'padding-left: 0;' : 'padding-right: 0;', "\n  }\n");
};

var tvSummary = function tvSummary(_ref6) {
  var dir = _ref6.dir,
      bulletinType = _ref6.bulletinType;
  return "\n  @media (min-width: ".concat(GEL_GROUP_3_SCREEN_WIDTH_MIN, ") {\n    ").concat(dir === 'ltr' ? "\n            padding-left: 0;\n            ".concat(bulletinType === 'tv' && 'padding-right: 0;', "\n          ") : "\n            padding-right: 0;\n            ".concat(bulletinType === 'tv' && 'padding-left: 0;', "\n          "), "\n  }\n");
};

var bulletinSummaryStyles = {
  radio: radioSummary,
  tv: tvSummary
};

var BulletinSummary = _styled("p", process.env.NODE_ENV === "production" ? {
  target: "esr7k9o2"
} : {
  target: "esr7k9o2",
  label: "BulletinSummary"
})("color:", C_SHADOW, ";margin:0;padding:0 ", GEL_SPACING, " ", GEL_SPACING_DBL, ";", function (_ref7) {
  var script = _ref7.script;
  return script && getLongPrimer(script);
}, " ", function (_ref8) {
  var service = _ref8.service;
  return service && getSansRegular(service);
}, " ", function (_ref9) {
  var bulletinType = _ref9.bulletinType;
  return bulletinSummaryStyles[bulletinType];
}, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

var IconWrapper = _styled("span", process.env.NODE_ENV === "production" ? {
  target: "esr7k9o1"
} : {
  target: "esr7k9o1",
  label: "IconWrapper"
})("display:flex;align-items:center;>svg{color:", C_WHITE, ";fill:currentColor;width:1.0625rem;height:", GEL_SPACING_DBL, ";margin:0;}", function (_ref10) {
  var dir = _ref10.dir;
  return dir === 'ltr' ? "padding-right: ".concat(GEL_SPACING, ";") : "padding-left: ".concat(GEL_SPACING, ";");
}, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

var radioPlayCta = "\n  @media (min-width: ".concat(GEL_GROUP_3_SCREEN_WIDTH_MIN, ") and (max-width: ").concat(GEL_GROUP_3_SCREEN_WIDTH_MAX, ") {\n    display: inline-flex;\n    padding: ").concat(GEL_SPACING, " ").concat(GEL_SPACING_DBL, ";\n    margin-bottom: ").concat(GEL_SPACING_DBL, ";\n  }\n");
var tvPlayCta = "\n  @media (min-width: ".concat(GEL_GROUP_3_SCREEN_WIDTH_MIN, ") {\n    display: inline-flex;\n    padding: ").concat(GEL_SPACING, " ").concat(GEL_SPACING_DBL, ";\n  }\n");
var playCtaStyles = {
  radio: radioPlayCta,
  tv: tvPlayCta
};

var PlayCTA = _styled("div", process.env.NODE_ENV === "production" ? {
  target: "esr7k9o0"
} : {
  target: "esr7k9o0",
  label: "PlayCTA"
})("background-color:", function (_ref11) {
  var isLive = _ref11.isLive;
  return isLive ? C_POSTBOX : C_EBON;
}, ";border:0.0625rem solid transparent;color:", C_WHITE, ";padding:0.75rem;display:flex;align-items:center;justify-content:center;", function (_ref12) {
  var script = _ref12.script;
  return script && getPica(script);
}, ";", function (_ref13) {
  var service = _ref13.service;
  return service && getSansRegular(service);
}, ";", function (_ref14) {
  var bulletinType = _ref14.bulletinType;
  return playCtaStyles[bulletinType];
}, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

PlayCTA.defaultProps = {
  'aria-hidden': true
};

var Bulletin = function Bulletin(_ref15) {
  var script = _ref15.script,
      service = _ref15.service,
      dir = _ref15.dir,
      image = _ref15.image,
      mediaType = _ref15.mediaType,
      headlineText = _ref15.headlineText,
      summaryText = _ref15.summaryText,
      ctaLink = _ref15.ctaLink,
      ctaText = _ref15.ctaText,
      isLive = _ref15.isLive,
      liveText = _ref15.liveText,
      offScreenText = _ref15.offScreenText,
      lang = _ref15.lang;
  var isAudio = mediaType === 'audio';
  var bulletinType = isAudio ? 'radio' : 'tv';
  var BulletinWrapper = isAudio ? RadioBulletinWrapper : TVBulletinWrapper;
  return /*#__PURE__*/React.createElement(BulletinWrapper, null, image && /*#__PURE__*/React.createElement(ImageGridItem, {
    bulletinType: bulletinType
  }, image), /*#__PURE__*/React.createElement(TextGridItem, {
    bulletinType: bulletinType,
    fullWidth: !image,
    dir: dir
  }, /*#__PURE__*/React.createElement(BulletinHeading, {
    script: script,
    service: service,
    bulletinType: bulletinType,
    dir: dir
  }, /*#__PURE__*/React.createElement(Link, {
    href: ctaLink
  }, isLive ? /*#__PURE__*/React.createElement(LiveLabel, {
    service: service,
    dir: dir,
    liveText: liveText,
    ariaHidden: true,
    offScreenText: offScreenText
  }, headlineText) :
  /*#__PURE__*/
  // eslint-disable-next-line jsx-a11y/aria-role
  React.createElement("span", {
    role: "text"
  }, offScreenText && /*#__PURE__*/React.createElement(VisuallyHiddenText, {
    lang: lang
  }, "".concat(offScreenText, ", ")), /*#__PURE__*/React.createElement("span", null, headlineText)))), summaryText && /*#__PURE__*/React.createElement(BulletinSummary, {
    script: script,
    service: service,
    bulletinType: bulletinType,
    dir: dir
  }, summaryText), /*#__PURE__*/React.createElement(PlayCTA, {
    isLive: isLive,
    service: service,
    script: script,
    bulletinType: bulletinType,
    dir: dir
  }, /*#__PURE__*/React.createElement(IconWrapper, {
    dir: dir
  }, mediaIcons[mediaType]), ctaText)));
};

Bulletin.propTypes = {
  mediaType: oneOf(['video', 'audio']).isRequired,
  service: string.isRequired,
  script: shape(scriptPropType).isRequired,
  dir: oneOf(['ltr', 'rtl']),
  ctaText: string.isRequired,
  ctaLink: string.isRequired,
  image: node,
  summaryText: string,
  headlineText: string.isRequired,
  isLive: bool,
  liveText: string,
  offScreenText: string.isRequired,
  lang: string
};
Bulletin.defaultProps = {
  dir: 'ltr',
  image: null,
  summaryText: null,
  isLive: false,
  liveText: 'LIVE',
  lang: null
};
export default Bulletin;