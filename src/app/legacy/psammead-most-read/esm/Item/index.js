import _styled from '@emotion/styled/base';

function _extends() {
  _extends =
    Object.assign ||
    function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
  return _extends.apply(this, arguments);
}

function _EMOTION_STRINGIFIED_CSS_ERROR__() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}

import React from 'react';
import { shape, string, oneOf, node } from 'prop-types';
import { getPica, getGreatPrimer } from '#legacy/gel-foundations/typography';
import { C_EBON } from '#legacy/psammead-styles/colours';
import { scriptPropType } from '#legacy/gel-foundations/prop-types';
import { grid } from '#legacy/psammead-styles/detection';
import { getSerifMedium } from '#legacy/psammead-styles/font-styles';
import {
  GEL_SPACING,
  GEL_SPACING_DBL,
  GEL_SPACING_TRPL,
} from '#legacy/gel-foundations/spacings';
import { GEL_GROUP_2_SCREEN_WIDTH_MIN } from '#legacy/gel-foundations/breakpoints';
import Grid from '#legacy/psammead-grid';
import {
  mostReadListGridProps,
  mostReadItemGridProps,
} from '../utilities/gridProps';
export var getParentColumns = function getParentColumns(columnLayout) {
  if (columnLayout !== 'oneColumn') {
    return mostReadListGridProps(columnLayout).columns;
  }

  return null;
};

var StyledLink = _styled(
  'a',
  process.env.NODE_ENV === 'production'
    ? {
        target: 'e1t2pq2f4',
      }
    : {
        target: 'e1t2pq2f4',
        label: 'StyledLink',
      },
)(
  function (_ref) {
    var script = _ref.script;
    return script && getPica(script);
  },
  ';',
  function (_ref2) {
    var service = _ref2.service;
    return getSerifMedium(service);
  },
  ';position:static;color:',
  C_EBON,
  ';text-decoration:none;margin-bottom:',
  GEL_SPACING,
  ";&:hover,&:focus{text-decoration:underline;}&:before{bottom:0;content:'';left:0;overflow:hidden;position:absolute;right:0;top:0;white-space:nowrap;z-index:1;}",
  function (_ref3) {
    var script = _ref3.script,
      size = _ref3.size;
    return (
      script &&
      size !== 'small' &&
      '@media (min-width: '
        .concat(GEL_GROUP_2_SCREEN_WIDTH_MIN, ') {\n      ')
        .concat(getGreatPrimer(script), '\n    }')
    );
  },
  ';' +
    (process.env.NODE_ENV === 'production'
      ? ''
      : '/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9JdGVtL2luZGV4LmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUEyQjJCIiwiZmlsZSI6Ii4uLy4uL3NyYy9JdGVtL2luZGV4LmpzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBzaGFwZSwgc3RyaW5nLCBvbmVPZiwgbm9kZSB9IGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgZ2V0UGljYSwgZ2V0R3JlYXRQcmltZXIgfSBmcm9tICdAYmJjL2dlbC1mb3VuZGF0aW9ucy90eXBvZ3JhcGh5JztcbmltcG9ydCB7IENfRUJPTiB9IGZyb20gJ0BiYmMvcHNhbW1lYWQtc3R5bGVzL2NvbG91cnMnO1xuaW1wb3J0IHsgc2NyaXB0UHJvcFR5cGUgfSBmcm9tICdAYmJjL2dlbC1mb3VuZGF0aW9ucy9wcm9wLXR5cGVzJztcbmltcG9ydCB7IGdyaWQgfSBmcm9tICdAYmJjL3BzYW1tZWFkLXN0eWxlcy9kZXRlY3Rpb24nO1xuaW1wb3J0IHsgZ2V0U2VyaWZNZWRpdW0gfSBmcm9tICdAYmJjL3BzYW1tZWFkLXN0eWxlcy9mb250LXN0eWxlcyc7XG5pbXBvcnQge1xuICBHRUxfU1BBQ0lORyxcbiAgR0VMX1NQQUNJTkdfREJMLFxuICBHRUxfU1BBQ0lOR19UUlBMLFxufSBmcm9tICdAYmJjL2dlbC1mb3VuZGF0aW9ucy9zcGFjaW5ncyc7XG5pbXBvcnQgeyBHRUxfR1JPVVBfMl9TQ1JFRU5fV0lEVEhfTUlOIH0gZnJvbSAnQGJiYy9nZWwtZm91bmRhdGlvbnMvYnJlYWtwb2ludHMnO1xuaW1wb3J0IEdyaWQgZnJvbSAnQGJiYy9wc2FtbWVhZC1ncmlkJztcbmltcG9ydCB7XG4gIG1vc3RSZWFkTGlzdEdyaWRQcm9wcyxcbiAgbW9zdFJlYWRJdGVtR3JpZFByb3BzLFxufSBmcm9tICcuLi91dGlsaXRpZXMvZ3JpZFByb3BzJztcblxuZXhwb3J0IGNvbnN0IGdldFBhcmVudENvbHVtbnMgPSBjb2x1bW5MYXlvdXQgPT4ge1xuICBpZiAoY29sdW1uTGF5b3V0ICE9PSAnb25lQ29sdW1uJykge1xuICAgIHJldHVybiBtb3N0UmVhZExpc3RHcmlkUHJvcHMoY29sdW1uTGF5b3V0KS5jb2x1bW5zO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcblxuY29uc3QgU3R5bGVkTGluayA9IHN0eWxlZC5hYFxuICAkeyh7IHNjcmlwdCB9KSA9PiBzY3JpcHQgJiYgZ2V0UGljYShzY3JpcHQpfTtcbiAgJHsoeyBzZXJ2aWNlIH0pID0+IGdldFNlcmlmTWVkaXVtKHNlcnZpY2UpfTtcblxuICBwb3NpdGlvbjogc3RhdGljO1xuICBjb2xvcjogJHtDX0VCT059O1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gIG1hcmdpbi1ib3R0b206ICR7R0VMX1NQQUNJTkd9O1xuXG4gICY6aG92ZXIsXG4gICY6Zm9jdXMge1xuICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xuICB9XG5cbiAgJjpiZWZvcmUge1xuICAgIGJvdHRvbTogMDtcbiAgICBjb250ZW50OiAnJztcbiAgICBsZWZ0OiAwO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHJpZ2h0OiAwO1xuICAgIHRvcDogMDtcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgIHotaW5kZXg6IDE7XG4gIH1cblxuICAkeyh7IHNjcmlwdCwgc2l6ZSB9KSA9PlxuICAgIHNjcmlwdCAmJlxuICAgIHNpemUgIT09ICdzbWFsbCcgJiZcbiAgICBgQG1lZGlhIChtaW4td2lkdGg6ICR7R0VMX0dST1VQXzJfU0NSRUVOX1dJRFRIX01JTn0pIHtcbiAgICAgICR7Z2V0R3JlYXRQcmltZXIoc2NyaXB0KX1cbiAgICB9YH1cbmA7XG5cbmNvbnN0IGdldFJhbmtQYWRkaW5nVG9wID0gc2l6ZSA9PiAoc2l6ZSA9PT0gJ3NtYWxsJyA/ICcwLjJyZW0nIDogJzAuMzc1cmVtJyk7XG5jb25zdCBnZXRSYW5rUGFkZGluZ1N0YXJ0ID0gc2l6ZSA9PlxuICBzaXplID09PSAnc21hbGwnID8gR0VMX1NQQUNJTkcgOiBHRUxfU1BBQ0lOR19EQkw7XG5cbmNvbnN0IFN0eWxlZEl0ZW0gPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nLXRvcDogJHsoeyBzaXplIH0pID0+IGdldFJhbmtQYWRkaW5nVG9wKHNpemUpfTtcblxuICAkeyh7IGRpciwgc2l6ZSB9KSA9PlxuICAgIGRpciA9PT0gJ2x0cidcbiAgICAgID8gYHBhZGRpbmctbGVmdDogJHtnZXRSYW5rUGFkZGluZ1N0YXJ0KHNpemUpfTtgXG4gICAgICA6IGBwYWRkaW5nLXJpZ2h0OiAke2dldFJhbmtQYWRkaW5nU3RhcnQoc2l6ZSl9O2B9XG5cbiAgJHsoeyBkaXIgfSkgPT5cbiAgICBkaXIgPT09ICdsdHInXG4gICAgICA/IGBwYWRkaW5nLXJpZ2h0OiAke0dFTF9TUEFDSU5HX0RCTH07YFxuICAgICAgOiBgcGFkZGluZy1sZWZ0OiAke0dFTF9TUEFDSU5HX0RCTH07YH1cblxuICBAc3VwcG9ydHMgKCR7Z3JpZH0pIHtcbiAgICAkeyh7IGRpciB9KSA9PiAoZGlyID09PSAnbHRyJyA/ICdwYWRkaW5nLXJpZ2h0OiAwOycgOiAncGFkZGluZy1sZWZ0OiAwOycpfVxuICB9XG5gO1xuXG5jb25zdCBUaW1lc3RhbXBXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgcGFkZGluZy10b3A6ICR7R0VMX1NQQUNJTkd9O1xuYDtcblxuZXhwb3J0IGNvbnN0IE1vc3RSZWFkTGluayA9ICh7XG4gIGRpcixcbiAgc2VydmljZSxcbiAgc2NyaXB0LFxuICB0aXRsZSxcbiAgaHJlZixcbiAgY2hpbGRyZW4sXG4gIHNpemUsXG59KSA9PiAoXG4gIDxTdHlsZWRJdGVtIGRpcj17ZGlyfSBzaXplPXtzaXplfT5cbiAgICA8U3R5bGVkTGluayBocmVmPXtocmVmfSBzY3JpcHQ9e3NjcmlwdH0gc2VydmljZT17c2VydmljZX0gc2l6ZT17c2l6ZX0+XG4gICAgICB7dGl0bGV9XG4gICAgPC9TdHlsZWRMaW5rPlxuICAgIHtjaGlsZHJlbiAmJiA8VGltZXN0YW1wV3JhcHBlcj57Y2hpbGRyZW59PC9UaW1lc3RhbXBXcmFwcGVyPn1cbiAgPC9TdHlsZWRJdGVtPlxuKTtcblxuTW9zdFJlYWRMaW5rLnByb3BUeXBlcyA9IHtcbiAgZGlyOiBvbmVPZihbJ3J0bCcsICdsdHInXSksXG4gIHNlcnZpY2U6IHN0cmluZy5pc1JlcXVpcmVkLFxuICBzY3JpcHQ6IHNoYXBlKHNjcmlwdFByb3BUeXBlKS5pc1JlcXVpcmVkLFxuICB0aXRsZTogc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGhyZWY6IHN0cmluZy5pc1JlcXVpcmVkLFxuICBjaGlsZHJlbjogbm9kZSwgLy8gdGhpcyBub2RlIHdpbGwgYmUgYSB0aW1lc3RhbXAgY29udGFpbmVyXG4gIHNpemU6IG9uZU9mKFsnZGVmYXVsdCcsICdzbWFsbCddKSxcbn07XG5cbk1vc3RSZWFkTGluay5kZWZhdWx0UHJvcHMgPSB7XG4gIGRpcjogJ2x0cicsXG4gIGNoaWxkcmVuOiBudWxsLFxuICBzaXplOiAnZGVmYXVsdCcsXG59O1xuXG5jb25zdCBJdGVtV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbmA7XG5cbmNvbnN0IFN0eWxlZEdyaWQgPSBzdHlsZWQoR3JpZClgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgcGFkZGluZy1ib3R0b206ICR7R0VMX1NQQUNJTkdfVFJQTH07XG5gO1xuXG5TdHlsZWRHcmlkLmRlZmF1bHRQcm9wcyA9IHtcbiAgcm9sZTogJ2xpc3RpdGVtJyxcbn07XG5cbmV4cG9ydCBjb25zdCBNb3N0UmVhZEl0ZW1XcmFwcGVyID0gKHsgZGlyLCBjaGlsZHJlbiwgY29sdW1uTGF5b3V0IH0pID0+IChcbiAgPFN0eWxlZEdyaWRcbiAgICB7Li4ubW9zdFJlYWRJdGVtR3JpZFByb3BzKGNvbHVtbkxheW91dCl9XG4gICAgcGFyZW50Q29sdW1ucz17Z2V0UGFyZW50Q29sdW1ucyhjb2x1bW5MYXlvdXQpfSAvLyBwYXJlbnRDb2x1bW5zIGlzIHJlcXVpcmVkIGhlcmUgYmVjYXVzZSBvbiBJRSwgdGhpcyBjb21wb25lbnQgd291bGQgYmUgcmVuZGVyZWQgYmVmb3JlIGl0J3MgcGFyZW50IHRoZXJlZm9yZSBub3QgcmVjZWl2aW5nIHRoZSBwYXJlbnQncyBncmlkIGNvbHVtbnMgdmFsdWVzIHNvIHdlIGhhdmUgdG8gZXhwbGljaXRseSBwYXNzIGl0IGFzIGEgcHJvcCBoZXJlIHNvIGl0IHdvcmtzIG9uIElFXG4gICAgZGlyPXtkaXJ9XG4gICAgYXM9XCJsaVwiXG4gID5cbiAgICA8SXRlbVdyYXBwZXI+e2NoaWxkcmVufTwvSXRlbVdyYXBwZXI+XG4gIDwvU3R5bGVkR3JpZD5cbik7XG5cbk1vc3RSZWFkSXRlbVdyYXBwZXIucHJvcFR5cGVzID0ge1xuICBjaGlsZHJlbjogbm9kZS5pc1JlcXVpcmVkLFxuICBkaXI6IG9uZU9mKFsncnRsJywgJ2x0ciddKSxcbiAgY29sdW1uTGF5b3V0OiBvbmVPZihbJ29uZUNvbHVtbicsICd0d29Db2x1bW4nLCAnbXVsdGlDb2x1bW4nXSksXG59O1xuXG5Nb3N0UmVhZEl0ZW1XcmFwcGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgZGlyOiAnbHRyJyxcbiAgY29sdW1uTGF5b3V0OiAnbXVsdGlDb2x1bW4nLFxufTtcbiJdfQ== */'),
);

var getRankPaddingTop = function getRankPaddingTop(size) {
  return size === 'small' ? '0.2rem' : '0.375rem';
};

var getRankPaddingStart = function getRankPaddingStart(size) {
  return size === 'small' ? GEL_SPACING : GEL_SPACING_DBL;
};

var StyledItem = _styled(
  'div',
  process.env.NODE_ENV === 'production'
    ? {
        target: 'e1t2pq2f3',
      }
    : {
        target: 'e1t2pq2f3',
        label: 'StyledItem',
      },
)(
  'padding-top:',
  function (_ref4) {
    var size = _ref4.size;
    return getRankPaddingTop(size);
  },
  ';',
  function (_ref5) {
    var dir = _ref5.dir,
      size = _ref5.size;
    return dir === 'ltr'
      ? 'padding-left: '.concat(getRankPaddingStart(size), ';')
      : 'padding-right: '.concat(getRankPaddingStart(size), ';');
  },
  ' ',
  function (_ref6) {
    var dir = _ref6.dir;
    return dir === 'ltr'
      ? 'padding-right: '.concat(GEL_SPACING_DBL, ';')
      : 'padding-left: '.concat(GEL_SPACING_DBL, ';');
  },
  '@supports (',
  grid,
  '){',
  function (_ref7) {
    var dir = _ref7.dir;
    return dir === 'ltr' ? 'padding-right: 0;' : 'padding-left: 0;';
  },
  ';}' +
    (process.env.NODE_ENV === 'production'
      ? ''
      : '/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9JdGVtL2luZGV4LmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFpRTZCIiwiZmlsZSI6Ii4uLy4uL3NyYy9JdGVtL2luZGV4LmpzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBzaGFwZSwgc3RyaW5nLCBvbmVPZiwgbm9kZSB9IGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgZ2V0UGljYSwgZ2V0R3JlYXRQcmltZXIgfSBmcm9tICdAYmJjL2dlbC1mb3VuZGF0aW9ucy90eXBvZ3JhcGh5JztcbmltcG9ydCB7IENfRUJPTiB9IGZyb20gJ0BiYmMvcHNhbW1lYWQtc3R5bGVzL2NvbG91cnMnO1xuaW1wb3J0IHsgc2NyaXB0UHJvcFR5cGUgfSBmcm9tICdAYmJjL2dlbC1mb3VuZGF0aW9ucy9wcm9wLXR5cGVzJztcbmltcG9ydCB7IGdyaWQgfSBmcm9tICdAYmJjL3BzYW1tZWFkLXN0eWxlcy9kZXRlY3Rpb24nO1xuaW1wb3J0IHsgZ2V0U2VyaWZNZWRpdW0gfSBmcm9tICdAYmJjL3BzYW1tZWFkLXN0eWxlcy9mb250LXN0eWxlcyc7XG5pbXBvcnQge1xuICBHRUxfU1BBQ0lORyxcbiAgR0VMX1NQQUNJTkdfREJMLFxuICBHRUxfU1BBQ0lOR19UUlBMLFxufSBmcm9tICdAYmJjL2dlbC1mb3VuZGF0aW9ucy9zcGFjaW5ncyc7XG5pbXBvcnQgeyBHRUxfR1JPVVBfMl9TQ1JFRU5fV0lEVEhfTUlOIH0gZnJvbSAnQGJiYy9nZWwtZm91bmRhdGlvbnMvYnJlYWtwb2ludHMnO1xuaW1wb3J0IEdyaWQgZnJvbSAnQGJiYy9wc2FtbWVhZC1ncmlkJztcbmltcG9ydCB7XG4gIG1vc3RSZWFkTGlzdEdyaWRQcm9wcyxcbiAgbW9zdFJlYWRJdGVtR3JpZFByb3BzLFxufSBmcm9tICcuLi91dGlsaXRpZXMvZ3JpZFByb3BzJztcblxuZXhwb3J0IGNvbnN0IGdldFBhcmVudENvbHVtbnMgPSBjb2x1bW5MYXlvdXQgPT4ge1xuICBpZiAoY29sdW1uTGF5b3V0ICE9PSAnb25lQ29sdW1uJykge1xuICAgIHJldHVybiBtb3N0UmVhZExpc3RHcmlkUHJvcHMoY29sdW1uTGF5b3V0KS5jb2x1bW5zO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcblxuY29uc3QgU3R5bGVkTGluayA9IHN0eWxlZC5hYFxuICAkeyh7IHNjcmlwdCB9KSA9PiBzY3JpcHQgJiYgZ2V0UGljYShzY3JpcHQpfTtcbiAgJHsoeyBzZXJ2aWNlIH0pID0+IGdldFNlcmlmTWVkaXVtKHNlcnZpY2UpfTtcblxuICBwb3NpdGlvbjogc3RhdGljO1xuICBjb2xvcjogJHtDX0VCT059O1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gIG1hcmdpbi1ib3R0b206ICR7R0VMX1NQQUNJTkd9O1xuXG4gICY6aG92ZXIsXG4gICY6Zm9jdXMge1xuICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xuICB9XG5cbiAgJjpiZWZvcmUge1xuICAgIGJvdHRvbTogMDtcbiAgICBjb250ZW50OiAnJztcbiAgICBsZWZ0OiAwO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHJpZ2h0OiAwO1xuICAgIHRvcDogMDtcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgIHotaW5kZXg6IDE7XG4gIH1cblxuICAkeyh7IHNjcmlwdCwgc2l6ZSB9KSA9PlxuICAgIHNjcmlwdCAmJlxuICAgIHNpemUgIT09ICdzbWFsbCcgJiZcbiAgICBgQG1lZGlhIChtaW4td2lkdGg6ICR7R0VMX0dST1VQXzJfU0NSRUVOX1dJRFRIX01JTn0pIHtcbiAgICAgICR7Z2V0R3JlYXRQcmltZXIoc2NyaXB0KX1cbiAgICB9YH1cbmA7XG5cbmNvbnN0IGdldFJhbmtQYWRkaW5nVG9wID0gc2l6ZSA9PiAoc2l6ZSA9PT0gJ3NtYWxsJyA/ICcwLjJyZW0nIDogJzAuMzc1cmVtJyk7XG5jb25zdCBnZXRSYW5rUGFkZGluZ1N0YXJ0ID0gc2l6ZSA9PlxuICBzaXplID09PSAnc21hbGwnID8gR0VMX1NQQUNJTkcgOiBHRUxfU1BBQ0lOR19EQkw7XG5cbmNvbnN0IFN0eWxlZEl0ZW0gPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nLXRvcDogJHsoeyBzaXplIH0pID0+IGdldFJhbmtQYWRkaW5nVG9wKHNpemUpfTtcblxuICAkeyh7IGRpciwgc2l6ZSB9KSA9PlxuICAgIGRpciA9PT0gJ2x0cidcbiAgICAgID8gYHBhZGRpbmctbGVmdDogJHtnZXRSYW5rUGFkZGluZ1N0YXJ0KHNpemUpfTtgXG4gICAgICA6IGBwYWRkaW5nLXJpZ2h0OiAke2dldFJhbmtQYWRkaW5nU3RhcnQoc2l6ZSl9O2B9XG5cbiAgJHsoeyBkaXIgfSkgPT5cbiAgICBkaXIgPT09ICdsdHInXG4gICAgICA/IGBwYWRkaW5nLXJpZ2h0OiAke0dFTF9TUEFDSU5HX0RCTH07YFxuICAgICAgOiBgcGFkZGluZy1sZWZ0OiAke0dFTF9TUEFDSU5HX0RCTH07YH1cblxuICBAc3VwcG9ydHMgKCR7Z3JpZH0pIHtcbiAgICAkeyh7IGRpciB9KSA9PiAoZGlyID09PSAnbHRyJyA/ICdwYWRkaW5nLXJpZ2h0OiAwOycgOiAncGFkZGluZy1sZWZ0OiAwOycpfVxuICB9XG5gO1xuXG5jb25zdCBUaW1lc3RhbXBXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgcGFkZGluZy10b3A6ICR7R0VMX1NQQUNJTkd9O1xuYDtcblxuZXhwb3J0IGNvbnN0IE1vc3RSZWFkTGluayA9ICh7XG4gIGRpcixcbiAgc2VydmljZSxcbiAgc2NyaXB0LFxuICB0aXRsZSxcbiAgaHJlZixcbiAgY2hpbGRyZW4sXG4gIHNpemUsXG59KSA9PiAoXG4gIDxTdHlsZWRJdGVtIGRpcj17ZGlyfSBzaXplPXtzaXplfT5cbiAgICA8U3R5bGVkTGluayBocmVmPXtocmVmfSBzY3JpcHQ9e3NjcmlwdH0gc2VydmljZT17c2VydmljZX0gc2l6ZT17c2l6ZX0+XG4gICAgICB7dGl0bGV9XG4gICAgPC9TdHlsZWRMaW5rPlxuICAgIHtjaGlsZHJlbiAmJiA8VGltZXN0YW1wV3JhcHBlcj57Y2hpbGRyZW59PC9UaW1lc3RhbXBXcmFwcGVyPn1cbiAgPC9TdHlsZWRJdGVtPlxuKTtcblxuTW9zdFJlYWRMaW5rLnByb3BUeXBlcyA9IHtcbiAgZGlyOiBvbmVPZihbJ3J0bCcsICdsdHInXSksXG4gIHNlcnZpY2U6IHN0cmluZy5pc1JlcXVpcmVkLFxuICBzY3JpcHQ6IHNoYXBlKHNjcmlwdFByb3BUeXBlKS5pc1JlcXVpcmVkLFxuICB0aXRsZTogc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGhyZWY6IHN0cmluZy5pc1JlcXVpcmVkLFxuICBjaGlsZHJlbjogbm9kZSwgLy8gdGhpcyBub2RlIHdpbGwgYmUgYSB0aW1lc3RhbXAgY29udGFpbmVyXG4gIHNpemU6IG9uZU9mKFsnZGVmYXVsdCcsICdzbWFsbCddKSxcbn07XG5cbk1vc3RSZWFkTGluay5kZWZhdWx0UHJvcHMgPSB7XG4gIGRpcjogJ2x0cicsXG4gIGNoaWxkcmVuOiBudWxsLFxuICBzaXplOiAnZGVmYXVsdCcsXG59O1xuXG5jb25zdCBJdGVtV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbmA7XG5cbmNvbnN0IFN0eWxlZEdyaWQgPSBzdHlsZWQoR3JpZClgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgcGFkZGluZy1ib3R0b206ICR7R0VMX1NQQUNJTkdfVFJQTH07XG5gO1xuXG5TdHlsZWRHcmlkLmRlZmF1bHRQcm9wcyA9IHtcbiAgcm9sZTogJ2xpc3RpdGVtJyxcbn07XG5cbmV4cG9ydCBjb25zdCBNb3N0UmVhZEl0ZW1XcmFwcGVyID0gKHsgZGlyLCBjaGlsZHJlbiwgY29sdW1uTGF5b3V0IH0pID0+IChcbiAgPFN0eWxlZEdyaWRcbiAgICB7Li4ubW9zdFJlYWRJdGVtR3JpZFByb3BzKGNvbHVtbkxheW91dCl9XG4gICAgcGFyZW50Q29sdW1ucz17Z2V0UGFyZW50Q29sdW1ucyhjb2x1bW5MYXlvdXQpfSAvLyBwYXJlbnRDb2x1bW5zIGlzIHJlcXVpcmVkIGhlcmUgYmVjYXVzZSBvbiBJRSwgdGhpcyBjb21wb25lbnQgd291bGQgYmUgcmVuZGVyZWQgYmVmb3JlIGl0J3MgcGFyZW50IHRoZXJlZm9yZSBub3QgcmVjZWl2aW5nIHRoZSBwYXJlbnQncyBncmlkIGNvbHVtbnMgdmFsdWVzIHNvIHdlIGhhdmUgdG8gZXhwbGljaXRseSBwYXNzIGl0IGFzIGEgcHJvcCBoZXJlIHNvIGl0IHdvcmtzIG9uIElFXG4gICAgZGlyPXtkaXJ9XG4gICAgYXM9XCJsaVwiXG4gID5cbiAgICA8SXRlbVdyYXBwZXI+e2NoaWxkcmVufTwvSXRlbVdyYXBwZXI+XG4gIDwvU3R5bGVkR3JpZD5cbik7XG5cbk1vc3RSZWFkSXRlbVdyYXBwZXIucHJvcFR5cGVzID0ge1xuICBjaGlsZHJlbjogbm9kZS5pc1JlcXVpcmVkLFxuICBkaXI6IG9uZU9mKFsncnRsJywgJ2x0ciddKSxcbiAgY29sdW1uTGF5b3V0OiBvbmVPZihbJ29uZUNvbHVtbicsICd0d29Db2x1bW4nLCAnbXVsdGlDb2x1bW4nXSksXG59O1xuXG5Nb3N0UmVhZEl0ZW1XcmFwcGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgZGlyOiAnbHRyJyxcbiAgY29sdW1uTGF5b3V0OiAnbXVsdGlDb2x1bW4nLFxufTtcbiJdfQ== */'),
);

var TimestampWrapper = _styled(
  'div',
  process.env.NODE_ENV === 'production'
    ? {
        target: 'e1t2pq2f2',
      }
    : {
        target: 'e1t2pq2f2',
        label: 'TimestampWrapper',
      },
)(
  'padding-top:',
  GEL_SPACING,
  ';' +
    (process.env.NODE_ENV === 'production'
      ? ''
      : '/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9JdGVtL2luZGV4LmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFtRm1DIiwiZmlsZSI6Ii4uLy4uL3NyYy9JdGVtL2luZGV4LmpzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBzaGFwZSwgc3RyaW5nLCBvbmVPZiwgbm9kZSB9IGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgZ2V0UGljYSwgZ2V0R3JlYXRQcmltZXIgfSBmcm9tICdAYmJjL2dlbC1mb3VuZGF0aW9ucy90eXBvZ3JhcGh5JztcbmltcG9ydCB7IENfRUJPTiB9IGZyb20gJ0BiYmMvcHNhbW1lYWQtc3R5bGVzL2NvbG91cnMnO1xuaW1wb3J0IHsgc2NyaXB0UHJvcFR5cGUgfSBmcm9tICdAYmJjL2dlbC1mb3VuZGF0aW9ucy9wcm9wLXR5cGVzJztcbmltcG9ydCB7IGdyaWQgfSBmcm9tICdAYmJjL3BzYW1tZWFkLXN0eWxlcy9kZXRlY3Rpb24nO1xuaW1wb3J0IHsgZ2V0U2VyaWZNZWRpdW0gfSBmcm9tICdAYmJjL3BzYW1tZWFkLXN0eWxlcy9mb250LXN0eWxlcyc7XG5pbXBvcnQge1xuICBHRUxfU1BBQ0lORyxcbiAgR0VMX1NQQUNJTkdfREJMLFxuICBHRUxfU1BBQ0lOR19UUlBMLFxufSBmcm9tICdAYmJjL2dlbC1mb3VuZGF0aW9ucy9zcGFjaW5ncyc7XG5pbXBvcnQgeyBHRUxfR1JPVVBfMl9TQ1JFRU5fV0lEVEhfTUlOIH0gZnJvbSAnQGJiYy9nZWwtZm91bmRhdGlvbnMvYnJlYWtwb2ludHMnO1xuaW1wb3J0IEdyaWQgZnJvbSAnQGJiYy9wc2FtbWVhZC1ncmlkJztcbmltcG9ydCB7XG4gIG1vc3RSZWFkTGlzdEdyaWRQcm9wcyxcbiAgbW9zdFJlYWRJdGVtR3JpZFByb3BzLFxufSBmcm9tICcuLi91dGlsaXRpZXMvZ3JpZFByb3BzJztcblxuZXhwb3J0IGNvbnN0IGdldFBhcmVudENvbHVtbnMgPSBjb2x1bW5MYXlvdXQgPT4ge1xuICBpZiAoY29sdW1uTGF5b3V0ICE9PSAnb25lQ29sdW1uJykge1xuICAgIHJldHVybiBtb3N0UmVhZExpc3RHcmlkUHJvcHMoY29sdW1uTGF5b3V0KS5jb2x1bW5zO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcblxuY29uc3QgU3R5bGVkTGluayA9IHN0eWxlZC5hYFxuICAkeyh7IHNjcmlwdCB9KSA9PiBzY3JpcHQgJiYgZ2V0UGljYShzY3JpcHQpfTtcbiAgJHsoeyBzZXJ2aWNlIH0pID0+IGdldFNlcmlmTWVkaXVtKHNlcnZpY2UpfTtcblxuICBwb3NpdGlvbjogc3RhdGljO1xuICBjb2xvcjogJHtDX0VCT059O1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gIG1hcmdpbi1ib3R0b206ICR7R0VMX1NQQUNJTkd9O1xuXG4gICY6aG92ZXIsXG4gICY6Zm9jdXMge1xuICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xuICB9XG5cbiAgJjpiZWZvcmUge1xuICAgIGJvdHRvbTogMDtcbiAgICBjb250ZW50OiAnJztcbiAgICBsZWZ0OiAwO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHJpZ2h0OiAwO1xuICAgIHRvcDogMDtcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgIHotaW5kZXg6IDE7XG4gIH1cblxuICAkeyh7IHNjcmlwdCwgc2l6ZSB9KSA9PlxuICAgIHNjcmlwdCAmJlxuICAgIHNpemUgIT09ICdzbWFsbCcgJiZcbiAgICBgQG1lZGlhIChtaW4td2lkdGg6ICR7R0VMX0dST1VQXzJfU0NSRUVOX1dJRFRIX01JTn0pIHtcbiAgICAgICR7Z2V0R3JlYXRQcmltZXIoc2NyaXB0KX1cbiAgICB9YH1cbmA7XG5cbmNvbnN0IGdldFJhbmtQYWRkaW5nVG9wID0gc2l6ZSA9PiAoc2l6ZSA9PT0gJ3NtYWxsJyA/ICcwLjJyZW0nIDogJzAuMzc1cmVtJyk7XG5jb25zdCBnZXRSYW5rUGFkZGluZ1N0YXJ0ID0gc2l6ZSA9PlxuICBzaXplID09PSAnc21hbGwnID8gR0VMX1NQQUNJTkcgOiBHRUxfU1BBQ0lOR19EQkw7XG5cbmNvbnN0IFN0eWxlZEl0ZW0gPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nLXRvcDogJHsoeyBzaXplIH0pID0+IGdldFJhbmtQYWRkaW5nVG9wKHNpemUpfTtcblxuICAkeyh7IGRpciwgc2l6ZSB9KSA9PlxuICAgIGRpciA9PT0gJ2x0cidcbiAgICAgID8gYHBhZGRpbmctbGVmdDogJHtnZXRSYW5rUGFkZGluZ1N0YXJ0KHNpemUpfTtgXG4gICAgICA6IGBwYWRkaW5nLXJpZ2h0OiAke2dldFJhbmtQYWRkaW5nU3RhcnQoc2l6ZSl9O2B9XG5cbiAgJHsoeyBkaXIgfSkgPT5cbiAgICBkaXIgPT09ICdsdHInXG4gICAgICA/IGBwYWRkaW5nLXJpZ2h0OiAke0dFTF9TUEFDSU5HX0RCTH07YFxuICAgICAgOiBgcGFkZGluZy1sZWZ0OiAke0dFTF9TUEFDSU5HX0RCTH07YH1cblxuICBAc3VwcG9ydHMgKCR7Z3JpZH0pIHtcbiAgICAkeyh7IGRpciB9KSA9PiAoZGlyID09PSAnbHRyJyA/ICdwYWRkaW5nLXJpZ2h0OiAwOycgOiAncGFkZGluZy1sZWZ0OiAwOycpfVxuICB9XG5gO1xuXG5jb25zdCBUaW1lc3RhbXBXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgcGFkZGluZy10b3A6ICR7R0VMX1NQQUNJTkd9O1xuYDtcblxuZXhwb3J0IGNvbnN0IE1vc3RSZWFkTGluayA9ICh7XG4gIGRpcixcbiAgc2VydmljZSxcbiAgc2NyaXB0LFxuICB0aXRsZSxcbiAgaHJlZixcbiAgY2hpbGRyZW4sXG4gIHNpemUsXG59KSA9PiAoXG4gIDxTdHlsZWRJdGVtIGRpcj17ZGlyfSBzaXplPXtzaXplfT5cbiAgICA8U3R5bGVkTGluayBocmVmPXtocmVmfSBzY3JpcHQ9e3NjcmlwdH0gc2VydmljZT17c2VydmljZX0gc2l6ZT17c2l6ZX0+XG4gICAgICB7dGl0bGV9XG4gICAgPC9TdHlsZWRMaW5rPlxuICAgIHtjaGlsZHJlbiAmJiA8VGltZXN0YW1wV3JhcHBlcj57Y2hpbGRyZW59PC9UaW1lc3RhbXBXcmFwcGVyPn1cbiAgPC9TdHlsZWRJdGVtPlxuKTtcblxuTW9zdFJlYWRMaW5rLnByb3BUeXBlcyA9IHtcbiAgZGlyOiBvbmVPZihbJ3J0bCcsICdsdHInXSksXG4gIHNlcnZpY2U6IHN0cmluZy5pc1JlcXVpcmVkLFxuICBzY3JpcHQ6IHNoYXBlKHNjcmlwdFByb3BUeXBlKS5pc1JlcXVpcmVkLFxuICB0aXRsZTogc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGhyZWY6IHN0cmluZy5pc1JlcXVpcmVkLFxuICBjaGlsZHJlbjogbm9kZSwgLy8gdGhpcyBub2RlIHdpbGwgYmUgYSB0aW1lc3RhbXAgY29udGFpbmVyXG4gIHNpemU6IG9uZU9mKFsnZGVmYXVsdCcsICdzbWFsbCddKSxcbn07XG5cbk1vc3RSZWFkTGluay5kZWZhdWx0UHJvcHMgPSB7XG4gIGRpcjogJ2x0cicsXG4gIGNoaWxkcmVuOiBudWxsLFxuICBzaXplOiAnZGVmYXVsdCcsXG59O1xuXG5jb25zdCBJdGVtV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbmA7XG5cbmNvbnN0IFN0eWxlZEdyaWQgPSBzdHlsZWQoR3JpZClgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgcGFkZGluZy1ib3R0b206ICR7R0VMX1NQQUNJTkdfVFJQTH07XG5gO1xuXG5TdHlsZWRHcmlkLmRlZmF1bHRQcm9wcyA9IHtcbiAgcm9sZTogJ2xpc3RpdGVtJyxcbn07XG5cbmV4cG9ydCBjb25zdCBNb3N0UmVhZEl0ZW1XcmFwcGVyID0gKHsgZGlyLCBjaGlsZHJlbiwgY29sdW1uTGF5b3V0IH0pID0+IChcbiAgPFN0eWxlZEdyaWRcbiAgICB7Li4ubW9zdFJlYWRJdGVtR3JpZFByb3BzKGNvbHVtbkxheW91dCl9XG4gICAgcGFyZW50Q29sdW1ucz17Z2V0UGFyZW50Q29sdW1ucyhjb2x1bW5MYXlvdXQpfSAvLyBwYXJlbnRDb2x1bW5zIGlzIHJlcXVpcmVkIGhlcmUgYmVjYXVzZSBvbiBJRSwgdGhpcyBjb21wb25lbnQgd291bGQgYmUgcmVuZGVyZWQgYmVmb3JlIGl0J3MgcGFyZW50IHRoZXJlZm9yZSBub3QgcmVjZWl2aW5nIHRoZSBwYXJlbnQncyBncmlkIGNvbHVtbnMgdmFsdWVzIHNvIHdlIGhhdmUgdG8gZXhwbGljaXRseSBwYXNzIGl0IGFzIGEgcHJvcCBoZXJlIHNvIGl0IHdvcmtzIG9uIElFXG4gICAgZGlyPXtkaXJ9XG4gICAgYXM9XCJsaVwiXG4gID5cbiAgICA8SXRlbVdyYXBwZXI+e2NoaWxkcmVufTwvSXRlbVdyYXBwZXI+XG4gIDwvU3R5bGVkR3JpZD5cbik7XG5cbk1vc3RSZWFkSXRlbVdyYXBwZXIucHJvcFR5cGVzID0ge1xuICBjaGlsZHJlbjogbm9kZS5pc1JlcXVpcmVkLFxuICBkaXI6IG9uZU9mKFsncnRsJywgJ2x0ciddKSxcbiAgY29sdW1uTGF5b3V0OiBvbmVPZihbJ29uZUNvbHVtbicsICd0d29Db2x1bW4nLCAnbXVsdGlDb2x1bW4nXSksXG59O1xuXG5Nb3N0UmVhZEl0ZW1XcmFwcGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgZGlyOiAnbHRyJyxcbiAgY29sdW1uTGF5b3V0OiAnbXVsdGlDb2x1bW4nLFxufTtcbiJdfQ== */'),
);

export var MostReadLink = function MostReadLink(_ref8) {
  var dir = _ref8.dir,
    service = _ref8.service,
    script = _ref8.script,
    title = _ref8.title,
    href = _ref8.href,
    children = _ref8.children,
    size = _ref8.size;
  return /*#__PURE__*/ React.createElement(
    StyledItem,
    {
      dir: dir,
      size: size,
    },
    /*#__PURE__*/ React.createElement(
      StyledLink,
      {
        href: href,
        script: script,
        service: service,
        size: size,
      },
      title,
    ),
    children &&
      /*#__PURE__*/ React.createElement(TimestampWrapper, null, children),
  );
};
MostReadLink.propTypes = {
  dir: oneOf(['rtl', 'ltr']),
  service: string.isRequired,
  script: shape(scriptPropType).isRequired,
  title: string.isRequired,
  href: string.isRequired,
  children: node,
  // this node will be a timestamp container
  size: oneOf(['default', 'small']),
};
MostReadLink.defaultProps = {
  dir: 'ltr',
  children: null,
  size: 'default',
};

var ItemWrapper = _styled(
  'div',
  process.env.NODE_ENV === 'production'
    ? {
        target: 'e1t2pq2f1',
      }
    : {
        target: 'e1t2pq2f1',
        label: 'ItemWrapper',
      },
)(
  process.env.NODE_ENV === 'production'
    ? {
        name: '1k5dca0',
        styles: 'display:flex;flex-direction:row;margin:0;padding:0',
      }
    : {
        name: '1k5dca0',
        styles: 'display:flex;flex-direction:row;margin:0;padding:0',
        map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9JdGVtL2luZGV4LmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF3SDhCIiwiZmlsZSI6Ii4uLy4uL3NyYy9JdGVtL2luZGV4LmpzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBzaGFwZSwgc3RyaW5nLCBvbmVPZiwgbm9kZSB9IGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgZ2V0UGljYSwgZ2V0R3JlYXRQcmltZXIgfSBmcm9tICdAYmJjL2dlbC1mb3VuZGF0aW9ucy90eXBvZ3JhcGh5JztcbmltcG9ydCB7IENfRUJPTiB9IGZyb20gJ0BiYmMvcHNhbW1lYWQtc3R5bGVzL2NvbG91cnMnO1xuaW1wb3J0IHsgc2NyaXB0UHJvcFR5cGUgfSBmcm9tICdAYmJjL2dlbC1mb3VuZGF0aW9ucy9wcm9wLXR5cGVzJztcbmltcG9ydCB7IGdyaWQgfSBmcm9tICdAYmJjL3BzYW1tZWFkLXN0eWxlcy9kZXRlY3Rpb24nO1xuaW1wb3J0IHsgZ2V0U2VyaWZNZWRpdW0gfSBmcm9tICdAYmJjL3BzYW1tZWFkLXN0eWxlcy9mb250LXN0eWxlcyc7XG5pbXBvcnQge1xuICBHRUxfU1BBQ0lORyxcbiAgR0VMX1NQQUNJTkdfREJMLFxuICBHRUxfU1BBQ0lOR19UUlBMLFxufSBmcm9tICdAYmJjL2dlbC1mb3VuZGF0aW9ucy9zcGFjaW5ncyc7XG5pbXBvcnQgeyBHRUxfR1JPVVBfMl9TQ1JFRU5fV0lEVEhfTUlOIH0gZnJvbSAnQGJiYy9nZWwtZm91bmRhdGlvbnMvYnJlYWtwb2ludHMnO1xuaW1wb3J0IEdyaWQgZnJvbSAnQGJiYy9wc2FtbWVhZC1ncmlkJztcbmltcG9ydCB7XG4gIG1vc3RSZWFkTGlzdEdyaWRQcm9wcyxcbiAgbW9zdFJlYWRJdGVtR3JpZFByb3BzLFxufSBmcm9tICcuLi91dGlsaXRpZXMvZ3JpZFByb3BzJztcblxuZXhwb3J0IGNvbnN0IGdldFBhcmVudENvbHVtbnMgPSBjb2x1bW5MYXlvdXQgPT4ge1xuICBpZiAoY29sdW1uTGF5b3V0ICE9PSAnb25lQ29sdW1uJykge1xuICAgIHJldHVybiBtb3N0UmVhZExpc3RHcmlkUHJvcHMoY29sdW1uTGF5b3V0KS5jb2x1bW5zO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcblxuY29uc3QgU3R5bGVkTGluayA9IHN0eWxlZC5hYFxuICAkeyh7IHNjcmlwdCB9KSA9PiBzY3JpcHQgJiYgZ2V0UGljYShzY3JpcHQpfTtcbiAgJHsoeyBzZXJ2aWNlIH0pID0+IGdldFNlcmlmTWVkaXVtKHNlcnZpY2UpfTtcblxuICBwb3NpdGlvbjogc3RhdGljO1xuICBjb2xvcjogJHtDX0VCT059O1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gIG1hcmdpbi1ib3R0b206ICR7R0VMX1NQQUNJTkd9O1xuXG4gICY6aG92ZXIsXG4gICY6Zm9jdXMge1xuICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xuICB9XG5cbiAgJjpiZWZvcmUge1xuICAgIGJvdHRvbTogMDtcbiAgICBjb250ZW50OiAnJztcbiAgICBsZWZ0OiAwO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHJpZ2h0OiAwO1xuICAgIHRvcDogMDtcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgIHotaW5kZXg6IDE7XG4gIH1cblxuICAkeyh7IHNjcmlwdCwgc2l6ZSB9KSA9PlxuICAgIHNjcmlwdCAmJlxuICAgIHNpemUgIT09ICdzbWFsbCcgJiZcbiAgICBgQG1lZGlhIChtaW4td2lkdGg6ICR7R0VMX0dST1VQXzJfU0NSRUVOX1dJRFRIX01JTn0pIHtcbiAgICAgICR7Z2V0R3JlYXRQcmltZXIoc2NyaXB0KX1cbiAgICB9YH1cbmA7XG5cbmNvbnN0IGdldFJhbmtQYWRkaW5nVG9wID0gc2l6ZSA9PiAoc2l6ZSA9PT0gJ3NtYWxsJyA/ICcwLjJyZW0nIDogJzAuMzc1cmVtJyk7XG5jb25zdCBnZXRSYW5rUGFkZGluZ1N0YXJ0ID0gc2l6ZSA9PlxuICBzaXplID09PSAnc21hbGwnID8gR0VMX1NQQUNJTkcgOiBHRUxfU1BBQ0lOR19EQkw7XG5cbmNvbnN0IFN0eWxlZEl0ZW0gPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nLXRvcDogJHsoeyBzaXplIH0pID0+IGdldFJhbmtQYWRkaW5nVG9wKHNpemUpfTtcblxuICAkeyh7IGRpciwgc2l6ZSB9KSA9PlxuICAgIGRpciA9PT0gJ2x0cidcbiAgICAgID8gYHBhZGRpbmctbGVmdDogJHtnZXRSYW5rUGFkZGluZ1N0YXJ0KHNpemUpfTtgXG4gICAgICA6IGBwYWRkaW5nLXJpZ2h0OiAke2dldFJhbmtQYWRkaW5nU3RhcnQoc2l6ZSl9O2B9XG5cbiAgJHsoeyBkaXIgfSkgPT5cbiAgICBkaXIgPT09ICdsdHInXG4gICAgICA/IGBwYWRkaW5nLXJpZ2h0OiAke0dFTF9TUEFDSU5HX0RCTH07YFxuICAgICAgOiBgcGFkZGluZy1sZWZ0OiAke0dFTF9TUEFDSU5HX0RCTH07YH1cblxuICBAc3VwcG9ydHMgKCR7Z3JpZH0pIHtcbiAgICAkeyh7IGRpciB9KSA9PiAoZGlyID09PSAnbHRyJyA/ICdwYWRkaW5nLXJpZ2h0OiAwOycgOiAncGFkZGluZy1sZWZ0OiAwOycpfVxuICB9XG5gO1xuXG5jb25zdCBUaW1lc3RhbXBXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgcGFkZGluZy10b3A6ICR7R0VMX1NQQUNJTkd9O1xuYDtcblxuZXhwb3J0IGNvbnN0IE1vc3RSZWFkTGluayA9ICh7XG4gIGRpcixcbiAgc2VydmljZSxcbiAgc2NyaXB0LFxuICB0aXRsZSxcbiAgaHJlZixcbiAgY2hpbGRyZW4sXG4gIHNpemUsXG59KSA9PiAoXG4gIDxTdHlsZWRJdGVtIGRpcj17ZGlyfSBzaXplPXtzaXplfT5cbiAgICA8U3R5bGVkTGluayBocmVmPXtocmVmfSBzY3JpcHQ9e3NjcmlwdH0gc2VydmljZT17c2VydmljZX0gc2l6ZT17c2l6ZX0+XG4gICAgICB7dGl0bGV9XG4gICAgPC9TdHlsZWRMaW5rPlxuICAgIHtjaGlsZHJlbiAmJiA8VGltZXN0YW1wV3JhcHBlcj57Y2hpbGRyZW59PC9UaW1lc3RhbXBXcmFwcGVyPn1cbiAgPC9TdHlsZWRJdGVtPlxuKTtcblxuTW9zdFJlYWRMaW5rLnByb3BUeXBlcyA9IHtcbiAgZGlyOiBvbmVPZihbJ3J0bCcsICdsdHInXSksXG4gIHNlcnZpY2U6IHN0cmluZy5pc1JlcXVpcmVkLFxuICBzY3JpcHQ6IHNoYXBlKHNjcmlwdFByb3BUeXBlKS5pc1JlcXVpcmVkLFxuICB0aXRsZTogc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGhyZWY6IHN0cmluZy5pc1JlcXVpcmVkLFxuICBjaGlsZHJlbjogbm9kZSwgLy8gdGhpcyBub2RlIHdpbGwgYmUgYSB0aW1lc3RhbXAgY29udGFpbmVyXG4gIHNpemU6IG9uZU9mKFsnZGVmYXVsdCcsICdzbWFsbCddKSxcbn07XG5cbk1vc3RSZWFkTGluay5kZWZhdWx0UHJvcHMgPSB7XG4gIGRpcjogJ2x0cicsXG4gIGNoaWxkcmVuOiBudWxsLFxuICBzaXplOiAnZGVmYXVsdCcsXG59O1xuXG5jb25zdCBJdGVtV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbmA7XG5cbmNvbnN0IFN0eWxlZEdyaWQgPSBzdHlsZWQoR3JpZClgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgcGFkZGluZy1ib3R0b206ICR7R0VMX1NQQUNJTkdfVFJQTH07XG5gO1xuXG5TdHlsZWRHcmlkLmRlZmF1bHRQcm9wcyA9IHtcbiAgcm9sZTogJ2xpc3RpdGVtJyxcbn07XG5cbmV4cG9ydCBjb25zdCBNb3N0UmVhZEl0ZW1XcmFwcGVyID0gKHsgZGlyLCBjaGlsZHJlbiwgY29sdW1uTGF5b3V0IH0pID0+IChcbiAgPFN0eWxlZEdyaWRcbiAgICB7Li4ubW9zdFJlYWRJdGVtR3JpZFByb3BzKGNvbHVtbkxheW91dCl9XG4gICAgcGFyZW50Q29sdW1ucz17Z2V0UGFyZW50Q29sdW1ucyhjb2x1bW5MYXlvdXQpfSAvLyBwYXJlbnRDb2x1bW5zIGlzIHJlcXVpcmVkIGhlcmUgYmVjYXVzZSBvbiBJRSwgdGhpcyBjb21wb25lbnQgd291bGQgYmUgcmVuZGVyZWQgYmVmb3JlIGl0J3MgcGFyZW50IHRoZXJlZm9yZSBub3QgcmVjZWl2aW5nIHRoZSBwYXJlbnQncyBncmlkIGNvbHVtbnMgdmFsdWVzIHNvIHdlIGhhdmUgdG8gZXhwbGljaXRseSBwYXNzIGl0IGFzIGEgcHJvcCBoZXJlIHNvIGl0IHdvcmtzIG9uIElFXG4gICAgZGlyPXtkaXJ9XG4gICAgYXM9XCJsaVwiXG4gID5cbiAgICA8SXRlbVdyYXBwZXI+e2NoaWxkcmVufTwvSXRlbVdyYXBwZXI+XG4gIDwvU3R5bGVkR3JpZD5cbik7XG5cbk1vc3RSZWFkSXRlbVdyYXBwZXIucHJvcFR5cGVzID0ge1xuICBjaGlsZHJlbjogbm9kZS5pc1JlcXVpcmVkLFxuICBkaXI6IG9uZU9mKFsncnRsJywgJ2x0ciddKSxcbiAgY29sdW1uTGF5b3V0OiBvbmVPZihbJ29uZUNvbHVtbicsICd0d29Db2x1bW4nLCAnbXVsdGlDb2x1bW4nXSksXG59O1xuXG5Nb3N0UmVhZEl0ZW1XcmFwcGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgZGlyOiAnbHRyJyxcbiAgY29sdW1uTGF5b3V0OiAnbXVsdGlDb2x1bW4nLFxufTtcbiJdfQ== */',
        toString: _EMOTION_STRINGIFIED_CSS_ERROR__,
      },
);

var StyledGrid = /*#__PURE__*/ _styled(
  Grid,
  process.env.NODE_ENV === 'production'
    ? {
        target: 'e1t2pq2f0',
      }
    : {
        target: 'e1t2pq2f0',
        label: 'StyledGrid',
      },
)(
  'position:relative;padding-bottom:',
  GEL_SPACING_TRPL,
  ';' +
    (process.env.NODE_ENV === 'production'
      ? ''
      : '/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9JdGVtL2luZGV4LmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUErSCtCIiwiZmlsZSI6Ii4uLy4uL3NyYy9JdGVtL2luZGV4LmpzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBzaGFwZSwgc3RyaW5nLCBvbmVPZiwgbm9kZSB9IGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgZ2V0UGljYSwgZ2V0R3JlYXRQcmltZXIgfSBmcm9tICdAYmJjL2dlbC1mb3VuZGF0aW9ucy90eXBvZ3JhcGh5JztcbmltcG9ydCB7IENfRUJPTiB9IGZyb20gJ0BiYmMvcHNhbW1lYWQtc3R5bGVzL2NvbG91cnMnO1xuaW1wb3J0IHsgc2NyaXB0UHJvcFR5cGUgfSBmcm9tICdAYmJjL2dlbC1mb3VuZGF0aW9ucy9wcm9wLXR5cGVzJztcbmltcG9ydCB7IGdyaWQgfSBmcm9tICdAYmJjL3BzYW1tZWFkLXN0eWxlcy9kZXRlY3Rpb24nO1xuaW1wb3J0IHsgZ2V0U2VyaWZNZWRpdW0gfSBmcm9tICdAYmJjL3BzYW1tZWFkLXN0eWxlcy9mb250LXN0eWxlcyc7XG5pbXBvcnQge1xuICBHRUxfU1BBQ0lORyxcbiAgR0VMX1NQQUNJTkdfREJMLFxuICBHRUxfU1BBQ0lOR19UUlBMLFxufSBmcm9tICdAYmJjL2dlbC1mb3VuZGF0aW9ucy9zcGFjaW5ncyc7XG5pbXBvcnQgeyBHRUxfR1JPVVBfMl9TQ1JFRU5fV0lEVEhfTUlOIH0gZnJvbSAnQGJiYy9nZWwtZm91bmRhdGlvbnMvYnJlYWtwb2ludHMnO1xuaW1wb3J0IEdyaWQgZnJvbSAnQGJiYy9wc2FtbWVhZC1ncmlkJztcbmltcG9ydCB7XG4gIG1vc3RSZWFkTGlzdEdyaWRQcm9wcyxcbiAgbW9zdFJlYWRJdGVtR3JpZFByb3BzLFxufSBmcm9tICcuLi91dGlsaXRpZXMvZ3JpZFByb3BzJztcblxuZXhwb3J0IGNvbnN0IGdldFBhcmVudENvbHVtbnMgPSBjb2x1bW5MYXlvdXQgPT4ge1xuICBpZiAoY29sdW1uTGF5b3V0ICE9PSAnb25lQ29sdW1uJykge1xuICAgIHJldHVybiBtb3N0UmVhZExpc3RHcmlkUHJvcHMoY29sdW1uTGF5b3V0KS5jb2x1bW5zO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcblxuY29uc3QgU3R5bGVkTGluayA9IHN0eWxlZC5hYFxuICAkeyh7IHNjcmlwdCB9KSA9PiBzY3JpcHQgJiYgZ2V0UGljYShzY3JpcHQpfTtcbiAgJHsoeyBzZXJ2aWNlIH0pID0+IGdldFNlcmlmTWVkaXVtKHNlcnZpY2UpfTtcblxuICBwb3NpdGlvbjogc3RhdGljO1xuICBjb2xvcjogJHtDX0VCT059O1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gIG1hcmdpbi1ib3R0b206ICR7R0VMX1NQQUNJTkd9O1xuXG4gICY6aG92ZXIsXG4gICY6Zm9jdXMge1xuICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xuICB9XG5cbiAgJjpiZWZvcmUge1xuICAgIGJvdHRvbTogMDtcbiAgICBjb250ZW50OiAnJztcbiAgICBsZWZ0OiAwO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHJpZ2h0OiAwO1xuICAgIHRvcDogMDtcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgIHotaW5kZXg6IDE7XG4gIH1cblxuICAkeyh7IHNjcmlwdCwgc2l6ZSB9KSA9PlxuICAgIHNjcmlwdCAmJlxuICAgIHNpemUgIT09ICdzbWFsbCcgJiZcbiAgICBgQG1lZGlhIChtaW4td2lkdGg6ICR7R0VMX0dST1VQXzJfU0NSRUVOX1dJRFRIX01JTn0pIHtcbiAgICAgICR7Z2V0R3JlYXRQcmltZXIoc2NyaXB0KX1cbiAgICB9YH1cbmA7XG5cbmNvbnN0IGdldFJhbmtQYWRkaW5nVG9wID0gc2l6ZSA9PiAoc2l6ZSA9PT0gJ3NtYWxsJyA/ICcwLjJyZW0nIDogJzAuMzc1cmVtJyk7XG5jb25zdCBnZXRSYW5rUGFkZGluZ1N0YXJ0ID0gc2l6ZSA9PlxuICBzaXplID09PSAnc21hbGwnID8gR0VMX1NQQUNJTkcgOiBHRUxfU1BBQ0lOR19EQkw7XG5cbmNvbnN0IFN0eWxlZEl0ZW0gPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nLXRvcDogJHsoeyBzaXplIH0pID0+IGdldFJhbmtQYWRkaW5nVG9wKHNpemUpfTtcblxuICAkeyh7IGRpciwgc2l6ZSB9KSA9PlxuICAgIGRpciA9PT0gJ2x0cidcbiAgICAgID8gYHBhZGRpbmctbGVmdDogJHtnZXRSYW5rUGFkZGluZ1N0YXJ0KHNpemUpfTtgXG4gICAgICA6IGBwYWRkaW5nLXJpZ2h0OiAke2dldFJhbmtQYWRkaW5nU3RhcnQoc2l6ZSl9O2B9XG5cbiAgJHsoeyBkaXIgfSkgPT5cbiAgICBkaXIgPT09ICdsdHInXG4gICAgICA/IGBwYWRkaW5nLXJpZ2h0OiAke0dFTF9TUEFDSU5HX0RCTH07YFxuICAgICAgOiBgcGFkZGluZy1sZWZ0OiAke0dFTF9TUEFDSU5HX0RCTH07YH1cblxuICBAc3VwcG9ydHMgKCR7Z3JpZH0pIHtcbiAgICAkeyh7IGRpciB9KSA9PiAoZGlyID09PSAnbHRyJyA/ICdwYWRkaW5nLXJpZ2h0OiAwOycgOiAncGFkZGluZy1sZWZ0OiAwOycpfVxuICB9XG5gO1xuXG5jb25zdCBUaW1lc3RhbXBXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgcGFkZGluZy10b3A6ICR7R0VMX1NQQUNJTkd9O1xuYDtcblxuZXhwb3J0IGNvbnN0IE1vc3RSZWFkTGluayA9ICh7XG4gIGRpcixcbiAgc2VydmljZSxcbiAgc2NyaXB0LFxuICB0aXRsZSxcbiAgaHJlZixcbiAgY2hpbGRyZW4sXG4gIHNpemUsXG59KSA9PiAoXG4gIDxTdHlsZWRJdGVtIGRpcj17ZGlyfSBzaXplPXtzaXplfT5cbiAgICA8U3R5bGVkTGluayBocmVmPXtocmVmfSBzY3JpcHQ9e3NjcmlwdH0gc2VydmljZT17c2VydmljZX0gc2l6ZT17c2l6ZX0+XG4gICAgICB7dGl0bGV9XG4gICAgPC9TdHlsZWRMaW5rPlxuICAgIHtjaGlsZHJlbiAmJiA8VGltZXN0YW1wV3JhcHBlcj57Y2hpbGRyZW59PC9UaW1lc3RhbXBXcmFwcGVyPn1cbiAgPC9TdHlsZWRJdGVtPlxuKTtcblxuTW9zdFJlYWRMaW5rLnByb3BUeXBlcyA9IHtcbiAgZGlyOiBvbmVPZihbJ3J0bCcsICdsdHInXSksXG4gIHNlcnZpY2U6IHN0cmluZy5pc1JlcXVpcmVkLFxuICBzY3JpcHQ6IHNoYXBlKHNjcmlwdFByb3BUeXBlKS5pc1JlcXVpcmVkLFxuICB0aXRsZTogc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGhyZWY6IHN0cmluZy5pc1JlcXVpcmVkLFxuICBjaGlsZHJlbjogbm9kZSwgLy8gdGhpcyBub2RlIHdpbGwgYmUgYSB0aW1lc3RhbXAgY29udGFpbmVyXG4gIHNpemU6IG9uZU9mKFsnZGVmYXVsdCcsICdzbWFsbCddKSxcbn07XG5cbk1vc3RSZWFkTGluay5kZWZhdWx0UHJvcHMgPSB7XG4gIGRpcjogJ2x0cicsXG4gIGNoaWxkcmVuOiBudWxsLFxuICBzaXplOiAnZGVmYXVsdCcsXG59O1xuXG5jb25zdCBJdGVtV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbmA7XG5cbmNvbnN0IFN0eWxlZEdyaWQgPSBzdHlsZWQoR3JpZClgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgcGFkZGluZy1ib3R0b206ICR7R0VMX1NQQUNJTkdfVFJQTH07XG5gO1xuXG5TdHlsZWRHcmlkLmRlZmF1bHRQcm9wcyA9IHtcbiAgcm9sZTogJ2xpc3RpdGVtJyxcbn07XG5cbmV4cG9ydCBjb25zdCBNb3N0UmVhZEl0ZW1XcmFwcGVyID0gKHsgZGlyLCBjaGlsZHJlbiwgY29sdW1uTGF5b3V0IH0pID0+IChcbiAgPFN0eWxlZEdyaWRcbiAgICB7Li4ubW9zdFJlYWRJdGVtR3JpZFByb3BzKGNvbHVtbkxheW91dCl9XG4gICAgcGFyZW50Q29sdW1ucz17Z2V0UGFyZW50Q29sdW1ucyhjb2x1bW5MYXlvdXQpfSAvLyBwYXJlbnRDb2x1bW5zIGlzIHJlcXVpcmVkIGhlcmUgYmVjYXVzZSBvbiBJRSwgdGhpcyBjb21wb25lbnQgd291bGQgYmUgcmVuZGVyZWQgYmVmb3JlIGl0J3MgcGFyZW50IHRoZXJlZm9yZSBub3QgcmVjZWl2aW5nIHRoZSBwYXJlbnQncyBncmlkIGNvbHVtbnMgdmFsdWVzIHNvIHdlIGhhdmUgdG8gZXhwbGljaXRseSBwYXNzIGl0IGFzIGEgcHJvcCBoZXJlIHNvIGl0IHdvcmtzIG9uIElFXG4gICAgZGlyPXtkaXJ9XG4gICAgYXM9XCJsaVwiXG4gID5cbiAgICA8SXRlbVdyYXBwZXI+e2NoaWxkcmVufTwvSXRlbVdyYXBwZXI+XG4gIDwvU3R5bGVkR3JpZD5cbik7XG5cbk1vc3RSZWFkSXRlbVdyYXBwZXIucHJvcFR5cGVzID0ge1xuICBjaGlsZHJlbjogbm9kZS5pc1JlcXVpcmVkLFxuICBkaXI6IG9uZU9mKFsncnRsJywgJ2x0ciddKSxcbiAgY29sdW1uTGF5b3V0OiBvbmVPZihbJ29uZUNvbHVtbicsICd0d29Db2x1bW4nLCAnbXVsdGlDb2x1bW4nXSksXG59O1xuXG5Nb3N0UmVhZEl0ZW1XcmFwcGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgZGlyOiAnbHRyJyxcbiAgY29sdW1uTGF5b3V0OiAnbXVsdGlDb2x1bW4nLFxufTtcbiJdfQ== */'),
);

StyledGrid.defaultProps = {
  role: 'listitem',
};
export var MostReadItemWrapper = function MostReadItemWrapper(_ref9) {
  var dir = _ref9.dir,
    children = _ref9.children,
    columnLayout = _ref9.columnLayout;
  return /*#__PURE__*/ React.createElement(
    StyledGrid,
    _extends({}, mostReadItemGridProps(columnLayout), {
      parentColumns: getParentColumns(columnLayout), // parentColumns is required here because on IE, this component would be rendered before it's parent therefore not receiving the parent's grid columns values so we have to explicitly pass it as a prop here so it works on IE
      dir: dir,
      as: 'li',
    }),
    /*#__PURE__*/ React.createElement(ItemWrapper, null, children),
  );
};
MostReadItemWrapper.propTypes = {
  children: node.isRequired,
  dir: oneOf(['rtl', 'ltr']),
  columnLayout: oneOf(['oneColumn', 'twoColumn', 'multiColumn']),
};
MostReadItemWrapper.defaultProps = {
  dir: 'ltr',
  columnLayout: 'multiColumn',
};
