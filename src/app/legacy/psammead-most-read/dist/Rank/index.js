"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _base = _interopRequireDefault(require("@emotion/styled/base"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = require("prop-types");

var _typography = require("@bbc/gel-foundations/typography");

var _numerals = require("@bbc/psammead-locales/numerals");

var _spacings = require("@bbc/gel-foundations/spacings");

var _breakpoints = require("@bbc/gel-foundations/breakpoints");

var _colours = require("@bbc/psammead-styles/colours");

var _propTypes2 = require("@bbc/gel-foundations/prop-types");

var _detection = require("@bbc/psammead-styles/detection");

var _fontStyles = require("@bbc/psammead-styles/font-styles");

var _rankMinWidth = require("../utilities/rankMinWidth");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// For additional spacing for numerals in the right column because of '10' being double digits
var isOnSecondColumn = function isOnSecondColumn(_ref, supportsGrid) {
  var listIndex = _ref.listIndex,
      numberOfItems = _ref.numberOfItems;
  return supportsGrid ? listIndex > Math.ceil(numberOfItems / 2) : listIndex % 2 === 0;
};

var listHasDoubleDigits = function listHasDoubleDigits(numberOfItems) {
  return numberOfItems > 9;
}; // This checks whether the 2nd column contains a double digit value


var columnIncludesDoubleDigits = function columnIncludesDoubleDigits(props, supportsGrid) {
  return isOnSecondColumn(props, supportsGrid) && listHasDoubleDigits(props.numberOfItems);
}; // Returns a min width for the rank wrapper depending on if the list contains 10 items
// and if the numeral is considered medium/small.


var getRankMinWidth = function getRankMinWidth(_ref2) {
  var service = _ref2.service,
      numberOfItems = _ref2.numberOfItems,
      size = _ref2.size;
  var singleDigitMinWidth = {
    default: (0, _rankMinWidth.singleDigitDefault)(size),
    medium: _rankMinWidth.singleDigitMedium,
    small: _rankMinWidth.singleDigitSmall
  };
  var doubleDigitMinWidth = {
    default: (0, _rankMinWidth.doubleDigitDefault)(size),
    medium: (0, _rankMinWidth.doubleDigitMedium)(size),
    small: _rankMinWidth.doubleDigitSmall
  };
  var rankMinWidth = listHasDoubleDigits(numberOfItems) ? doubleDigitMinWidth : singleDigitMinWidth;

  if (_rankMinWidth.mediumFontServices.includes(service)) {
    return rankMinWidth.medium;
  }

  if (_rankMinWidth.smallFontServices.includes(service)) {
    return rankMinWidth.small;
  }

  return rankMinWidth.default;
}; // Ensures the 5th and 10th rank aligns with each other


var isFiveOrTen = function isFiveOrTen(_ref3) {
  var listIndex = _ref3.listIndex,
      service = _ref3.service,
      numberOfItems = _ref3.numberOfItems;
  return listIndex === 5 || listIndex === 10 ? getRankMinWidth({
    service: service,
    numberOfItems: numberOfItems
  }).group5WithFiveColumns : getRankMinWidth({
    service: service,
    numberOfItems: numberOfItems
  }).group5;
};

var OneColumnWrapper = (0, _base.default)("div", process.env.NODE_ENV === "production" ? {
  target: "e131f58f3"
} : {
  target: "e131f58f3",
  label: "OneColumnWrapper"
})("@media (max-width: ", _breakpoints.GEL_GROUP_0_SCREEN_WIDTH_MAX, "){min-width:", function (props) {
  return listHasDoubleDigits(props.numberOfItems) ? getRankMinWidth(props).group0WithOneColumn : getRankMinWidth(props).group0;
}, ";}@media (min-width: ", _breakpoints.GEL_GROUP_1_SCREEN_WIDTH_MIN, ") and (max-width: ", _breakpoints.GEL_GROUP_1_SCREEN_WIDTH_MAX, "){min-width:", function (props) {
  return listHasDoubleDigits(props.numberOfItems) ? getRankMinWidth(props).group1WithOneColumn : getRankMinWidth(props).group1;
}, ";}@media (min-width: ", _breakpoints.GEL_GROUP_2_SCREEN_WIDTH_MIN, ") and (max-width: ", _breakpoints.GEL_GROUP_2_SCREEN_WIDTH_MAX, "){min-width:", function (props) {
  return listHasDoubleDigits(props.numberOfItems) ? getRankMinWidth(props).group2WithOneColumn : getRankMinWidth(props).group2;
}, ";}@media (min-width: ", _breakpoints.GEL_GROUP_3_SCREEN_WIDTH_MIN, "){min-width:", function (props) {
  return listHasDoubleDigits(props.numberOfItems) ? getRankMinWidth(props).group3WithOneColumn : getRankMinWidth(props).group3;
}, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
var TwoColumnWrapper = ( /*#__PURE__*/0, _base.default)(OneColumnWrapper, process.env.NODE_ENV === "production" ? {
  target: "e131f58f2"
} : {
  target: "e131f58f2",
  label: "TwoColumnWrapper"
})("@media (min-width: ", _breakpoints.GEL_GROUP_3_SCREEN_WIDTH_MIN, "){min-width:", function (props) {
  return columnIncludesDoubleDigits(props, false) ? getRankMinWidth(props).group3WithTwoColumns : getRankMinWidth(props).group3;
}, ";}@supports (", _detection.grid, "){@media (min-width: ", _breakpoints.GEL_GROUP_3_SCREEN_WIDTH_MIN, "){min-width:", function (props) {
  return columnIncludesDoubleDigits(props, true) ? getRankMinWidth(props).group3WithTwoColumns : getRankMinWidth(props).group3;
}, ";}}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
var MultiColumnWrapper = ( /*#__PURE__*/0, _base.default)(TwoColumnWrapper, process.env.NODE_ENV === "production" ? {
  target: "e131f58f1"
} : {
  target: "e131f58f1",
  label: "MultiColumnWrapper"
})("@media (min-width: ", _breakpoints.GEL_GROUP_5_SCREEN_WIDTH_MIN, "){min-width:", function (props) {
  return listHasDoubleDigits(props.numberOfItems) ? isFiveOrTen(props) : getRankMinWidth(props).group5;
}, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
var StyledSpan = (0, _base.default)("span", process.env.NODE_ENV === "production" ? {
  target: "e131f58f0"
} : {
  target: "e131f58f0",
  label: "StyledSpan"
})(function (_ref4) {
  var service = _ref4.service;
  return (0, _fontStyles.getSerifLight)(service);
}, " ", function (_ref5) {
  var script = _ref5.script,
      size = _ref5.size;
  return script && size === 'small' ? (0, _typography.getTrafalgar)(script) : (0, _typography.getFoolscap)(script);
}, " position:relative;color:", _colours.C_POSTBOX, ";margin:0;padding:0;", function (_ref6) {
  var service = _ref6.service;
  return service === 'japanese' && "letter-spacing: -".concat(_spacings.GEL_SPACING_HLF);
}, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

var serviceNumerals = function serviceNumerals(service) {
  var servicesNonWesternNumerals = {
    bengali: _numerals.Bengali,
    burmese: _numerals.Burmese,
    nepali: _numerals.Nepali,
    pashto: _numerals.EasternArabic,
    persian: _numerals.EasternArabic
  };
  return servicesNonWesternNumerals[service] ? servicesNonWesternNumerals[service] : _numerals.WesternArabic;
};

var getColumnWrapper = function getColumnWrapper(columnWrapper) {
  return {
    oneColumn: OneColumnWrapper,
    twoColumn: TwoColumnWrapper,
    multiColumn: MultiColumnWrapper
  }[columnWrapper];
};

var MostReadRank = function MostReadRank(_ref7) {
  var service = _ref7.service,
      script = _ref7.script,
      listIndex = _ref7.listIndex,
      numberOfItems = _ref7.numberOfItems,
      dir = _ref7.dir,
      columnLayout = _ref7.columnLayout,
      size = _ref7.size;
  var numerals = serviceNumerals(service);
  var rank = numerals[listIndex];
  var RankWrapper = getColumnWrapper(columnLayout);
  return /*#__PURE__*/_react.default.createElement(RankWrapper, {
    listIndex: listIndex,
    service: service,
    numberOfItems: numberOfItems,
    dir: dir,
    size: size
  }, /*#__PURE__*/_react.default.createElement(StyledSpan, {
    service: service,
    script: script,
    size: size
  }, rank));
};

MostReadRank.propTypes = {
  service: _propTypes.string.isRequired,
  script: (0, _propTypes.shape)(_propTypes2.scriptPropType).isRequired,
  listIndex: _propTypes.number.isRequired,
  numberOfItems: _propTypes.number.isRequired,
  dir: (0, _propTypes.oneOf)(['rtl', 'ltr']),
  columnLayout: (0, _propTypes.oneOf)(['oneColumn', 'twoColumn', 'multiColumn']),
  size: (0, _propTypes.oneOf)(['default', 'small'])
};
MostReadRank.defaultProps = {
  dir: 'ltr',
  columnLayout: 'multiColumn',
  size: 'default'
};
var _default = MostReadRank;
exports.default = _default;