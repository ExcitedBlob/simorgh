"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.NavigationLi = exports.NavigationUl = void 0;

var _base = _interopRequireDefault(require("@emotion/styled/base"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = require("prop-types");

var _psammeadVisuallyHiddenText = _interopRequireDefault(require("@bbc/psammead-visually-hidden-text"));

var _colours = require("@bbc/psammead-styles/colours");

var _spacings = require("@bbc/gel-foundations/spacings");

var _breakpoints = require("@bbc/gel-foundations/breakpoints");

var _typography = require("@bbc/gel-foundations/typography");

var _propTypes2 = require("@bbc/gel-foundations/prop-types");

var _fontStyles = require("@bbc/psammead-styles/font-styles");

var _DropdownNavigation = require("./DropdownNavigation");

var _excluded = ["children"],
    _excluded2 = ["children", "url", "script", "currentPageText", "active", "service", "dir", "brandForegroundColour", "brandHighlightColour", "brandBorderColour"],
    _excluded3 = ["children", "dir", "isOpen", "ampOpenClass", "brandBackgroundColour", "brandForegroundColour", "brandBorderColour", "brandHighlightColour"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var SPACING_AROUND_NAV_ITEMS = "".concat(_DropdownNavigation.NAV_BAR_TOP_BOTTOM_SPACING, "rem"); // 12px

var CURRENT_ITEM_HOVER_BORDER = '0.3125rem'; // 5px

var NavWrapper = (0, _base.default)("div", process.env.NODE_ENV === "production" ? {
  target: "e1lim4kn5"
} : {
  target: "e1lim4kn5",
  label: "NavWrapper"
})("position:relative;max-width:", _breakpoints.GEL_GROUP_5_SCREEN_WIDTH_MIN, ";margin:0 auto;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qc3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBdUI2QiIsImZpbGUiOiIuLi9zcmMvaW5kZXguanN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IHNoYXBlLCBzdHJpbmcsIG5vZGUsIGJvb2wsIG9uZU9mIH0gZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgVmlzdWFsbHlIaWRkZW5UZXh0IGZyb20gJ0BiYmMvcHNhbW1lYWQtdmlzdWFsbHktaGlkZGVuLXRleHQnO1xuaW1wb3J0IHsgQ19XSElURSwgQ19FQk9OIH0gZnJvbSAnQGJiYy9wc2FtbWVhZC1zdHlsZXMvY29sb3Vycyc7XG5pbXBvcnQge1xuICBHRUxfU1BBQ0lOR19ITEYsXG4gIEdFTF9TUEFDSU5HLFxuICBHRUxfU1BBQ0lOR19TRVhULFxufSBmcm9tICdAYmJjL2dlbC1mb3VuZGF0aW9ucy9zcGFjaW5ncyc7XG5pbXBvcnQge1xuICBHRUxfR1JPVVBfMl9TQ1JFRU5fV0lEVEhfTUFYLFxuICBHRUxfR1JPVVBfM19TQ1JFRU5fV0lEVEhfTUlOLFxuICBHRUxfR1JPVVBfNV9TQ1JFRU5fV0lEVEhfTUlOLFxufSBmcm9tICdAYmJjL2dlbC1mb3VuZGF0aW9ucy9icmVha3BvaW50cyc7XG5pbXBvcnQgeyBnZXRQaWNhIH0gZnJvbSAnQGJiYy9nZWwtZm91bmRhdGlvbnMvdHlwb2dyYXBoeSc7XG5pbXBvcnQgeyBzY3JpcHRQcm9wVHlwZSB9IGZyb20gJ0BiYmMvZ2VsLWZvdW5kYXRpb25zL3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgZ2V0U2Fuc1JlZ3VsYXIgfSBmcm9tICdAYmJjL3BzYW1tZWFkLXN0eWxlcy9mb250LXN0eWxlcyc7XG5pbXBvcnQgeyBOQVZfQkFSX1RPUF9CT1RUT01fU1BBQ0lORyB9IGZyb20gJy4vRHJvcGRvd25OYXZpZ2F0aW9uJztcblxuY29uc3QgU1BBQ0lOR19BUk9VTkRfTkFWX0lURU1TID0gYCR7TkFWX0JBUl9UT1BfQk9UVE9NX1NQQUNJTkd9cmVtYDsgLy8gMTJweFxuY29uc3QgQ1VSUkVOVF9JVEVNX0hPVkVSX0JPUkRFUiA9ICcwLjMxMjVyZW0nOyAvLyA1cHhcblxuY29uc3QgTmF2V3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgbWF4LXdpZHRoOiAke0dFTF9HUk9VUF81X1NDUkVFTl9XSURUSF9NSU59O1xuICBtYXJnaW46IDAgYXV0bztcbmA7XG5cbmNvbnN0IFN0eWxlZFVub3JkZXJlZExpc3QgPSBzdHlsZWQudWxgXG4gIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcbiAgcGFkZGluZzogMDtcbiAgbWFyZ2luOiAwO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG5cbiAgQG1lZGlhIChtaW4td2lkdGg6ICR7R0VMX0dST1VQXzNfU0NSRUVOX1dJRFRIX01JTn0pIHtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICB9XG5gO1xuXG5jb25zdCBMaXN0SXRlbUJvcmRlciA9IGBcbiAgY29udGVudDogJyc7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgbGVmdDogMDtcbiAgcmlnaHQ6IDA7XG4gIGJvdHRvbTogMDtcbmA7XG5cbmNvbnN0IFN0eWxlZExpbmsgPSBzdHlsZWQuYWBcbiAgJHsoeyBzY3JpcHQgfSkgPT4gc2NyaXB0ICYmIGdldFBpY2Eoc2NyaXB0KX07XG4gICR7KHsgc2VydmljZSB9KSA9PiBnZXRTYW5zUmVndWxhcihzZXJ2aWNlKX07XG4gICR7KHsgYnJhbmRGb3JlZ3JvdW5kQ29sb3VyIH0pID0+IGBjb2xvcjogJHticmFuZEZvcmVncm91bmRDb2xvdXJ9O2B9XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIHBhZGRpbmc6ICR7U1BBQ0lOR19BUk9VTkRfTkFWX0lURU1TfTtcblxuICBAbWVkaWEgKG1heC13aWR0aDogJHtHRUxfR1JPVVBfMl9TQ1JFRU5fV0lEVEhfTUFYfSkge1xuICAgIHBhZGRpbmc6ICR7U1BBQ0lOR19BUk9VTkRfTkFWX0lURU1TfSAke0dFTF9TUEFDSU5HfTtcbiAgfVxuXG4gICY6aG92ZXI6OmFmdGVyIHtcbiAgICAke0xpc3RJdGVtQm9yZGVyfVxuICAgICR7KHsgYnJhbmRIaWdobGlnaHRDb2xvdXIgfSkgPT5cbiAgICAgIGBib3JkZXItYm90dG9tOiAke0dFTF9TUEFDSU5HX0hMRn0gc29saWQgJHticmFuZEhpZ2hsaWdodENvbG91cn07YH1cbiAgICAkeyh7IGN1cnJlbnRMaW5rLCBicmFuZEhpZ2hsaWdodENvbG91ciB9KSA9PlxuICAgICAgY3VycmVudExpbmsgJiZcbiAgICAgIGBcbiAgICAgICAgYm9yZGVyLWJvdHRvbTogJHtDVVJSRU5UX0lURU1fSE9WRVJfQk9SREVSfSBzb2xpZCAke2JyYW5kSGlnaGxpZ2h0Q29sb3VyfTtcbiAgICAgIGB9XG4gIH1cblxuICAmOmZvY3VzOjphZnRlciB7XG4gICAgJHtMaXN0SXRlbUJvcmRlcn1cbiAgICAkeyh7IGJyYW5kSGlnaGxpZ2h0Q29sb3VyIH0pID0+XG4gICAgICBgYm9yZGVyLWJvdHRvbTogJHtHRUxfU1BBQ0lOR19ITEZ9IHNvbGlkICR7YnJhbmRIaWdobGlnaHRDb2xvdXJ9O2B9XG4gICAgdG9wOiAwO1xuICAgICR7KHsgYnJhbmRIaWdobGlnaHRDb2xvdXIgfSkgPT5cbiAgICAgIGBib3JkZXI6ICR7R0VMX1NQQUNJTkdfSExGfSBzb2xpZCAke2JyYW5kSGlnaGxpZ2h0Q29sb3VyfTtgfVxuICB9XG5gO1xuXG5jb25zdCBTdHlsZWRMaXN0SXRlbSA9IHN0eWxlZC5saWBcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHotaW5kZXg6IDI7XG5cbiAgQG1lZGlhIChtYXgtd2lkdGg6ICR7R0VMX0dST1VQXzJfU0NSRUVOX1dJRFRIX01BWH0pIHtcbiAgICAmOmxhc3QtY2hpbGQge1xuICAgICAgJHsoeyBkaXIgfSkgPT4gYFxuICAgICAgICBtYXJnaW4tJHtkaXIgPT09ICdsdHInID8gJ3JpZ2h0JyA6ICdsZWZ0J306ICR7R0VMX1NQQUNJTkdfU0VYVH07IFxuICAgICAgYH1cbiAgICB9XG4gIH1cblxuICBAbWVkaWEgKG1pbi13aWR0aDogJHtHRUxfR1JPVVBfM19TQ1JFRU5fV0lEVEhfTUlOfSkge1xuICAgIC8qIFRyaWNrIHRvIGRpc3BsYXkgYSBib3JkZXIgYmV0d2VlbiB0aGUgbGlzdCBpdGVtcyB3aGVuIGl0IGJyZWFrcyBpbnRvIG11bHRpcGxlIGxpbmVzLCB3aGljaCB0YWtlcyB0aGUgZnVsbCB3aWR0aCAqL1xuICAgICY6OmFmdGVyIHtcbiAgICAgIGNvbnRlbnQ6ICcnO1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgYm90dG9tOiAtMXB4O1xuICAgICAgd2lkdGg6ICR7R0VMX0dST1VQXzVfU0NSRUVOX1dJRFRIX01JTn07XG4gICAgICAkeyh7IGJyYW5kQm9yZGVyQ29sb3VyIH0pID0+XG4gICAgICAgIGBib3JkZXItYm90dG9tOiAwLjA2MjVyZW0gc29saWQgJHticmFuZEJvcmRlckNvbG91cn07YH1cbiAgICAgIHotaW5kZXg6IC0xO1xuICAgIH1cbiAgfVxuYDtcblxuY29uc3QgU3R5bGVkU3BhbiA9IHN0eWxlZC5zcGFuYFxuICAmOjphZnRlciB7XG4gICAgJHtMaXN0SXRlbUJvcmRlcn1cbiAgICAkeyh7IGJyYW5kSGlnaGxpZ2h0Q29sb3VyIH0pID0+XG4gICAgICBgYm9yZGVyLWJvdHRvbTogJHtHRUxfU1BBQ0lOR19ITEZ9IHNvbGlkICR7YnJhbmRIaWdobGlnaHRDb2xvdXJ9O2B9XG4gIH1cbmA7XG5cbmNvbnN0IEN1cnJlbnRMaW5rID0gKHtcbiAgY2hpbGRyZW46IGxpbmssXG4gIHNjcmlwdCxcbiAgY3VycmVudFBhZ2VUZXh0LFxuICBicmFuZEhpZ2hsaWdodENvbG91cixcbn0pID0+IChcbiAgPD5cbiAgICA8U3R5bGVkU3BhblxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzeC1hMTF5L2FyaWEtcm9sZVxuICAgICAgcm9sZT1cInRleHRcIlxuICAgICAgc2NyaXB0PXtzY3JpcHR9XG4gICAgICBicmFuZEhpZ2hsaWdodENvbG91cj17YnJhbmRIaWdobGlnaHRDb2xvdXJ9XG4gICAgPlxuICAgICAgPFZpc3VhbGx5SGlkZGVuVGV4dD57Y3VycmVudFBhZ2VUZXh0fSwgPC9WaXN1YWxseUhpZGRlblRleHQ+XG4gICAgICB7bGlua31cbiAgICA8L1N0eWxlZFNwYW4+XG4gIDwvPlxuKTtcblxuQ3VycmVudExpbmsucHJvcFR5cGVzID0ge1xuICBjaGlsZHJlbjogc3RyaW5nLmlzUmVxdWlyZWQsXG4gIHNjcmlwdDogc2hhcGUoc2NyaXB0UHJvcFR5cGUpLmlzUmVxdWlyZWQsXG4gIGN1cnJlbnRQYWdlVGV4dDogc3RyaW5nLFxuICBicmFuZEhpZ2hsaWdodENvbG91cjogc3RyaW5nLmlzUmVxdWlyZWQsXG59O1xuXG5DdXJyZW50TGluay5kZWZhdWx0UHJvcHMgPSB7XG4gIGN1cnJlbnRQYWdlVGV4dDogbnVsbCxcbn07XG5cbmV4cG9ydCBjb25zdCBOYXZpZ2F0aW9uVWwgPSAoeyBjaGlsZHJlbiwgLi4ucHJvcHMgfSkgPT4gKFxuICA8U3R5bGVkVW5vcmRlcmVkTGlzdCByb2xlPVwibGlzdFwiIHsuLi5wcm9wc30+XG4gICAge2NoaWxkcmVufVxuICA8L1N0eWxlZFVub3JkZXJlZExpc3Q+XG4pO1xuXG5OYXZpZ2F0aW9uVWwucHJvcFR5cGVzID0ge1xuICBjaGlsZHJlbjogbm9kZS5pc1JlcXVpcmVkLFxufTtcblxuZXhwb3J0IGNvbnN0IE5hdmlnYXRpb25MaSA9ICh7XG4gIGNoaWxkcmVuOiBsaW5rLFxuICB1cmwsXG4gIHNjcmlwdCxcbiAgY3VycmVudFBhZ2VUZXh0LFxuICBhY3RpdmUsXG4gIHNlcnZpY2UsXG4gIGRpcixcbiAgYnJhbmRGb3JlZ3JvdW5kQ29sb3VyLFxuICBicmFuZEhpZ2hsaWdodENvbG91cixcbiAgYnJhbmRCb3JkZXJDb2xvdXIsXG4gIC4uLnByb3BzXG59KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPFN0eWxlZExpc3RJdGVtXG4gICAgICBkaXI9e2Rpcn1cbiAgICAgIHJvbGU9XCJsaXN0aXRlbVwiXG4gICAgICBicmFuZEZvcmVncm91bmRDb2xvdXI9e2JyYW5kRm9yZWdyb3VuZENvbG91cn1cbiAgICAgIGJyYW5kSGlnaGxpZ2h0Q29sb3VyPXticmFuZEhpZ2hsaWdodENvbG91cn1cbiAgICAgIGJyYW5kQm9yZGVyQ29sb3VyPXticmFuZEJvcmRlckNvbG91cn1cbiAgICA+XG4gICAgICB7YWN0aXZlICYmIGN1cnJlbnRQYWdlVGV4dCA/IChcbiAgICAgICAgPFN0eWxlZExpbmtcbiAgICAgICAgICBocmVmPXt1cmx9XG4gICAgICAgICAgc2NyaXB0PXtzY3JpcHR9XG4gICAgICAgICAgc2VydmljZT17c2VydmljZX1cbiAgICAgICAgICBjdXJyZW50TGlua1xuICAgICAgICAgIGJyYW5kRm9yZWdyb3VuZENvbG91cj17YnJhbmRGb3JlZ3JvdW5kQ29sb3VyfVxuICAgICAgICAgIGJyYW5kSGlnaGxpZ2h0Q29sb3VyPXticmFuZEhpZ2hsaWdodENvbG91cn1cbiAgICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgID5cbiAgICAgICAgICA8Q3VycmVudExpbmtcbiAgICAgICAgICAgIHNjcmlwdD17c2NyaXB0fVxuICAgICAgICAgICAgY3VycmVudFBhZ2VUZXh0PXtjdXJyZW50UGFnZVRleHR9XG4gICAgICAgICAgICBicmFuZEhpZ2hsaWdodENvbG91cj17YnJhbmRIaWdobGlnaHRDb2xvdXJ9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2xpbmt9XG4gICAgICAgICAgPC9DdXJyZW50TGluaz5cbiAgICAgICAgPC9TdHlsZWRMaW5rPlxuICAgICAgKSA6IChcbiAgICAgICAgPFN0eWxlZExpbmtcbiAgICAgICAgICBocmVmPXt1cmx9XG4gICAgICAgICAgc2NyaXB0PXtzY3JpcHR9XG4gICAgICAgICAgc2VydmljZT17c2VydmljZX1cbiAgICAgICAgICBicmFuZEZvcmVncm91bmRDb2xvdXI9e2JyYW5kRm9yZWdyb3VuZENvbG91cn1cbiAgICAgICAgICBicmFuZEhpZ2hsaWdodENvbG91cj17YnJhbmRIaWdobGlnaHRDb2xvdXJ9XG4gICAgICAgICAgey4uLnByb3BzfVxuICAgICAgICA+XG4gICAgICAgICAge2xpbmt9XG4gICAgICAgIDwvU3R5bGVkTGluaz5cbiAgICAgICl9XG4gICAgPC9TdHlsZWRMaXN0SXRlbT5cbiAgKTtcbn07XG5cbk5hdmlnYXRpb25MaS5wcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBub2RlLmlzUmVxdWlyZWQsXG4gIHVybDogc3RyaW5nLmlzUmVxdWlyZWQsXG4gIHNjcmlwdDogc2hhcGUoc2NyaXB0UHJvcFR5cGUpLmlzUmVxdWlyZWQsXG4gIGFjdGl2ZTogYm9vbCxcbiAgY3VycmVudFBhZ2VUZXh0OiBzdHJpbmcsXG4gIHNlcnZpY2U6IHN0cmluZy5pc1JlcXVpcmVkLFxuICBkaXI6IG9uZU9mKFsnbHRyJywgJ3J0bCddKSxcbiAgYnJhbmRGb3JlZ3JvdW5kQ29sb3VyOiBzdHJpbmcuaXNSZXF1aXJlZCxcbiAgYnJhbmRIaWdobGlnaHRDb2xvdXI6IHN0cmluZy5pc1JlcXVpcmVkLFxuICBicmFuZEJvcmRlckNvbG91cjogc3RyaW5nLmlzUmVxdWlyZWQsXG59O1xuXG5OYXZpZ2F0aW9uTGkuZGVmYXVsdFByb3BzID0ge1xuICBhY3RpdmU6IGZhbHNlLFxuICBjdXJyZW50UGFnZVRleHQ6IG51bGwsXG4gIGRpcjogJ2x0cicsXG59O1xuXG4vLyBhbXBPcGVuQ2xhc3MgaXMgdGhlIGNsYXNzIGFkZGVkIHRvIHRoZSBOYXZpZ2F0aW9uLCBhbmQgaXMgdG9nZ2xlZCBvbiB0YXAuXG4vLyBJdCBpbmRpY2F0ZXMgd2hldGhlciB0aGUgbWVudSBpcyBvcGVuIG9yIG5vdC4gVGhpcyBvdmVycmlkZXMgdGhlIGJhY2tncm91bmRcbi8vIGNvbG9yIG9mIHRoZSBOYXZpZ2F0aW9uXG5jb25zdCBTdHlsZWROYXYgPSBzdHlsZWQubmF2YFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICR7KHsgaXNPcGVuLCBicmFuZEJhY2tncm91bmRDb2xvdXIgfSkgPT5cbiAgICBgYmFja2dyb3VuZC1jb2xvcjogJHtpc09wZW4gPyBDX0VCT04gOiBicmFuZEJhY2tncm91bmRDb2xvdXJ9O2B9XG4gICR7KHsgYW1wT3BlbkNsYXNzIH0pID0+XG4gICAgYW1wT3BlbkNsYXNzICYmXG4gICAgYFxuICAgICAgJi4ke2FtcE9wZW5DbGFzc30ge1xuICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogJHtHRUxfR1JPVVBfMl9TQ1JFRU5fV0lEVEhfTUFYfSkge1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7Q19FQk9OfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIGB9XG4gIGJvcmRlci10b3A6IDAuMDYyNXJlbSBzb2xpZCAke0NfV0hJVEV9O1xuXG4gICY6OmFmdGVyIHtcbiAgICBjb250ZW50OiAnJztcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgYm90dG9tOiAwO1xuICAgIHJpZ2h0OiAwO1xuICAgIGxlZnQ6IDA7XG4gICAgYm9yZGVyLWJvdHRvbTogMC4wNjI1cmVtIHNvbGlkIHRyYW5zcGFyZW50O1xuICB9XG5cbiAgJHtTdHlsZWRMaXN0SXRlbX0ge1xuICAgICR7KHsgZGlyIH0pID0+IGBcbiAgICAgICY6OmFmdGVyIHtcbiAgICAgICAgJHtkaXIgPT09ICdsdHInID8gJ2xlZnQnIDogJ3JpZ2h0J306IDA7XG4gICAgICB9XG4gICAgYH1cbiAgfVxuYDtcblxuY29uc3QgTmF2aWdhdGlvbiA9ICh7XG4gIGNoaWxkcmVuLFxuICBkaXIsXG4gIGlzT3BlbixcbiAgYW1wT3BlbkNsYXNzLFxuICBicmFuZEJhY2tncm91bmRDb2xvdXIsXG4gIGJyYW5kRm9yZWdyb3VuZENvbG91cixcbiAgYnJhbmRCb3JkZXJDb2xvdXIsXG4gIGJyYW5kSGlnaGxpZ2h0Q29sb3VyLFxuICAuLi5wcm9wc1xufSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxTdHlsZWROYXZcbiAgICAgIHJvbGU9XCJuYXZpZ2F0aW9uXCJcbiAgICAgIGRpcj17ZGlyfVxuICAgICAgaXNPcGVuPXtpc09wZW59XG4gICAgICBhbXBPcGVuQ2xhc3M9e2FtcE9wZW5DbGFzc31cbiAgICAgIGJyYW5kQmFja2dyb3VuZENvbG91cj17YnJhbmRCYWNrZ3JvdW5kQ29sb3VyfVxuICAgICAgYnJhbmRGb3JlZ3JvdW5kQ29sb3VyPXticmFuZEZvcmVncm91bmRDb2xvdXJ9XG4gICAgICBicmFuZEJvcmRlckNvbG91cj17YnJhbmRCb3JkZXJDb2xvdXJ9XG4gICAgICBicmFuZEhpZ2hsaWdodENvbG91cj17YnJhbmRIaWdobGlnaHRDb2xvdXJ9XG4gICAgICB7Li4ucHJvcHN9XG4gICAgPlxuICAgICAgPE5hdldyYXBwZXI+e2NoaWxkcmVufTwvTmF2V3JhcHBlcj5cbiAgICA8L1N0eWxlZE5hdj5cbiAgKTtcbn07XG5cbk5hdmlnYXRpb24ucHJvcFR5cGVzID0ge1xuICBjaGlsZHJlbjogbm9kZS5pc1JlcXVpcmVkLFxuICBkaXI6IG9uZU9mKFsnbHRyJywgJ3J0bCddKSxcbiAgaXNPcGVuOiBib29sLFxuICBhbXBPcGVuQ2xhc3M6IHN0cmluZyxcbiAgYnJhbmRCYWNrZ3JvdW5kQ29sb3VyOiBzdHJpbmcuaXNSZXF1aXJlZCxcbiAgYnJhbmRGb3JlZ3JvdW5kQ29sb3VyOiBzdHJpbmcuaXNSZXF1aXJlZCxcbiAgYnJhbmRCb3JkZXJDb2xvdXI6IHN0cmluZy5pc1JlcXVpcmVkLFxuICBicmFuZEhpZ2hsaWdodENvbG91cjogc3RyaW5nLmlzUmVxdWlyZWQsXG59O1xuXG5OYXZpZ2F0aW9uLmRlZmF1bHRQcm9wcyA9IHtcbiAgZGlyOiAnbHRyJyxcbiAgaXNPcGVuOiBmYWxzZSxcbiAgYW1wT3BlbkNsYXNzOiBudWxsLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgTmF2aWdhdGlvbjtcbiJdfQ== */"));
var StyledUnorderedList = (0, _base.default)("ul", process.env.NODE_ENV === "production" ? {
  target: "e1lim4kn4"
} : {
  target: "e1lim4kn4",
  label: "StyledUnorderedList"
})("list-style-type:none;padding:0;margin:0;position:relative;@media (min-width: ", _breakpoints.GEL_GROUP_3_SCREEN_WIDTH_MIN, "){overflow:hidden;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
var ListItemBorder = "\n  content: '';\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n";
var StyledLink = (0, _base.default)("a", process.env.NODE_ENV === "production" ? {
  target: "e1lim4kn3"
} : {
  target: "e1lim4kn3",
  label: "StyledLink"
})(function (_ref) {
  var script = _ref.script;
  return script && (0, _typography.getPica)(script);
}, ";", function (_ref2) {
  var service = _ref2.service;
  return (0, _fontStyles.getSansRegular)(service);
}, ";", function (_ref3) {
  var brandForegroundColour = _ref3.brandForegroundColour;
  return "color: ".concat(brandForegroundColour, ";");
}, " cursor:pointer;text-decoration:none;display:inline-block;padding:", SPACING_AROUND_NAV_ITEMS, ";@media (max-width: ", _breakpoints.GEL_GROUP_2_SCREEN_WIDTH_MAX, "){padding:", SPACING_AROUND_NAV_ITEMS, " ", _spacings.GEL_SPACING, ";}&:hover::after{", ListItemBorder, " ", function (_ref4) {
  var brandHighlightColour = _ref4.brandHighlightColour;
  return "border-bottom: ".concat(_spacings.GEL_SPACING_HLF, " solid ").concat(brandHighlightColour, ";");
}, " ", function (_ref5) {
  var currentLink = _ref5.currentLink,
      brandHighlightColour = _ref5.brandHighlightColour;
  return currentLink && "\n        border-bottom: ".concat(CURRENT_ITEM_HOVER_BORDER, " solid ").concat(brandHighlightColour, ";\n      ");
}, ";}&:focus::after{", ListItemBorder, " ", function (_ref6) {
  var brandHighlightColour = _ref6.brandHighlightColour;
  return "border-bottom: ".concat(_spacings.GEL_SPACING_HLF, " solid ").concat(brandHighlightColour, ";");
}, " top:0;", function (_ref7) {
  var brandHighlightColour = _ref7.brandHighlightColour;
  return "border: ".concat(_spacings.GEL_SPACING_HLF, " solid ").concat(brandHighlightColour, ";");
}, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
var StyledListItem = (0, _base.default)("li", process.env.NODE_ENV === "production" ? {
  target: "e1lim4kn2"
} : {
  target: "e1lim4kn2",
  label: "StyledListItem"
})("display:inline-block;position:relative;z-index:2;@media (max-width: ", _breakpoints.GEL_GROUP_2_SCREEN_WIDTH_MAX, "){&:last-child{", function (_ref8) {
  var dir = _ref8.dir;
  return "\n        margin-".concat(dir === 'ltr' ? 'right' : 'left', ": ").concat(_spacings.GEL_SPACING_SEXT, "; \n      ");
}, ";}}@media (min-width: ", _breakpoints.GEL_GROUP_3_SCREEN_WIDTH_MIN, "){&::after{content:'';position:absolute;bottom:-1px;width:", _breakpoints.GEL_GROUP_5_SCREEN_WIDTH_MIN, ";", function (_ref9) {
  var brandBorderColour = _ref9.brandBorderColour;
  return "border-bottom: 0.0625rem solid ".concat(brandBorderColour, ";");
}, " z-index:-1;}}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
var StyledSpan = (0, _base.default)("span", process.env.NODE_ENV === "production" ? {
  target: "e1lim4kn1"
} : {
  target: "e1lim4kn1",
  label: "StyledSpan"
})("&::after{", ListItemBorder, " ", function (_ref10) {
  var brandHighlightColour = _ref10.brandHighlightColour;
  return "border-bottom: ".concat(_spacings.GEL_SPACING_HLF, " solid ").concat(brandHighlightColour, ";");
}, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

var CurrentLink = function CurrentLink(_ref11) {
  var link = _ref11.children,
      script = _ref11.script,
      currentPageText = _ref11.currentPageText,
      brandHighlightColour = _ref11.brandHighlightColour;
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(StyledSpan // eslint-disable-next-line jsx-a11y/aria-role
  , {
    role: "text",
    script: script,
    brandHighlightColour: brandHighlightColour
  }, /*#__PURE__*/_react.default.createElement(_psammeadVisuallyHiddenText.default, null, currentPageText, ", "), link));
};

CurrentLink.propTypes = {
  children: _propTypes.string.isRequired,
  script: (0, _propTypes.shape)(_propTypes2.scriptPropType).isRequired,
  currentPageText: _propTypes.string,
  brandHighlightColour: _propTypes.string.isRequired
};
CurrentLink.defaultProps = {
  currentPageText: null
};

var NavigationUl = function NavigationUl(_ref12) {
  var children = _ref12.children,
      props = _objectWithoutProperties(_ref12, _excluded);

  return /*#__PURE__*/_react.default.createElement(StyledUnorderedList, _extends({
    role: "list"
  }, props), children);
};

exports.NavigationUl = NavigationUl;
NavigationUl.propTypes = {
  children: _propTypes.node.isRequired
};

var NavigationLi = function NavigationLi(_ref13) {
  var link = _ref13.children,
      url = _ref13.url,
      script = _ref13.script,
      currentPageText = _ref13.currentPageText,
      active = _ref13.active,
      service = _ref13.service,
      dir = _ref13.dir,
      brandForegroundColour = _ref13.brandForegroundColour,
      brandHighlightColour = _ref13.brandHighlightColour,
      brandBorderColour = _ref13.brandBorderColour,
      props = _objectWithoutProperties(_ref13, _excluded2);

  return /*#__PURE__*/_react.default.createElement(StyledListItem, {
    dir: dir,
    role: "listitem",
    brandForegroundColour: brandForegroundColour,
    brandHighlightColour: brandHighlightColour,
    brandBorderColour: brandBorderColour
  }, active && currentPageText ? /*#__PURE__*/_react.default.createElement(StyledLink, _extends({
    href: url,
    script: script,
    service: service,
    currentLink: true,
    brandForegroundColour: brandForegroundColour,
    brandHighlightColour: brandHighlightColour
  }, props), /*#__PURE__*/_react.default.createElement(CurrentLink, {
    script: script,
    currentPageText: currentPageText,
    brandHighlightColour: brandHighlightColour
  }, link)) : /*#__PURE__*/_react.default.createElement(StyledLink, _extends({
    href: url,
    script: script,
    service: service,
    brandForegroundColour: brandForegroundColour,
    brandHighlightColour: brandHighlightColour
  }, props), link));
};

exports.NavigationLi = NavigationLi;
NavigationLi.propTypes = {
  children: _propTypes.node.isRequired,
  url: _propTypes.string.isRequired,
  script: (0, _propTypes.shape)(_propTypes2.scriptPropType).isRequired,
  active: _propTypes.bool,
  currentPageText: _propTypes.string,
  service: _propTypes.string.isRequired,
  dir: (0, _propTypes.oneOf)(['ltr', 'rtl']),
  brandForegroundColour: _propTypes.string.isRequired,
  brandHighlightColour: _propTypes.string.isRequired,
  brandBorderColour: _propTypes.string.isRequired
};
NavigationLi.defaultProps = {
  active: false,
  currentPageText: null,
  dir: 'ltr'
}; // ampOpenClass is the class added to the Navigation, and is toggled on tap.
// It indicates whether the menu is open or not. This overrides the background
// color of the Navigation

var StyledNav = (0, _base.default)("nav", process.env.NODE_ENV === "production" ? {
  target: "e1lim4kn0"
} : {
  target: "e1lim4kn0",
  label: "StyledNav"
})("position:relative;", function (_ref14) {
  var isOpen = _ref14.isOpen,
      brandBackgroundColour = _ref14.brandBackgroundColour;
  return "background-color: ".concat(isOpen ? _colours.C_EBON : brandBackgroundColour, ";");
}, " ", function (_ref15) {
  var ampOpenClass = _ref15.ampOpenClass;
  return ampOpenClass && "\n      &.".concat(ampOpenClass, " {\n        @media (max-width: ").concat(_breakpoints.GEL_GROUP_2_SCREEN_WIDTH_MAX, ") {\n          background-color: ").concat(_colours.C_EBON, ";\n        }\n      }\n    ");
}, " border-top:0.0625rem solid ", _colours.C_WHITE, ";&::after{content:'';position:absolute;bottom:0;right:0;left:0;border-bottom:0.0625rem solid transparent;}", StyledListItem, "{", function (_ref16) {
  var dir = _ref16.dir;
  return "\n      &::after {\n        ".concat(dir === 'ltr' ? 'left' : 'right', ": 0;\n      }\n    ");
}, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

var Navigation = function Navigation(_ref17) {
  var children = _ref17.children,
      dir = _ref17.dir,
      isOpen = _ref17.isOpen,
      ampOpenClass = _ref17.ampOpenClass,
      brandBackgroundColour = _ref17.brandBackgroundColour,
      brandForegroundColour = _ref17.brandForegroundColour,
      brandBorderColour = _ref17.brandBorderColour,
      brandHighlightColour = _ref17.brandHighlightColour,
      props = _objectWithoutProperties(_ref17, _excluded3);

  return /*#__PURE__*/_react.default.createElement(StyledNav, _extends({
    role: "navigation",
    dir: dir,
    isOpen: isOpen,
    ampOpenClass: ampOpenClass,
    brandBackgroundColour: brandBackgroundColour,
    brandForegroundColour: brandForegroundColour,
    brandBorderColour: brandBorderColour,
    brandHighlightColour: brandHighlightColour
  }, props), /*#__PURE__*/_react.default.createElement(NavWrapper, null, children));
};

Navigation.propTypes = {
  children: _propTypes.node.isRequired,
  dir: (0, _propTypes.oneOf)(['ltr', 'rtl']),
  isOpen: _propTypes.bool,
  ampOpenClass: _propTypes.string,
  brandBackgroundColour: _propTypes.string.isRequired,
  brandForegroundColour: _propTypes.string.isRequired,
  brandBorderColour: _propTypes.string.isRequired,
  brandHighlightColour: _propTypes.string.isRequired
};
Navigation.defaultProps = {
  dir: 'ltr',
  isOpen: false,
  ampOpenClass: null
};
var _default = Navigation;
exports.default = _default;