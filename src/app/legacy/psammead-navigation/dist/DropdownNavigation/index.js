"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AmpMenuButton = exports.CanonicalMenuButton = exports.DropdownLi = exports.DropdownUl = exports.AmpDropdown = exports.CanonicalDropdown = exports.NAV_BAR_TOP_BOTTOM_SPACING = void 0;

var _base = _interopRequireDefault(require("@emotion/styled/base"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = require("prop-types");

var _psammeadVisuallyHiddenText = _interopRequireDefault(require("@bbc/psammead-visually-hidden-text"));

var _svgs = require("@bbc/psammead-assets/svgs");

var _colours = require("@bbc/psammead-styles/colours");

var _spacings = require("@bbc/gel-foundations/spacings");

var _reactHelmet = require("react-helmet");

var _breakpoints = require("@bbc/gel-foundations/breakpoints");

var _typography = require("@bbc/gel-foundations/typography");

var _propTypes2 = require("@bbc/gel-foundations/prop-types");

var _fontStyles = require("@bbc/psammead-styles/font-styles");

var _excluded = ["script"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var NAV_BAR_TOP_BOTTOM_SPACING = 0.75; // 12px

exports.NAV_BAR_TOP_BOTTOM_SPACING = NAV_BAR_TOP_BOTTOM_SPACING;

var getStyles = function getStyles(dir) {
  var direction = dir === 'ltr' ? 'left' : 'right';
  return "border-".concat(direction, ": ").concat(_spacings.GEL_SPACING_HLF, " solid ").concat(_colours.C_WHITE, ";\n          padding-").concat(direction, ": ").concat(_spacings.GEL_SPACING, ";");
};

var StyledDropdown = (0, _base.default)("div", process.env.NODE_ENV === "production" ? {
  target: "ex2l5ol6"
} : {
  target: "ex2l5ol6",
  label: "StyledDropdown"
})("background-color:", _colours.C_EBON, ";clear:both;overflow:hidden;height:0;transition:all 0.2s ease-out;transition-timing-function:cubic-bezier(0, 0, 0.58, 1);", function (_ref) {
  var height = _ref.height,
      isOpen = _ref.isOpen;
  return isOpen ? "visibility: visible; height: ".concat(height, "px;") : "visibility: hidden;";
}, "@media (min-width: ", _breakpoints.GEL_GROUP_3_SCREEN_WIDTH_MIN, "){display:none;visibility:hidden;}@media (prefers-reduced-motion: reduce){transition:none;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

var CanonicalDropdown = function CanonicalDropdown(_ref2) {
  var isOpen = _ref2.isOpen,
      children = _ref2.children;
  var heightRef = (0, _react.useRef)(null);
  return /*#__PURE__*/_react.default.createElement(StyledDropdown, {
    "data-e2e": "dropdown-nav",
    ref: heightRef,
    height: heightRef.current ? heightRef.current.scrollHeight : 0,
    isOpen: isOpen
  }, children);
};

exports.CanonicalDropdown = CanonicalDropdown;
CanonicalDropdown.propTypes = {
  isOpen: _propTypes.bool.isRequired,
  children: _propTypes.node.isRequired
};
var AmpDropdown = (0, _base.default)("div", process.env.NODE_ENV === "production" ? {
  target: "ex2l5ol5"
} : {
  target: "ex2l5ol5",
  label: "AmpDropdown"
})("background-color:", _colours.C_EBON, ";clear:both;@media (min-width: ", _breakpoints.GEL_GROUP_3_SCREEN_WIDTH_MIN, "){display:none;visibility:hidden;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Ecm9wZG93bk5hdmlnYXRpb24vaW5kZXguanN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXdFcUMiLCJmaWxlIjoiLi4vLi4vc3JjL0Ryb3Bkb3duTmF2aWdhdGlvbi9pbmRleC5qc3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgY2xvbmVFbGVtZW50LCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBzaGFwZSwgc3RyaW5nLCBib29sLCBmdW5jLCBvbmVPZiwgbm9kZSB9IGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFZpc3VhbGx5SGlkZGVuVGV4dCBmcm9tICdAYmJjL3BzYW1tZWFkLXZpc3VhbGx5LWhpZGRlbi10ZXh0JztcbmltcG9ydCB7IG5hdmlnYXRpb25JY29ucyB9IGZyb20gJ0BiYmMvcHNhbW1lYWQtYXNzZXRzL3N2Z3MnO1xuaW1wb3J0IHsgQ19XSElURSwgQ19FQk9OLCBDX1NIQURPVyB9IGZyb20gJ0BiYmMvcHNhbW1lYWQtc3R5bGVzL2NvbG91cnMnO1xuaW1wb3J0IHtcbiAgR0VMX1NQQUNJTkdfSExGLFxuICBHRUxfU1BBQ0lORyxcbiAgR0VMX1NQQUNJTkdfREJMLFxufSBmcm9tICdAYmJjL2dlbC1mb3VuZGF0aW9ucy9zcGFjaW5ncyc7XG5pbXBvcnQgeyBIZWxtZXQgfSBmcm9tICdyZWFjdC1oZWxtZXQnO1xuaW1wb3J0IHtcbiAgR0VMX0dST1VQXzNfU0NSRUVOX1dJRFRIX01JTixcbiAgR0VMX0dST1VQX0JfTUlOX1dJRFRILFxufSBmcm9tICdAYmJjL2dlbC1mb3VuZGF0aW9ucy9icmVha3BvaW50cyc7XG5pbXBvcnQgeyBnZXRQaWNhIH0gZnJvbSAnQGJiYy9nZWwtZm91bmRhdGlvbnMvdHlwb2dyYXBoeSc7XG5pbXBvcnQgeyBzY3JpcHRQcm9wVHlwZSB9IGZyb20gJ0BiYmMvZ2VsLWZvdW5kYXRpb25zL3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgZ2V0U2Fuc1JlZ3VsYXIgfSBmcm9tICdAYmJjL3BzYW1tZWFkLXN0eWxlcy9mb250LXN0eWxlcyc7XG5cbmV4cG9ydCBjb25zdCBOQVZfQkFSX1RPUF9CT1RUT01fU1BBQ0lORyA9IDAuNzU7IC8vIDEycHhcblxuY29uc3QgZ2V0U3R5bGVzID0gZGlyID0+IHtcbiAgY29uc3QgZGlyZWN0aW9uID0gZGlyID09PSAnbHRyJyA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gIHJldHVybiBgYm9yZGVyLSR7ZGlyZWN0aW9ufTogJHtHRUxfU1BBQ0lOR19ITEZ9IHNvbGlkICR7Q19XSElURX07XG4gICAgICAgICAgcGFkZGluZy0ke2RpcmVjdGlvbn06ICR7R0VMX1NQQUNJTkd9O2A7XG59O1xuXG5jb25zdCBTdHlsZWREcm9wZG93biA9IHN0eWxlZC5kaXZgXG4gIGJhY2tncm91bmQtY29sb3I6ICR7Q19FQk9OfTtcbiAgY2xlYXI6IGJvdGg7XG4gIG92ZXJmbG93OiBoaWRkZW47XG5cbiAgaGVpZ2h0OiAwO1xuICB0cmFuc2l0aW9uOiBhbGwgMC4ycyBlYXNlLW91dDtcbiAgdHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLCAwLCAwLjU4LCAxKTtcblxuICAkeyh7IGhlaWdodCwgaXNPcGVuIH0pID0+XG4gICAgaXNPcGVuXG4gICAgICA/IGB2aXNpYmlsaXR5OiB2aXNpYmxlOyBoZWlnaHQ6ICR7aGVpZ2h0fXB4O2BcbiAgICAgIDogYHZpc2liaWxpdHk6IGhpZGRlbjtgfVxuXG4gIEBtZWRpYSAobWluLXdpZHRoOiAke0dFTF9HUk9VUF8zX1NDUkVFTl9XSURUSF9NSU59KSB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gIH1cblxuICBAbWVkaWEgKHByZWZlcnMtcmVkdWNlZC1tb3Rpb246IHJlZHVjZSkge1xuICAgIHRyYW5zaXRpb246IG5vbmU7XG4gIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBDYW5vbmljYWxEcm9wZG93biA9ICh7IGlzT3BlbiwgY2hpbGRyZW4gfSkgPT4ge1xuICBjb25zdCBoZWlnaHRSZWYgPSB1c2VSZWYobnVsbCk7XG5cbiAgcmV0dXJuIChcbiAgICA8U3R5bGVkRHJvcGRvd25cbiAgICAgIGRhdGEtZTJlPVwiZHJvcGRvd24tbmF2XCJcbiAgICAgIHJlZj17aGVpZ2h0UmVmfVxuICAgICAgaGVpZ2h0PXtoZWlnaHRSZWYuY3VycmVudCA/IGhlaWdodFJlZi5jdXJyZW50LnNjcm9sbEhlaWdodCA6IDB9XG4gICAgICBpc09wZW49e2lzT3Blbn1cbiAgICA+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9TdHlsZWREcm9wZG93bj5cbiAgKTtcbn07XG5cbkNhbm9uaWNhbERyb3Bkb3duLnByb3BUeXBlcyA9IHtcbiAgaXNPcGVuOiBib29sLmlzUmVxdWlyZWQsXG4gIGNoaWxkcmVuOiBub2RlLmlzUmVxdWlyZWQsXG59O1xuXG5leHBvcnQgY29uc3QgQW1wRHJvcGRvd24gPSBzdHlsZWQuZGl2YFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAke0NfRUJPTn07XG4gIGNsZWFyOiBib3RoO1xuXG4gIEBtZWRpYSAobWluLXdpZHRoOiAke0dFTF9HUk9VUF8zX1NDUkVFTl9XSURUSF9NSU59KSB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBEcm9wZG93blVsID0gc3R5bGVkLnVsYFxuICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMCAke0dFTF9TUEFDSU5HfTtcbiAgYm9yZGVyLWJvdHRvbTogMC4xMjVyZW0gc29saWQgJHtDX1NIQURPV307XG5gO1xuXG5Ecm9wZG93blVsLmRlZmF1bHRQcm9wcyA9IHtcbiAgcm9sZTogJ2xpc3QnLFxufTtcblxuY29uc3QgU3R5bGVkRHJvcGRvd25MaSA9IHN0eWxlZC5saWBcbiAgcGFkZGluZzogMC43NXJlbSAwO1xuICBib3JkZXItYm90dG9tOiAwLjA2MjVyZW0gc29saWQgJHtDX1NIQURPV307XG5cbiAgJjpsYXN0LWNoaWxkIHtcbiAgICBwYWRkaW5nLWJvdHRvbTogJHtHRUxfU1BBQ0lOR19EQkx9O1xuICAgIGJvcmRlcjogMDtcbiAgfVxuYDtcblxuY29uc3QgU3R5bGVkRHJvcGRvd25MaW5rID0gc3R5bGVkLmFgXG4gICR7KHsgc2NyaXB0IH0pID0+IHNjcmlwdCAmJiBnZXRQaWNhKHNjcmlwdCl9O1xuICAkeyh7IHNlcnZpY2UgfSkgPT4gc2VydmljZSAmJiBnZXRTYW5zUmVndWxhcihzZXJ2aWNlKX1cbiAgY29sb3I6ICR7Q19XSElURX07XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcblxuICAmOmhvdmVyLFxuICAmOmZvY3VzIHtcbiAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcbiAgfVxuYDtcblxuY29uc3QgU3R5bGVkQ3VycmVudExpbmsgPSBzdHlsZWQuc3BhbmBcbiAgJHsoeyBkaXIgfSkgPT4gZ2V0U3R5bGVzKGRpcil9XG5gO1xuXG5TdHlsZWRDdXJyZW50TGluay5kZWZhdWx0UHJvcHMgPSB7XG4gIHJvbGU6ICd0ZXh0Jyxcbn07XG5cbmV4cG9ydCBjb25zdCBEcm9wZG93bkxpID0gKHtcbiAgY2hpbGRyZW4sXG4gIHNjcmlwdCxcbiAgY3VycmVudFBhZ2VUZXh0LFxuICBhY3RpdmUsXG4gIHNlcnZpY2UsXG4gIHVybCxcbiAgZGlyLFxufSkgPT4gKFxuICA8U3R5bGVkRHJvcGRvd25MaSByb2xlPVwibGlzdGl0ZW1cIj5cbiAgICA8U3R5bGVkRHJvcGRvd25MaW5rIHNjcmlwdD17c2NyaXB0fSBzZXJ2aWNlPXtzZXJ2aWNlfSBocmVmPXt1cmx9PlxuICAgICAge2FjdGl2ZSAmJiBjdXJyZW50UGFnZVRleHQgPyAoXG4gICAgICAgIDxTdHlsZWRDdXJyZW50TGluayBkaXI9e2Rpcn0+XG4gICAgICAgICAgPFZpc3VhbGx5SGlkZGVuVGV4dD57Y3VycmVudFBhZ2VUZXh0fSwgPC9WaXN1YWxseUhpZGRlblRleHQ+XG4gICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICA8L1N0eWxlZEN1cnJlbnRMaW5rPlxuICAgICAgKSA6IChcbiAgICAgICAgY2hpbGRyZW5cbiAgICAgICl9XG4gICAgPC9TdHlsZWREcm9wZG93bkxpbms+XG4gIDwvU3R5bGVkRHJvcGRvd25MaT5cbik7XG5cbkRyb3Bkb3duTGkucHJvcFR5cGVzID0ge1xuICBjaGlsZHJlbjogc3RyaW5nLmlzUmVxdWlyZWQsXG4gIHVybDogc3RyaW5nLmlzUmVxdWlyZWQsXG4gIHNjcmlwdDogc2hhcGUoc2NyaXB0UHJvcFR5cGUpLmlzUmVxdWlyZWQsXG4gIHNlcnZpY2U6IHN0cmluZy5pc1JlcXVpcmVkLFxuICBhY3RpdmU6IGJvb2wsXG4gIGN1cnJlbnRQYWdlVGV4dDogc3RyaW5nLFxuICBkaXI6IG9uZU9mKFsnbHRyJywgJ3J0bCddKSxcbn07XG5cbkRyb3Bkb3duTGkuZGVmYXVsdFByb3BzID0ge1xuICBhY3RpdmU6IGZhbHNlLFxuICBjdXJyZW50UGFnZVRleHQ6IG51bGwsXG4gIGRpcjogJ2x0cicsXG59O1xuXG5jb25zdCBpY29uQm9yZGVyID0gYFxuICBjb250ZW50OiAnJztcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBsZWZ0OiAwO1xuICByaWdodDogMDtcbiAgYm90dG9tOiAwO1xuICB0b3A6IDA7XG4gIGJvcmRlcjogJHtHRUxfU1BBQ0lOR19ITEZ9IHNvbGlkICR7Q19XSElURX07XG5gO1xuXG4vLyBUaGUgc2lkZUxlbmd0aCBvZiB0aGUgYnV0dG9uIHNob3VsZCBiZVxuLy8gIGxpbmUgaGVpZ2h0ICsgdG9wIHBhZGRpbmcgKyBib3R0b20gcGFkZGluZ1xuY29uc3QgY2FsY3VsYXRlQnV0dG9uU2lkZSA9IGxpbmVIZWlnaHQgPT5cbiAgbGluZUhlaWdodCAvIDE2ICsgTkFWX0JBUl9UT1BfQk9UVE9NX1NQQUNJTkcgKiAyO1xuXG5jb25zdCBnZXRCdXR0b25EaW1lbnNpb25zID0gbGluZUhlaWdodCA9PlxuICBgaGVpZ2h0OiAke2NhbGN1bGF0ZUJ1dHRvblNpZGUobGluZUhlaWdodCl9cmVtO1xuICB3aWR0aDogJHtjYWxjdWxhdGVCdXR0b25TaWRlKGxpbmVIZWlnaHQpfXJlbTtgO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvcHJvcC10eXBlc1xuY29uc3QgQnV0dG9uID0gKHsgc2NyaXB0LCAuLi5wcm9wcyB9KSA9PiA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiB7Li4ucHJvcHN9IC8+O1xuXG5jb25zdCBNZW51QnV0dG9uID0gc3R5bGVkKEJ1dHRvbilgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgcGFkZGluZzogMDtcbiAgbWFyZ2luOiAwO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgYm9yZGVyOiAwO1xuXG4gICR7KHsgZGlyIH0pID0+IChkaXIgPT09ICdsdHInID8gYGZsb2F0OiBsZWZ0O2AgOiBgZmxvYXQ6IHJpZ2h0O2ApfVxuICAkeyh7IHNjcmlwdCB9KSA9PlxuICAgIHNjcmlwdCAmJiBnZXRCdXR0b25EaW1lbnNpb25zKHNjcmlwdC5waWNhLmdyb3VwQS5saW5lSGVpZ2h0KX1cblxuICAmOmhvdmVyLFxuICAmOmZvY3VzIHtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgYm94LXNoYWRvdzogaW5zZXQgMCAwIDAgJHtHRUxfU1BBQ0lOR19ITEZ9ICR7Q19XSElURX07XG4gICAgOjphZnRlciB7XG4gICAgICAke2ljb25Cb3JkZXJ9O1xuICAgIH1cbiAgfVxuXG4gIEBtZWRpYSAobWluLXdpZHRoOiAke0dFTF9HUk9VUF8zX1NDUkVFTl9XSURUSF9NSU59KSB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gIH1cbiAgQG1lZGlhIChtaW4td2lkdGg6ICR7R0VMX0dST1VQX0JfTUlOX1dJRFRIfXJlbSkge1xuICAgICR7KHsgc2NyaXB0IH0pID0+XG4gICAgICBzY3JpcHQgJiYgZ2V0QnV0dG9uRGltZW5zaW9ucyhzY3JpcHQucGljYS5ncm91cEIubGluZUhlaWdodCl9XG4gIH1cblxuICAmIHN2ZyB7XG4gICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IENhbm9uaWNhbE1lbnVCdXR0b24gPSAoe1xuICBhbm5vdW5jZWRUZXh0LFxuICBpc09wZW4sXG4gIG9uQ2xpY2ssXG4gIGRpcixcbiAgc2NyaXB0LFxufSkgPT4gKFxuICA8TWVudUJ1dHRvblxuICAgIG9uQ2xpY2s9e29uQ2xpY2t9XG4gICAgYXJpYS1leHBhbmRlZD17aXNPcGVuID8gJ3RydWUnIDogJ2ZhbHNlJ31cbiAgICBkaXI9e2Rpcn1cbiAgICBzY3JpcHQ9e3NjcmlwdH1cbiAgPlxuICAgIHtpc09wZW4gPyBuYXZpZ2F0aW9uSWNvbnMuY3Jvc3MgOiBuYXZpZ2F0aW9uSWNvbnMuaGFtYnVyZ2VyfVxuICAgIDxWaXN1YWxseUhpZGRlblRleHQ+e2Fubm91bmNlZFRleHR9PC9WaXN1YWxseUhpZGRlblRleHQ+XG4gIDwvTWVudUJ1dHRvbj5cbik7XG5cbkNhbm9uaWNhbE1lbnVCdXR0b24ucHJvcFR5cGVzID0ge1xuICBhbm5vdW5jZWRUZXh0OiBzdHJpbmcuaXNSZXF1aXJlZCxcbiAgb25DbGljazogZnVuYy5pc1JlcXVpcmVkLFxuICBpc09wZW46IGJvb2wuaXNSZXF1aXJlZCxcbiAgZGlyOiBvbmVPZihbJ2x0cicsICdydGwnXSksXG4gIHNjcmlwdDogc2hhcGUoc2NyaXB0UHJvcFR5cGUpLmlzUmVxdWlyZWQsXG59O1xuXG5DYW5vbmljYWxNZW51QnV0dG9uLmRlZmF1bHRQcm9wcyA9IHtcbiAgZGlyOiAnbHRyJyxcbn07XG5cbmNvbnN0IEFtcEhlYWQgPSAoKSA9PiAoXG4gIDxIZWxtZXQ+XG4gICAgPHNjcmlwdFxuICAgICAgYXN5bmNcbiAgICAgIGN1c3RvbS1lbGVtZW50PVwiYW1wLWJpbmRcIlxuICAgICAgc3JjPVwiaHR0cHM6Ly9jZG4uYW1wcHJvamVjdC5vcmcvdjAvYW1wLWJpbmQtMC4xLmpzXCJcbiAgICAvPlxuICA8L0hlbG1ldD5cbik7XG5cbmNvbnN0IGV4cGFuZGVkSGFuZGxlciA9XG4gICdBTVAuc2V0U3RhdGUoeyBtZW51U3RhdGU6IHsgZXhwYW5kZWQ6ICFtZW51U3RhdGUuZXhwYW5kZWQgfX0pJztcblxuY29uc3QgaW5pdGlhbFN0YXRlID0geyBleHBhbmRlZDogZmFsc2UgfTtcblxuZXhwb3J0IGNvbnN0IEFtcE1lbnVCdXR0b24gPSAoeyBhbm5vdW5jZWRUZXh0LCBvblRvZ2dsZSwgZGlyLCBzY3JpcHQgfSkgPT4gKFxuICA8PlxuICAgIDxBbXBIZWFkIC8+XG4gICAgPGFtcC1zdGF0ZSBpZD1cIm1lbnVTdGF0ZVwiPlxuICAgICAgPHNjcmlwdFxuICAgICAgICB0eXBlPVwiYXBwbGljYXRpb24vanNvblwiXG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9uby1kYW5nZXIgKi9cbiAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3sgX19odG1sOiBKU09OLnN0cmluZ2lmeShpbml0aWFsU3RhdGUpIH19XG4gICAgICAvPlxuICAgIDwvYW1wLXN0YXRlPlxuICAgIDxNZW51QnV0dG9uXG4gICAgICBhcmlhLWV4cGFuZGVkPVwiZmFsc2VcIlxuICAgICAgZGF0YS1hbXAtYmluZC1hcmlhLWV4cGFuZGVkPSdtZW51U3RhdGUuZXhwYW5kZWQgPyBcInRydWVcIiA6IFwiZmFsc2VcIidcbiAgICAgIG9uPXtgdGFwOiR7ZXhwYW5kZWRIYW5kbGVyfSwke29uVG9nZ2xlfWB9XG4gICAgICBkaXI9e2Rpcn1cbiAgICAgIHNjcmlwdD17c2NyaXB0fVxuICAgID5cbiAgICAgIHtjbG9uZUVsZW1lbnQobmF2aWdhdGlvbkljb25zLmhhbWJ1cmdlciwge1xuICAgICAgICAnZGF0YS1hbXAtYmluZC1oaWRkZW4nOiAnbWVudVN0YXRlLmV4cGFuZGVkJyxcbiAgICAgIH0pfVxuICAgICAge2Nsb25lRWxlbWVudChuYXZpZ2F0aW9uSWNvbnMuY3Jvc3MsIHtcbiAgICAgICAgaGlkZGVuOiB0cnVlLFxuICAgICAgICAnZGF0YS1hbXAtYmluZC1oaWRkZW4nOiAnIW1lbnVTdGF0ZS5leHBhbmRlZCcsXG4gICAgICB9KX1cbiAgICAgIDxWaXN1YWxseUhpZGRlblRleHQ+e2Fubm91bmNlZFRleHR9PC9WaXN1YWxseUhpZGRlblRleHQ+XG4gICAgPC9NZW51QnV0dG9uPlxuICA8Lz5cbik7XG5cbkFtcE1lbnVCdXR0b24ucHJvcFR5cGVzID0ge1xuICBhbm5vdW5jZWRUZXh0OiBzdHJpbmcuaXNSZXF1aXJlZCxcbiAgb25Ub2dnbGU6IHN0cmluZy5pc1JlcXVpcmVkLFxuICBkaXI6IG9uZU9mKFsnbHRyJywgJ3J0bCddKSxcbiAgc2NyaXB0OiBzaGFwZShzY3JpcHRQcm9wVHlwZSkuaXNSZXF1aXJlZCxcbn07XG5cbkFtcE1lbnVCdXR0b24uZGVmYXVsdFByb3BzID0ge1xuICBkaXI6ICdsdHInLFxufTtcbiJdfQ== */"));
exports.AmpDropdown = AmpDropdown;
var DropdownUl = (0, _base.default)("ul", process.env.NODE_ENV === "production" ? {
  target: "ex2l5ol4"
} : {
  target: "ex2l5ol4",
  label: "DropdownUl"
})("list-style-type:none;margin:0;padding:0 ", _spacings.GEL_SPACING, ";border-bottom:0.125rem solid ", _colours.C_SHADOW, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.DropdownUl = DropdownUl;
DropdownUl.defaultProps = {
  role: 'list'
};
var StyledDropdownLi = (0, _base.default)("li", process.env.NODE_ENV === "production" ? {
  target: "ex2l5ol3"
} : {
  target: "ex2l5ol3",
  label: "StyledDropdownLi"
})("padding:0.75rem 0;border-bottom:0.0625rem solid ", _colours.C_SHADOW, ";&:last-child{padding-bottom:", _spacings.GEL_SPACING_DBL, ";border:0;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
var StyledDropdownLink = (0, _base.default)("a", process.env.NODE_ENV === "production" ? {
  target: "ex2l5ol2"
} : {
  target: "ex2l5ol2",
  label: "StyledDropdownLink"
})(function (_ref3) {
  var script = _ref3.script;
  return script && (0, _typography.getPica)(script);
}, ";", function (_ref4) {
  var service = _ref4.service;
  return service && (0, _fontStyles.getSansRegular)(service);
}, " color:", _colours.C_WHITE, ";text-decoration:none;&:hover,&:focus{text-decoration:underline;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
var StyledCurrentLink = (0, _base.default)("span", process.env.NODE_ENV === "production" ? {
  target: "ex2l5ol1"
} : {
  target: "ex2l5ol1",
  label: "StyledCurrentLink"
})(function (_ref5) {
  var dir = _ref5.dir;
  return getStyles(dir);
}, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Ecm9wZG93bk5hdmlnYXRpb24vaW5kZXguanN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW1IcUMiLCJmaWxlIjoiLi4vLi4vc3JjL0Ryb3Bkb3duTmF2aWdhdGlvbi9pbmRleC5qc3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgY2xvbmVFbGVtZW50LCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBzaGFwZSwgc3RyaW5nLCBib29sLCBmdW5jLCBvbmVPZiwgbm9kZSB9IGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFZpc3VhbGx5SGlkZGVuVGV4dCBmcm9tICdAYmJjL3BzYW1tZWFkLXZpc3VhbGx5LWhpZGRlbi10ZXh0JztcbmltcG9ydCB7IG5hdmlnYXRpb25JY29ucyB9IGZyb20gJ0BiYmMvcHNhbW1lYWQtYXNzZXRzL3N2Z3MnO1xuaW1wb3J0IHsgQ19XSElURSwgQ19FQk9OLCBDX1NIQURPVyB9IGZyb20gJ0BiYmMvcHNhbW1lYWQtc3R5bGVzL2NvbG91cnMnO1xuaW1wb3J0IHtcbiAgR0VMX1NQQUNJTkdfSExGLFxuICBHRUxfU1BBQ0lORyxcbiAgR0VMX1NQQUNJTkdfREJMLFxufSBmcm9tICdAYmJjL2dlbC1mb3VuZGF0aW9ucy9zcGFjaW5ncyc7XG5pbXBvcnQgeyBIZWxtZXQgfSBmcm9tICdyZWFjdC1oZWxtZXQnO1xuaW1wb3J0IHtcbiAgR0VMX0dST1VQXzNfU0NSRUVOX1dJRFRIX01JTixcbiAgR0VMX0dST1VQX0JfTUlOX1dJRFRILFxufSBmcm9tICdAYmJjL2dlbC1mb3VuZGF0aW9ucy9icmVha3BvaW50cyc7XG5pbXBvcnQgeyBnZXRQaWNhIH0gZnJvbSAnQGJiYy9nZWwtZm91bmRhdGlvbnMvdHlwb2dyYXBoeSc7XG5pbXBvcnQgeyBzY3JpcHRQcm9wVHlwZSB9IGZyb20gJ0BiYmMvZ2VsLWZvdW5kYXRpb25zL3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgZ2V0U2Fuc1JlZ3VsYXIgfSBmcm9tICdAYmJjL3BzYW1tZWFkLXN0eWxlcy9mb250LXN0eWxlcyc7XG5cbmV4cG9ydCBjb25zdCBOQVZfQkFSX1RPUF9CT1RUT01fU1BBQ0lORyA9IDAuNzU7IC8vIDEycHhcblxuY29uc3QgZ2V0U3R5bGVzID0gZGlyID0+IHtcbiAgY29uc3QgZGlyZWN0aW9uID0gZGlyID09PSAnbHRyJyA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gIHJldHVybiBgYm9yZGVyLSR7ZGlyZWN0aW9ufTogJHtHRUxfU1BBQ0lOR19ITEZ9IHNvbGlkICR7Q19XSElURX07XG4gICAgICAgICAgcGFkZGluZy0ke2RpcmVjdGlvbn06ICR7R0VMX1NQQUNJTkd9O2A7XG59O1xuXG5jb25zdCBTdHlsZWREcm9wZG93biA9IHN0eWxlZC5kaXZgXG4gIGJhY2tncm91bmQtY29sb3I6ICR7Q19FQk9OfTtcbiAgY2xlYXI6IGJvdGg7XG4gIG92ZXJmbG93OiBoaWRkZW47XG5cbiAgaGVpZ2h0OiAwO1xuICB0cmFuc2l0aW9uOiBhbGwgMC4ycyBlYXNlLW91dDtcbiAgdHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLCAwLCAwLjU4LCAxKTtcblxuICAkeyh7IGhlaWdodCwgaXNPcGVuIH0pID0+XG4gICAgaXNPcGVuXG4gICAgICA/IGB2aXNpYmlsaXR5OiB2aXNpYmxlOyBoZWlnaHQ6ICR7aGVpZ2h0fXB4O2BcbiAgICAgIDogYHZpc2liaWxpdHk6IGhpZGRlbjtgfVxuXG4gIEBtZWRpYSAobWluLXdpZHRoOiAke0dFTF9HUk9VUF8zX1NDUkVFTl9XSURUSF9NSU59KSB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gIH1cblxuICBAbWVkaWEgKHByZWZlcnMtcmVkdWNlZC1tb3Rpb246IHJlZHVjZSkge1xuICAgIHRyYW5zaXRpb246IG5vbmU7XG4gIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBDYW5vbmljYWxEcm9wZG93biA9ICh7IGlzT3BlbiwgY2hpbGRyZW4gfSkgPT4ge1xuICBjb25zdCBoZWlnaHRSZWYgPSB1c2VSZWYobnVsbCk7XG5cbiAgcmV0dXJuIChcbiAgICA8U3R5bGVkRHJvcGRvd25cbiAgICAgIGRhdGEtZTJlPVwiZHJvcGRvd24tbmF2XCJcbiAgICAgIHJlZj17aGVpZ2h0UmVmfVxuICAgICAgaGVpZ2h0PXtoZWlnaHRSZWYuY3VycmVudCA/IGhlaWdodFJlZi5jdXJyZW50LnNjcm9sbEhlaWdodCA6IDB9XG4gICAgICBpc09wZW49e2lzT3Blbn1cbiAgICA+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9TdHlsZWREcm9wZG93bj5cbiAgKTtcbn07XG5cbkNhbm9uaWNhbERyb3Bkb3duLnByb3BUeXBlcyA9IHtcbiAgaXNPcGVuOiBib29sLmlzUmVxdWlyZWQsXG4gIGNoaWxkcmVuOiBub2RlLmlzUmVxdWlyZWQsXG59O1xuXG5leHBvcnQgY29uc3QgQW1wRHJvcGRvd24gPSBzdHlsZWQuZGl2YFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAke0NfRUJPTn07XG4gIGNsZWFyOiBib3RoO1xuXG4gIEBtZWRpYSAobWluLXdpZHRoOiAke0dFTF9HUk9VUF8zX1NDUkVFTl9XSURUSF9NSU59KSB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBEcm9wZG93blVsID0gc3R5bGVkLnVsYFxuICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMCAke0dFTF9TUEFDSU5HfTtcbiAgYm9yZGVyLWJvdHRvbTogMC4xMjVyZW0gc29saWQgJHtDX1NIQURPV307XG5gO1xuXG5Ecm9wZG93blVsLmRlZmF1bHRQcm9wcyA9IHtcbiAgcm9sZTogJ2xpc3QnLFxufTtcblxuY29uc3QgU3R5bGVkRHJvcGRvd25MaSA9IHN0eWxlZC5saWBcbiAgcGFkZGluZzogMC43NXJlbSAwO1xuICBib3JkZXItYm90dG9tOiAwLjA2MjVyZW0gc29saWQgJHtDX1NIQURPV307XG5cbiAgJjpsYXN0LWNoaWxkIHtcbiAgICBwYWRkaW5nLWJvdHRvbTogJHtHRUxfU1BBQ0lOR19EQkx9O1xuICAgIGJvcmRlcjogMDtcbiAgfVxuYDtcblxuY29uc3QgU3R5bGVkRHJvcGRvd25MaW5rID0gc3R5bGVkLmFgXG4gICR7KHsgc2NyaXB0IH0pID0+IHNjcmlwdCAmJiBnZXRQaWNhKHNjcmlwdCl9O1xuICAkeyh7IHNlcnZpY2UgfSkgPT4gc2VydmljZSAmJiBnZXRTYW5zUmVndWxhcihzZXJ2aWNlKX1cbiAgY29sb3I6ICR7Q19XSElURX07XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcblxuICAmOmhvdmVyLFxuICAmOmZvY3VzIHtcbiAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcbiAgfVxuYDtcblxuY29uc3QgU3R5bGVkQ3VycmVudExpbmsgPSBzdHlsZWQuc3BhbmBcbiAgJHsoeyBkaXIgfSkgPT4gZ2V0U3R5bGVzKGRpcil9XG5gO1xuXG5TdHlsZWRDdXJyZW50TGluay5kZWZhdWx0UHJvcHMgPSB7XG4gIHJvbGU6ICd0ZXh0Jyxcbn07XG5cbmV4cG9ydCBjb25zdCBEcm9wZG93bkxpID0gKHtcbiAgY2hpbGRyZW4sXG4gIHNjcmlwdCxcbiAgY3VycmVudFBhZ2VUZXh0LFxuICBhY3RpdmUsXG4gIHNlcnZpY2UsXG4gIHVybCxcbiAgZGlyLFxufSkgPT4gKFxuICA8U3R5bGVkRHJvcGRvd25MaSByb2xlPVwibGlzdGl0ZW1cIj5cbiAgICA8U3R5bGVkRHJvcGRvd25MaW5rIHNjcmlwdD17c2NyaXB0fSBzZXJ2aWNlPXtzZXJ2aWNlfSBocmVmPXt1cmx9PlxuICAgICAge2FjdGl2ZSAmJiBjdXJyZW50UGFnZVRleHQgPyAoXG4gICAgICAgIDxTdHlsZWRDdXJyZW50TGluayBkaXI9e2Rpcn0+XG4gICAgICAgICAgPFZpc3VhbGx5SGlkZGVuVGV4dD57Y3VycmVudFBhZ2VUZXh0fSwgPC9WaXN1YWxseUhpZGRlblRleHQ+XG4gICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICA8L1N0eWxlZEN1cnJlbnRMaW5rPlxuICAgICAgKSA6IChcbiAgICAgICAgY2hpbGRyZW5cbiAgICAgICl9XG4gICAgPC9TdHlsZWREcm9wZG93bkxpbms+XG4gIDwvU3R5bGVkRHJvcGRvd25MaT5cbik7XG5cbkRyb3Bkb3duTGkucHJvcFR5cGVzID0ge1xuICBjaGlsZHJlbjogc3RyaW5nLmlzUmVxdWlyZWQsXG4gIHVybDogc3RyaW5nLmlzUmVxdWlyZWQsXG4gIHNjcmlwdDogc2hhcGUoc2NyaXB0UHJvcFR5cGUpLmlzUmVxdWlyZWQsXG4gIHNlcnZpY2U6IHN0cmluZy5pc1JlcXVpcmVkLFxuICBhY3RpdmU6IGJvb2wsXG4gIGN1cnJlbnRQYWdlVGV4dDogc3RyaW5nLFxuICBkaXI6IG9uZU9mKFsnbHRyJywgJ3J0bCddKSxcbn07XG5cbkRyb3Bkb3duTGkuZGVmYXVsdFByb3BzID0ge1xuICBhY3RpdmU6IGZhbHNlLFxuICBjdXJyZW50UGFnZVRleHQ6IG51bGwsXG4gIGRpcjogJ2x0cicsXG59O1xuXG5jb25zdCBpY29uQm9yZGVyID0gYFxuICBjb250ZW50OiAnJztcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBsZWZ0OiAwO1xuICByaWdodDogMDtcbiAgYm90dG9tOiAwO1xuICB0b3A6IDA7XG4gIGJvcmRlcjogJHtHRUxfU1BBQ0lOR19ITEZ9IHNvbGlkICR7Q19XSElURX07XG5gO1xuXG4vLyBUaGUgc2lkZUxlbmd0aCBvZiB0aGUgYnV0dG9uIHNob3VsZCBiZVxuLy8gIGxpbmUgaGVpZ2h0ICsgdG9wIHBhZGRpbmcgKyBib3R0b20gcGFkZGluZ1xuY29uc3QgY2FsY3VsYXRlQnV0dG9uU2lkZSA9IGxpbmVIZWlnaHQgPT5cbiAgbGluZUhlaWdodCAvIDE2ICsgTkFWX0JBUl9UT1BfQk9UVE9NX1NQQUNJTkcgKiAyO1xuXG5jb25zdCBnZXRCdXR0b25EaW1lbnNpb25zID0gbGluZUhlaWdodCA9PlxuICBgaGVpZ2h0OiAke2NhbGN1bGF0ZUJ1dHRvblNpZGUobGluZUhlaWdodCl9cmVtO1xuICB3aWR0aDogJHtjYWxjdWxhdGVCdXR0b25TaWRlKGxpbmVIZWlnaHQpfXJlbTtgO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvcHJvcC10eXBlc1xuY29uc3QgQnV0dG9uID0gKHsgc2NyaXB0LCAuLi5wcm9wcyB9KSA9PiA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiB7Li4ucHJvcHN9IC8+O1xuXG5jb25zdCBNZW51QnV0dG9uID0gc3R5bGVkKEJ1dHRvbilgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgcGFkZGluZzogMDtcbiAgbWFyZ2luOiAwO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgYm9yZGVyOiAwO1xuXG4gICR7KHsgZGlyIH0pID0+IChkaXIgPT09ICdsdHInID8gYGZsb2F0OiBsZWZ0O2AgOiBgZmxvYXQ6IHJpZ2h0O2ApfVxuICAkeyh7IHNjcmlwdCB9KSA9PlxuICAgIHNjcmlwdCAmJiBnZXRCdXR0b25EaW1lbnNpb25zKHNjcmlwdC5waWNhLmdyb3VwQS5saW5lSGVpZ2h0KX1cblxuICAmOmhvdmVyLFxuICAmOmZvY3VzIHtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgYm94LXNoYWRvdzogaW5zZXQgMCAwIDAgJHtHRUxfU1BBQ0lOR19ITEZ9ICR7Q19XSElURX07XG4gICAgOjphZnRlciB7XG4gICAgICAke2ljb25Cb3JkZXJ9O1xuICAgIH1cbiAgfVxuXG4gIEBtZWRpYSAobWluLXdpZHRoOiAke0dFTF9HUk9VUF8zX1NDUkVFTl9XSURUSF9NSU59KSB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gIH1cbiAgQG1lZGlhIChtaW4td2lkdGg6ICR7R0VMX0dST1VQX0JfTUlOX1dJRFRIfXJlbSkge1xuICAgICR7KHsgc2NyaXB0IH0pID0+XG4gICAgICBzY3JpcHQgJiYgZ2V0QnV0dG9uRGltZW5zaW9ucyhzY3JpcHQucGljYS5ncm91cEIubGluZUhlaWdodCl9XG4gIH1cblxuICAmIHN2ZyB7XG4gICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IENhbm9uaWNhbE1lbnVCdXR0b24gPSAoe1xuICBhbm5vdW5jZWRUZXh0LFxuICBpc09wZW4sXG4gIG9uQ2xpY2ssXG4gIGRpcixcbiAgc2NyaXB0LFxufSkgPT4gKFxuICA8TWVudUJ1dHRvblxuICAgIG9uQ2xpY2s9e29uQ2xpY2t9XG4gICAgYXJpYS1leHBhbmRlZD17aXNPcGVuID8gJ3RydWUnIDogJ2ZhbHNlJ31cbiAgICBkaXI9e2Rpcn1cbiAgICBzY3JpcHQ9e3NjcmlwdH1cbiAgPlxuICAgIHtpc09wZW4gPyBuYXZpZ2F0aW9uSWNvbnMuY3Jvc3MgOiBuYXZpZ2F0aW9uSWNvbnMuaGFtYnVyZ2VyfVxuICAgIDxWaXN1YWxseUhpZGRlblRleHQ+e2Fubm91bmNlZFRleHR9PC9WaXN1YWxseUhpZGRlblRleHQ+XG4gIDwvTWVudUJ1dHRvbj5cbik7XG5cbkNhbm9uaWNhbE1lbnVCdXR0b24ucHJvcFR5cGVzID0ge1xuICBhbm5vdW5jZWRUZXh0OiBzdHJpbmcuaXNSZXF1aXJlZCxcbiAgb25DbGljazogZnVuYy5pc1JlcXVpcmVkLFxuICBpc09wZW46IGJvb2wuaXNSZXF1aXJlZCxcbiAgZGlyOiBvbmVPZihbJ2x0cicsICdydGwnXSksXG4gIHNjcmlwdDogc2hhcGUoc2NyaXB0UHJvcFR5cGUpLmlzUmVxdWlyZWQsXG59O1xuXG5DYW5vbmljYWxNZW51QnV0dG9uLmRlZmF1bHRQcm9wcyA9IHtcbiAgZGlyOiAnbHRyJyxcbn07XG5cbmNvbnN0IEFtcEhlYWQgPSAoKSA9PiAoXG4gIDxIZWxtZXQ+XG4gICAgPHNjcmlwdFxuICAgICAgYXN5bmNcbiAgICAgIGN1c3RvbS1lbGVtZW50PVwiYW1wLWJpbmRcIlxuICAgICAgc3JjPVwiaHR0cHM6Ly9jZG4uYW1wcHJvamVjdC5vcmcvdjAvYW1wLWJpbmQtMC4xLmpzXCJcbiAgICAvPlxuICA8L0hlbG1ldD5cbik7XG5cbmNvbnN0IGV4cGFuZGVkSGFuZGxlciA9XG4gICdBTVAuc2V0U3RhdGUoeyBtZW51U3RhdGU6IHsgZXhwYW5kZWQ6ICFtZW51U3RhdGUuZXhwYW5kZWQgfX0pJztcblxuY29uc3QgaW5pdGlhbFN0YXRlID0geyBleHBhbmRlZDogZmFsc2UgfTtcblxuZXhwb3J0IGNvbnN0IEFtcE1lbnVCdXR0b24gPSAoeyBhbm5vdW5jZWRUZXh0LCBvblRvZ2dsZSwgZGlyLCBzY3JpcHQgfSkgPT4gKFxuICA8PlxuICAgIDxBbXBIZWFkIC8+XG4gICAgPGFtcC1zdGF0ZSBpZD1cIm1lbnVTdGF0ZVwiPlxuICAgICAgPHNjcmlwdFxuICAgICAgICB0eXBlPVwiYXBwbGljYXRpb24vanNvblwiXG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9uby1kYW5nZXIgKi9cbiAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3sgX19odG1sOiBKU09OLnN0cmluZ2lmeShpbml0aWFsU3RhdGUpIH19XG4gICAgICAvPlxuICAgIDwvYW1wLXN0YXRlPlxuICAgIDxNZW51QnV0dG9uXG4gICAgICBhcmlhLWV4cGFuZGVkPVwiZmFsc2VcIlxuICAgICAgZGF0YS1hbXAtYmluZC1hcmlhLWV4cGFuZGVkPSdtZW51U3RhdGUuZXhwYW5kZWQgPyBcInRydWVcIiA6IFwiZmFsc2VcIidcbiAgICAgIG9uPXtgdGFwOiR7ZXhwYW5kZWRIYW5kbGVyfSwke29uVG9nZ2xlfWB9XG4gICAgICBkaXI9e2Rpcn1cbiAgICAgIHNjcmlwdD17c2NyaXB0fVxuICAgID5cbiAgICAgIHtjbG9uZUVsZW1lbnQobmF2aWdhdGlvbkljb25zLmhhbWJ1cmdlciwge1xuICAgICAgICAnZGF0YS1hbXAtYmluZC1oaWRkZW4nOiAnbWVudVN0YXRlLmV4cGFuZGVkJyxcbiAgICAgIH0pfVxuICAgICAge2Nsb25lRWxlbWVudChuYXZpZ2F0aW9uSWNvbnMuY3Jvc3MsIHtcbiAgICAgICAgaGlkZGVuOiB0cnVlLFxuICAgICAgICAnZGF0YS1hbXAtYmluZC1oaWRkZW4nOiAnIW1lbnVTdGF0ZS5leHBhbmRlZCcsXG4gICAgICB9KX1cbiAgICAgIDxWaXN1YWxseUhpZGRlblRleHQ+e2Fubm91bmNlZFRleHR9PC9WaXN1YWxseUhpZGRlblRleHQ+XG4gICAgPC9NZW51QnV0dG9uPlxuICA8Lz5cbik7XG5cbkFtcE1lbnVCdXR0b24ucHJvcFR5cGVzID0ge1xuICBhbm5vdW5jZWRUZXh0OiBzdHJpbmcuaXNSZXF1aXJlZCxcbiAgb25Ub2dnbGU6IHN0cmluZy5pc1JlcXVpcmVkLFxuICBkaXI6IG9uZU9mKFsnbHRyJywgJ3J0bCddKSxcbiAgc2NyaXB0OiBzaGFwZShzY3JpcHRQcm9wVHlwZSkuaXNSZXF1aXJlZCxcbn07XG5cbkFtcE1lbnVCdXR0b24uZGVmYXVsdFByb3BzID0ge1xuICBkaXI6ICdsdHInLFxufTtcbiJdfQ== */"));
StyledCurrentLink.defaultProps = {
  role: 'text'
};

var DropdownLi = function DropdownLi(_ref6) {
  var children = _ref6.children,
      script = _ref6.script,
      currentPageText = _ref6.currentPageText,
      active = _ref6.active,
      service = _ref6.service,
      url = _ref6.url,
      dir = _ref6.dir;
  return /*#__PURE__*/_react.default.createElement(StyledDropdownLi, {
    role: "listitem"
  }, /*#__PURE__*/_react.default.createElement(StyledDropdownLink, {
    script: script,
    service: service,
    href: url
  }, active && currentPageText ? /*#__PURE__*/_react.default.createElement(StyledCurrentLink, {
    dir: dir
  }, /*#__PURE__*/_react.default.createElement(_psammeadVisuallyHiddenText.default, null, currentPageText, ", "), children) : children));
};

exports.DropdownLi = DropdownLi;
DropdownLi.propTypes = {
  children: _propTypes.string.isRequired,
  url: _propTypes.string.isRequired,
  script: (0, _propTypes.shape)(_propTypes2.scriptPropType).isRequired,
  service: _propTypes.string.isRequired,
  active: _propTypes.bool,
  currentPageText: _propTypes.string,
  dir: (0, _propTypes.oneOf)(['ltr', 'rtl'])
};
DropdownLi.defaultProps = {
  active: false,
  currentPageText: null,
  dir: 'ltr'
};
var iconBorder = "\n  content: '';\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  border: ".concat(_spacings.GEL_SPACING_HLF, " solid ").concat(_colours.C_WHITE, ";\n"); // The sideLength of the button should be
//  line height + top padding + bottom padding

var calculateButtonSide = function calculateButtonSide(lineHeight) {
  return lineHeight / 16 + NAV_BAR_TOP_BOTTOM_SPACING * 2;
};

var getButtonDimensions = function getButtonDimensions(lineHeight) {
  return "height: ".concat(calculateButtonSide(lineHeight), "rem;\n  width: ").concat(calculateButtonSide(lineHeight), "rem;");
}; // eslint-disable-next-line react/prop-types


var Button = function Button(_ref7) {
  var script = _ref7.script,
      props = _objectWithoutProperties(_ref7, _excluded);

  return /*#__PURE__*/_react.default.createElement("button", _extends({
    type: "button"
  }, props));
};

var MenuButton = ( /*#__PURE__*/0, _base.default)(Button, process.env.NODE_ENV === "production" ? {
  target: "ex2l5ol0"
} : {
  target: "ex2l5ol0",
  label: "MenuButton"
})("position:relative;padding:0;margin:0;background-color:transparent;border:0;", function (_ref8) {
  var dir = _ref8.dir;
  return dir === 'ltr' ? "float: left;" : "float: right;";
}, " ", function (_ref9) {
  var script = _ref9.script;
  return script && getButtonDimensions(script.pica.groupA.lineHeight);
}, " &:hover,&:focus{cursor:pointer;box-shadow:inset 0 0 0 ", _spacings.GEL_SPACING_HLF, " ", _colours.C_WHITE, ";::after{", iconBorder, ";}}@media (min-width: ", _breakpoints.GEL_GROUP_3_SCREEN_WIDTH_MIN, "){display:none;visibility:hidden;}@media (min-width: ", _breakpoints.GEL_GROUP_B_MIN_WIDTH, "rem){", function (_ref10) {
  var script = _ref10.script;
  return script && getButtonDimensions(script.pica.groupB.lineHeight);
}, ";}& svg{vertical-align:middle;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Ecm9wZG93bk5hdmlnYXRpb24vaW5kZXguanN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXdMaUMiLCJmaWxlIjoiLi4vLi4vc3JjL0Ryb3Bkb3duTmF2aWdhdGlvbi9pbmRleC5qc3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgY2xvbmVFbGVtZW50LCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBzaGFwZSwgc3RyaW5nLCBib29sLCBmdW5jLCBvbmVPZiwgbm9kZSB9IGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFZpc3VhbGx5SGlkZGVuVGV4dCBmcm9tICdAYmJjL3BzYW1tZWFkLXZpc3VhbGx5LWhpZGRlbi10ZXh0JztcbmltcG9ydCB7IG5hdmlnYXRpb25JY29ucyB9IGZyb20gJ0BiYmMvcHNhbW1lYWQtYXNzZXRzL3N2Z3MnO1xuaW1wb3J0IHsgQ19XSElURSwgQ19FQk9OLCBDX1NIQURPVyB9IGZyb20gJ0BiYmMvcHNhbW1lYWQtc3R5bGVzL2NvbG91cnMnO1xuaW1wb3J0IHtcbiAgR0VMX1NQQUNJTkdfSExGLFxuICBHRUxfU1BBQ0lORyxcbiAgR0VMX1NQQUNJTkdfREJMLFxufSBmcm9tICdAYmJjL2dlbC1mb3VuZGF0aW9ucy9zcGFjaW5ncyc7XG5pbXBvcnQgeyBIZWxtZXQgfSBmcm9tICdyZWFjdC1oZWxtZXQnO1xuaW1wb3J0IHtcbiAgR0VMX0dST1VQXzNfU0NSRUVOX1dJRFRIX01JTixcbiAgR0VMX0dST1VQX0JfTUlOX1dJRFRILFxufSBmcm9tICdAYmJjL2dlbC1mb3VuZGF0aW9ucy9icmVha3BvaW50cyc7XG5pbXBvcnQgeyBnZXRQaWNhIH0gZnJvbSAnQGJiYy9nZWwtZm91bmRhdGlvbnMvdHlwb2dyYXBoeSc7XG5pbXBvcnQgeyBzY3JpcHRQcm9wVHlwZSB9IGZyb20gJ0BiYmMvZ2VsLWZvdW5kYXRpb25zL3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgZ2V0U2Fuc1JlZ3VsYXIgfSBmcm9tICdAYmJjL3BzYW1tZWFkLXN0eWxlcy9mb250LXN0eWxlcyc7XG5cbmV4cG9ydCBjb25zdCBOQVZfQkFSX1RPUF9CT1RUT01fU1BBQ0lORyA9IDAuNzU7IC8vIDEycHhcblxuY29uc3QgZ2V0U3R5bGVzID0gZGlyID0+IHtcbiAgY29uc3QgZGlyZWN0aW9uID0gZGlyID09PSAnbHRyJyA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gIHJldHVybiBgYm9yZGVyLSR7ZGlyZWN0aW9ufTogJHtHRUxfU1BBQ0lOR19ITEZ9IHNvbGlkICR7Q19XSElURX07XG4gICAgICAgICAgcGFkZGluZy0ke2RpcmVjdGlvbn06ICR7R0VMX1NQQUNJTkd9O2A7XG59O1xuXG5jb25zdCBTdHlsZWREcm9wZG93biA9IHN0eWxlZC5kaXZgXG4gIGJhY2tncm91bmQtY29sb3I6ICR7Q19FQk9OfTtcbiAgY2xlYXI6IGJvdGg7XG4gIG92ZXJmbG93OiBoaWRkZW47XG5cbiAgaGVpZ2h0OiAwO1xuICB0cmFuc2l0aW9uOiBhbGwgMC4ycyBlYXNlLW91dDtcbiAgdHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLCAwLCAwLjU4LCAxKTtcblxuICAkeyh7IGhlaWdodCwgaXNPcGVuIH0pID0+XG4gICAgaXNPcGVuXG4gICAgICA/IGB2aXNpYmlsaXR5OiB2aXNpYmxlOyBoZWlnaHQ6ICR7aGVpZ2h0fXB4O2BcbiAgICAgIDogYHZpc2liaWxpdHk6IGhpZGRlbjtgfVxuXG4gIEBtZWRpYSAobWluLXdpZHRoOiAke0dFTF9HUk9VUF8zX1NDUkVFTl9XSURUSF9NSU59KSB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gIH1cblxuICBAbWVkaWEgKHByZWZlcnMtcmVkdWNlZC1tb3Rpb246IHJlZHVjZSkge1xuICAgIHRyYW5zaXRpb246IG5vbmU7XG4gIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBDYW5vbmljYWxEcm9wZG93biA9ICh7IGlzT3BlbiwgY2hpbGRyZW4gfSkgPT4ge1xuICBjb25zdCBoZWlnaHRSZWYgPSB1c2VSZWYobnVsbCk7XG5cbiAgcmV0dXJuIChcbiAgICA8U3R5bGVkRHJvcGRvd25cbiAgICAgIGRhdGEtZTJlPVwiZHJvcGRvd24tbmF2XCJcbiAgICAgIHJlZj17aGVpZ2h0UmVmfVxuICAgICAgaGVpZ2h0PXtoZWlnaHRSZWYuY3VycmVudCA/IGhlaWdodFJlZi5jdXJyZW50LnNjcm9sbEhlaWdodCA6IDB9XG4gICAgICBpc09wZW49e2lzT3Blbn1cbiAgICA+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9TdHlsZWREcm9wZG93bj5cbiAgKTtcbn07XG5cbkNhbm9uaWNhbERyb3Bkb3duLnByb3BUeXBlcyA9IHtcbiAgaXNPcGVuOiBib29sLmlzUmVxdWlyZWQsXG4gIGNoaWxkcmVuOiBub2RlLmlzUmVxdWlyZWQsXG59O1xuXG5leHBvcnQgY29uc3QgQW1wRHJvcGRvd24gPSBzdHlsZWQuZGl2YFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAke0NfRUJPTn07XG4gIGNsZWFyOiBib3RoO1xuXG4gIEBtZWRpYSAobWluLXdpZHRoOiAke0dFTF9HUk9VUF8zX1NDUkVFTl9XSURUSF9NSU59KSB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBEcm9wZG93blVsID0gc3R5bGVkLnVsYFxuICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMCAke0dFTF9TUEFDSU5HfTtcbiAgYm9yZGVyLWJvdHRvbTogMC4xMjVyZW0gc29saWQgJHtDX1NIQURPV307XG5gO1xuXG5Ecm9wZG93blVsLmRlZmF1bHRQcm9wcyA9IHtcbiAgcm9sZTogJ2xpc3QnLFxufTtcblxuY29uc3QgU3R5bGVkRHJvcGRvd25MaSA9IHN0eWxlZC5saWBcbiAgcGFkZGluZzogMC43NXJlbSAwO1xuICBib3JkZXItYm90dG9tOiAwLjA2MjVyZW0gc29saWQgJHtDX1NIQURPV307XG5cbiAgJjpsYXN0LWNoaWxkIHtcbiAgICBwYWRkaW5nLWJvdHRvbTogJHtHRUxfU1BBQ0lOR19EQkx9O1xuICAgIGJvcmRlcjogMDtcbiAgfVxuYDtcblxuY29uc3QgU3R5bGVkRHJvcGRvd25MaW5rID0gc3R5bGVkLmFgXG4gICR7KHsgc2NyaXB0IH0pID0+IHNjcmlwdCAmJiBnZXRQaWNhKHNjcmlwdCl9O1xuICAkeyh7IHNlcnZpY2UgfSkgPT4gc2VydmljZSAmJiBnZXRTYW5zUmVndWxhcihzZXJ2aWNlKX1cbiAgY29sb3I6ICR7Q19XSElURX07XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcblxuICAmOmhvdmVyLFxuICAmOmZvY3VzIHtcbiAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcbiAgfVxuYDtcblxuY29uc3QgU3R5bGVkQ3VycmVudExpbmsgPSBzdHlsZWQuc3BhbmBcbiAgJHsoeyBkaXIgfSkgPT4gZ2V0U3R5bGVzKGRpcil9XG5gO1xuXG5TdHlsZWRDdXJyZW50TGluay5kZWZhdWx0UHJvcHMgPSB7XG4gIHJvbGU6ICd0ZXh0Jyxcbn07XG5cbmV4cG9ydCBjb25zdCBEcm9wZG93bkxpID0gKHtcbiAgY2hpbGRyZW4sXG4gIHNjcmlwdCxcbiAgY3VycmVudFBhZ2VUZXh0LFxuICBhY3RpdmUsXG4gIHNlcnZpY2UsXG4gIHVybCxcbiAgZGlyLFxufSkgPT4gKFxuICA8U3R5bGVkRHJvcGRvd25MaSByb2xlPVwibGlzdGl0ZW1cIj5cbiAgICA8U3R5bGVkRHJvcGRvd25MaW5rIHNjcmlwdD17c2NyaXB0fSBzZXJ2aWNlPXtzZXJ2aWNlfSBocmVmPXt1cmx9PlxuICAgICAge2FjdGl2ZSAmJiBjdXJyZW50UGFnZVRleHQgPyAoXG4gICAgICAgIDxTdHlsZWRDdXJyZW50TGluayBkaXI9e2Rpcn0+XG4gICAgICAgICAgPFZpc3VhbGx5SGlkZGVuVGV4dD57Y3VycmVudFBhZ2VUZXh0fSwgPC9WaXN1YWxseUhpZGRlblRleHQ+XG4gICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICA8L1N0eWxlZEN1cnJlbnRMaW5rPlxuICAgICAgKSA6IChcbiAgICAgICAgY2hpbGRyZW5cbiAgICAgICl9XG4gICAgPC9TdHlsZWREcm9wZG93bkxpbms+XG4gIDwvU3R5bGVkRHJvcGRvd25MaT5cbik7XG5cbkRyb3Bkb3duTGkucHJvcFR5cGVzID0ge1xuICBjaGlsZHJlbjogc3RyaW5nLmlzUmVxdWlyZWQsXG4gIHVybDogc3RyaW5nLmlzUmVxdWlyZWQsXG4gIHNjcmlwdDogc2hhcGUoc2NyaXB0UHJvcFR5cGUpLmlzUmVxdWlyZWQsXG4gIHNlcnZpY2U6IHN0cmluZy5pc1JlcXVpcmVkLFxuICBhY3RpdmU6IGJvb2wsXG4gIGN1cnJlbnRQYWdlVGV4dDogc3RyaW5nLFxuICBkaXI6IG9uZU9mKFsnbHRyJywgJ3J0bCddKSxcbn07XG5cbkRyb3Bkb3duTGkuZGVmYXVsdFByb3BzID0ge1xuICBhY3RpdmU6IGZhbHNlLFxuICBjdXJyZW50UGFnZVRleHQ6IG51bGwsXG4gIGRpcjogJ2x0cicsXG59O1xuXG5jb25zdCBpY29uQm9yZGVyID0gYFxuICBjb250ZW50OiAnJztcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBsZWZ0OiAwO1xuICByaWdodDogMDtcbiAgYm90dG9tOiAwO1xuICB0b3A6IDA7XG4gIGJvcmRlcjogJHtHRUxfU1BBQ0lOR19ITEZ9IHNvbGlkICR7Q19XSElURX07XG5gO1xuXG4vLyBUaGUgc2lkZUxlbmd0aCBvZiB0aGUgYnV0dG9uIHNob3VsZCBiZVxuLy8gIGxpbmUgaGVpZ2h0ICsgdG9wIHBhZGRpbmcgKyBib3R0b20gcGFkZGluZ1xuY29uc3QgY2FsY3VsYXRlQnV0dG9uU2lkZSA9IGxpbmVIZWlnaHQgPT5cbiAgbGluZUhlaWdodCAvIDE2ICsgTkFWX0JBUl9UT1BfQk9UVE9NX1NQQUNJTkcgKiAyO1xuXG5jb25zdCBnZXRCdXR0b25EaW1lbnNpb25zID0gbGluZUhlaWdodCA9PlxuICBgaGVpZ2h0OiAke2NhbGN1bGF0ZUJ1dHRvblNpZGUobGluZUhlaWdodCl9cmVtO1xuICB3aWR0aDogJHtjYWxjdWxhdGVCdXR0b25TaWRlKGxpbmVIZWlnaHQpfXJlbTtgO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvcHJvcC10eXBlc1xuY29uc3QgQnV0dG9uID0gKHsgc2NyaXB0LCAuLi5wcm9wcyB9KSA9PiA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiB7Li4ucHJvcHN9IC8+O1xuXG5jb25zdCBNZW51QnV0dG9uID0gc3R5bGVkKEJ1dHRvbilgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgcGFkZGluZzogMDtcbiAgbWFyZ2luOiAwO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgYm9yZGVyOiAwO1xuXG4gICR7KHsgZGlyIH0pID0+IChkaXIgPT09ICdsdHInID8gYGZsb2F0OiBsZWZ0O2AgOiBgZmxvYXQ6IHJpZ2h0O2ApfVxuICAkeyh7IHNjcmlwdCB9KSA9PlxuICAgIHNjcmlwdCAmJiBnZXRCdXR0b25EaW1lbnNpb25zKHNjcmlwdC5waWNhLmdyb3VwQS5saW5lSGVpZ2h0KX1cblxuICAmOmhvdmVyLFxuICAmOmZvY3VzIHtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgYm94LXNoYWRvdzogaW5zZXQgMCAwIDAgJHtHRUxfU1BBQ0lOR19ITEZ9ICR7Q19XSElURX07XG4gICAgOjphZnRlciB7XG4gICAgICAke2ljb25Cb3JkZXJ9O1xuICAgIH1cbiAgfVxuXG4gIEBtZWRpYSAobWluLXdpZHRoOiAke0dFTF9HUk9VUF8zX1NDUkVFTl9XSURUSF9NSU59KSB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gIH1cbiAgQG1lZGlhIChtaW4td2lkdGg6ICR7R0VMX0dST1VQX0JfTUlOX1dJRFRIfXJlbSkge1xuICAgICR7KHsgc2NyaXB0IH0pID0+XG4gICAgICBzY3JpcHQgJiYgZ2V0QnV0dG9uRGltZW5zaW9ucyhzY3JpcHQucGljYS5ncm91cEIubGluZUhlaWdodCl9XG4gIH1cblxuICAmIHN2ZyB7XG4gICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IENhbm9uaWNhbE1lbnVCdXR0b24gPSAoe1xuICBhbm5vdW5jZWRUZXh0LFxuICBpc09wZW4sXG4gIG9uQ2xpY2ssXG4gIGRpcixcbiAgc2NyaXB0LFxufSkgPT4gKFxuICA8TWVudUJ1dHRvblxuICAgIG9uQ2xpY2s9e29uQ2xpY2t9XG4gICAgYXJpYS1leHBhbmRlZD17aXNPcGVuID8gJ3RydWUnIDogJ2ZhbHNlJ31cbiAgICBkaXI9e2Rpcn1cbiAgICBzY3JpcHQ9e3NjcmlwdH1cbiAgPlxuICAgIHtpc09wZW4gPyBuYXZpZ2F0aW9uSWNvbnMuY3Jvc3MgOiBuYXZpZ2F0aW9uSWNvbnMuaGFtYnVyZ2VyfVxuICAgIDxWaXN1YWxseUhpZGRlblRleHQ+e2Fubm91bmNlZFRleHR9PC9WaXN1YWxseUhpZGRlblRleHQ+XG4gIDwvTWVudUJ1dHRvbj5cbik7XG5cbkNhbm9uaWNhbE1lbnVCdXR0b24ucHJvcFR5cGVzID0ge1xuICBhbm5vdW5jZWRUZXh0OiBzdHJpbmcuaXNSZXF1aXJlZCxcbiAgb25DbGljazogZnVuYy5pc1JlcXVpcmVkLFxuICBpc09wZW46IGJvb2wuaXNSZXF1aXJlZCxcbiAgZGlyOiBvbmVPZihbJ2x0cicsICdydGwnXSksXG4gIHNjcmlwdDogc2hhcGUoc2NyaXB0UHJvcFR5cGUpLmlzUmVxdWlyZWQsXG59O1xuXG5DYW5vbmljYWxNZW51QnV0dG9uLmRlZmF1bHRQcm9wcyA9IHtcbiAgZGlyOiAnbHRyJyxcbn07XG5cbmNvbnN0IEFtcEhlYWQgPSAoKSA9PiAoXG4gIDxIZWxtZXQ+XG4gICAgPHNjcmlwdFxuICAgICAgYXN5bmNcbiAgICAgIGN1c3RvbS1lbGVtZW50PVwiYW1wLWJpbmRcIlxuICAgICAgc3JjPVwiaHR0cHM6Ly9jZG4uYW1wcHJvamVjdC5vcmcvdjAvYW1wLWJpbmQtMC4xLmpzXCJcbiAgICAvPlxuICA8L0hlbG1ldD5cbik7XG5cbmNvbnN0IGV4cGFuZGVkSGFuZGxlciA9XG4gICdBTVAuc2V0U3RhdGUoeyBtZW51U3RhdGU6IHsgZXhwYW5kZWQ6ICFtZW51U3RhdGUuZXhwYW5kZWQgfX0pJztcblxuY29uc3QgaW5pdGlhbFN0YXRlID0geyBleHBhbmRlZDogZmFsc2UgfTtcblxuZXhwb3J0IGNvbnN0IEFtcE1lbnVCdXR0b24gPSAoeyBhbm5vdW5jZWRUZXh0LCBvblRvZ2dsZSwgZGlyLCBzY3JpcHQgfSkgPT4gKFxuICA8PlxuICAgIDxBbXBIZWFkIC8+XG4gICAgPGFtcC1zdGF0ZSBpZD1cIm1lbnVTdGF0ZVwiPlxuICAgICAgPHNjcmlwdFxuICAgICAgICB0eXBlPVwiYXBwbGljYXRpb24vanNvblwiXG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9uby1kYW5nZXIgKi9cbiAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3sgX19odG1sOiBKU09OLnN0cmluZ2lmeShpbml0aWFsU3RhdGUpIH19XG4gICAgICAvPlxuICAgIDwvYW1wLXN0YXRlPlxuICAgIDxNZW51QnV0dG9uXG4gICAgICBhcmlhLWV4cGFuZGVkPVwiZmFsc2VcIlxuICAgICAgZGF0YS1hbXAtYmluZC1hcmlhLWV4cGFuZGVkPSdtZW51U3RhdGUuZXhwYW5kZWQgPyBcInRydWVcIiA6IFwiZmFsc2VcIidcbiAgICAgIG9uPXtgdGFwOiR7ZXhwYW5kZWRIYW5kbGVyfSwke29uVG9nZ2xlfWB9XG4gICAgICBkaXI9e2Rpcn1cbiAgICAgIHNjcmlwdD17c2NyaXB0fVxuICAgID5cbiAgICAgIHtjbG9uZUVsZW1lbnQobmF2aWdhdGlvbkljb25zLmhhbWJ1cmdlciwge1xuICAgICAgICAnZGF0YS1hbXAtYmluZC1oaWRkZW4nOiAnbWVudVN0YXRlLmV4cGFuZGVkJyxcbiAgICAgIH0pfVxuICAgICAge2Nsb25lRWxlbWVudChuYXZpZ2F0aW9uSWNvbnMuY3Jvc3MsIHtcbiAgICAgICAgaGlkZGVuOiB0cnVlLFxuICAgICAgICAnZGF0YS1hbXAtYmluZC1oaWRkZW4nOiAnIW1lbnVTdGF0ZS5leHBhbmRlZCcsXG4gICAgICB9KX1cbiAgICAgIDxWaXN1YWxseUhpZGRlblRleHQ+e2Fubm91bmNlZFRleHR9PC9WaXN1YWxseUhpZGRlblRleHQ+XG4gICAgPC9NZW51QnV0dG9uPlxuICA8Lz5cbik7XG5cbkFtcE1lbnVCdXR0b24ucHJvcFR5cGVzID0ge1xuICBhbm5vdW5jZWRUZXh0OiBzdHJpbmcuaXNSZXF1aXJlZCxcbiAgb25Ub2dnbGU6IHN0cmluZy5pc1JlcXVpcmVkLFxuICBkaXI6IG9uZU9mKFsnbHRyJywgJ3J0bCddKSxcbiAgc2NyaXB0OiBzaGFwZShzY3JpcHRQcm9wVHlwZSkuaXNSZXF1aXJlZCxcbn07XG5cbkFtcE1lbnVCdXR0b24uZGVmYXVsdFByb3BzID0ge1xuICBkaXI6ICdsdHInLFxufTtcbiJdfQ== */"));

var CanonicalMenuButton = function CanonicalMenuButton(_ref11) {
  var announcedText = _ref11.announcedText,
      isOpen = _ref11.isOpen,
      onClick = _ref11.onClick,
      dir = _ref11.dir,
      script = _ref11.script;
  return /*#__PURE__*/_react.default.createElement(MenuButton, {
    onClick: onClick,
    "aria-expanded": isOpen ? 'true' : 'false',
    dir: dir,
    script: script
  }, isOpen ? _svgs.navigationIcons.cross : _svgs.navigationIcons.hamburger, /*#__PURE__*/_react.default.createElement(_psammeadVisuallyHiddenText.default, null, announcedText));
};

exports.CanonicalMenuButton = CanonicalMenuButton;
CanonicalMenuButton.propTypes = {
  announcedText: _propTypes.string.isRequired,
  onClick: _propTypes.func.isRequired,
  isOpen: _propTypes.bool.isRequired,
  dir: (0, _propTypes.oneOf)(['ltr', 'rtl']),
  script: (0, _propTypes.shape)(_propTypes2.scriptPropType).isRequired
};
CanonicalMenuButton.defaultProps = {
  dir: 'ltr'
};

var AmpHead = function AmpHead() {
  return /*#__PURE__*/_react.default.createElement(_reactHelmet.Helmet, null, /*#__PURE__*/_react.default.createElement("script", {
    async: true,
    "custom-element": "amp-bind",
    src: "https://cdn.ampproject.org/v0/amp-bind-0.1.js"
  }));
};

var expandedHandler = 'AMP.setState({ menuState: { expanded: !menuState.expanded }})';
var initialState = {
  expanded: false
};

var AmpMenuButton = function AmpMenuButton(_ref12) {
  var announcedText = _ref12.announcedText,
      onToggle = _ref12.onToggle,
      dir = _ref12.dir,
      script = _ref12.script;
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(AmpHead, null), /*#__PURE__*/_react.default.createElement("amp-state", {
    id: "menuState"
  }, /*#__PURE__*/_react.default.createElement("script", {
    type: "application/json"
    /* eslint-disable-next-line react/no-danger */
    ,
    dangerouslySetInnerHTML: {
      __html: JSON.stringify(initialState)
    }
  })), /*#__PURE__*/_react.default.createElement(MenuButton, {
    "aria-expanded": "false",
    "data-amp-bind-aria-expanded": "menuState.expanded ? \"true\" : \"false\"",
    on: "tap:".concat(expandedHandler, ",").concat(onToggle),
    dir: dir,
    script: script
  }, /*#__PURE__*/(0, _react.cloneElement)(_svgs.navigationIcons.hamburger, {
    'data-amp-bind-hidden': 'menuState.expanded'
  }), /*#__PURE__*/(0, _react.cloneElement)(_svgs.navigationIcons.cross, {
    hidden: true,
    'data-amp-bind-hidden': '!menuState.expanded'
  }), /*#__PURE__*/_react.default.createElement(_psammeadVisuallyHiddenText.default, null, announcedText)));
};

exports.AmpMenuButton = AmpMenuButton;
AmpMenuButton.propTypes = {
  announcedText: _propTypes.string.isRequired,
  onToggle: _propTypes.string.isRequired,
  dir: (0, _propTypes.oneOf)(['ltr', 'rtl']),
  script: (0, _propTypes.shape)(_propTypes2.scriptPropType).isRequired
};
AmpMenuButton.defaultProps = {
  dir: 'ltr'
};