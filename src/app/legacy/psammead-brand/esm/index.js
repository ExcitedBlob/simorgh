import _styled from '@emotion/styled/base';
var _excluded = [
  'svgHeight',
  'maxWidth',
  'minWidth',
  'url',
  'borderTop',
  'borderBottom',
  'backgroundColour',
  'logoColour',
  'scriptLink',
  'skipLink',
  'linkId',
];

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys.push.apply(keys, symbols);
  }
  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(
          target,
          key,
          Object.getOwnPropertyDescriptor(source, key),
        );
      });
    }
  }
  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true,
    });
  } else {
    obj[key] = value;
  }
  return obj;
}

function _extends() {
  _extends =
    Object.assign ||
    function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
  return _extends.apply(this, arguments);
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}

import React, { forwardRef } from 'react';
import { string, number, node, shape, bool } from 'prop-types';
import VisuallyHiddenText from '#legacy/psammead-visually-hidden-text';
import {
  GEL_GROUP_0_SCREEN_WIDTH_MAX,
  GEL_GROUP_2_SCREEN_WIDTH_MIN,
  GEL_GROUP_3_SCREEN_WIDTH_MIN,
} from '#legacy/gel-foundations/breakpoints';
import {
  GEL_SPACING_HLF,
  GEL_SPACING,
  GEL_SPACING_DBL,
} from '#legacy/gel-foundations/spacings';
var SVG_TOP_OFFSET_BELOW_400PX = '0.625rem'; // 10px

var SVG_BOTTOM_OFFSET_BELOW_400PX = '0.375rem'; // 6px

var SVG_BOTTOM_OFFSET_ABOVE_400PX = '0.75rem'; // 12px

var SVG_BOTTOM_OFFSET_ABOVE_600PX = '1.25rem'; // 20px

var SVG_WRAPPER_MAX_WIDTH_ABOVE_1280PX = '78rem';
var SCRIPT_LINK_OFFSET_BELOW_240PX = 52;
var PADDING_AROUND_SVG_BELOW_400PX = 16;
var PADDING_AROUND_SVG_ABOVE_400PX = 28;

var conditionallyRenderHeight = function conditionallyRenderHeight(
  svgHeight,
  padding,
) {
  return svgHeight
    ? 'min-height: '.concat((svgHeight + padding) / 16, 'rem;')
    : '';
};

var TRANSPARENT_BORDER = '0.0625rem solid transparent';

var SvgWrapper = _styled(
  'div',
  process.env.NODE_ENV === 'production'
    ? {
        target: 'e1wgjeuw3',
      }
    : {
        target: 'e1wgjeuw3',
        label: 'SvgWrapper',
      },
)(
  'position:relative;display:flex;justify-content:space-between;align-items:center;flex-wrap:wrap;max-width:',
  SVG_WRAPPER_MAX_WIDTH_ABOVE_1280PX,
  ';margin:0 auto;@media (max-width: ',
  GEL_GROUP_0_SCREEN_WIDTH_MAX,
  '){display:block;}' +
    (process.env.NODE_ENV === 'production'
      ? ''
      : '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */'),
);

var Banner = _styled(
  'div',
  process.env.NODE_ENV === 'production'
    ? {
        target: 'e1wgjeuw2',
      }
    : {
        target: 'e1wgjeuw2',
        label: 'Banner',
      },
)(
  'background-color:',
  function (props) {
    return props.backgroundColour;
  },
  ';',
  function (_ref) {
    var svgHeight = _ref.svgHeight;
    return conditionallyRenderHeight(svgHeight, PADDING_AROUND_SVG_BELOW_400PX);
  },
  ' width:100%;padding:0 ',
  GEL_SPACING,
  ';@media (min-width: ',
  GEL_GROUP_2_SCREEN_WIDTH_MIN,
  '){',
  function (_ref2) {
    var svgHeight = _ref2.svgHeight;
    return conditionallyRenderHeight(svgHeight, PADDING_AROUND_SVG_ABOVE_400PX);
  },
  ' padding:0 ',
  GEL_SPACING_DBL,
  ';}@media (max-width: ',
  GEL_GROUP_0_SCREEN_WIDTH_MAX,
  '){',
  function (_ref3) {
    var scriptLink = _ref3.scriptLink,
      svgHeight = _ref3.svgHeight;
    return (
      scriptLink &&
      'min-height: '.concat(
        (svgHeight +
          PADDING_AROUND_SVG_BELOW_400PX +
          SCRIPT_LINK_OFFSET_BELOW_240PX) /
          16,
        'rem;',
      )
    );
  },
  ';}',
  function (_ref4) {
    var borderTop = _ref4.borderTop;
    return borderTop && 'border-top: '.concat(TRANSPARENT_BORDER);
  },
  ';',
  function (_ref5) {
    var borderBottom = _ref5.borderBottom;
    return borderBottom && 'border-bottom: '.concat(TRANSPARENT_BORDER);
  },
  ';' +
    (process.env.NODE_ENV === 'production'
      ? ''
      : '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */'),
);

var brandWidth = function brandWidth(minWidth, maxWidth) {
  return '\n  width: 100%;\n  max-width: '
    .concat(maxWidth / 16, 'rem;\n  min-width: ')
    .concat(minWidth / 16, 'rem;\n  flex: 1 1 ')
    .concat(minWidth / 16, 'rem;\n  -ms-flex-preferred-size: ')
    .concat(maxWidth / 16, 'rem;\n');
};

var StyledLink = _styled(
  'a',
  process.env.NODE_ENV === 'production'
    ? {
        target: 'e1wgjeuw1',
      }
    : {
        target: 'e1wgjeuw1',
        label: 'StyledLink',
      },
)(
  'display:inline-block;',
  function (_ref6) {
    var maxWidth = _ref6.maxWidth,
      minWidth = _ref6.minWidth;
    return brandWidth(minWidth, maxWidth);
  },
  '@media (max-width: ',
  GEL_GROUP_0_SCREEN_WIDTH_MAX,
  '){display:block;}' +
    (process.env.NODE_ENV === 'production'
      ? ''
      : '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */'),
); // `currentColor` has been used to address high contrast mode in Firefox.

var BrandSvg = _styled(
  'svg',
  process.env.NODE_ENV === 'production'
    ? {
        target: 'e1wgjeuw0',
      }
    : {
        target: 'e1wgjeuw0',
        label: 'BrandSvg',
      },
)(
  'box-sizing:content-box;color:',
  function (props) {
    return props.logoColour;
  },
  ';fill:currentColor;padding-top:',
  SVG_TOP_OFFSET_BELOW_400PX,
  ';padding-bottom:',
  SVG_BOTTOM_OFFSET_BELOW_400PX,
  ';height:',
  function (props) {
    return props.height / 16;
  },
  'rem;',
  function (_ref7) {
    var maxWidth = _ref7.maxWidth,
      minWidth = _ref7.minWidth;
    return brandWidth(minWidth, maxWidth);
  },
  '@media (min-width: ',
  GEL_GROUP_2_SCREEN_WIDTH_MIN,
  '){padding-top:',
  GEL_SPACING_DBL,
  ';padding-bottom:',
  SVG_BOTTOM_OFFSET_ABOVE_400PX,
  ';}@media (min-width: ',
  GEL_GROUP_3_SCREEN_WIDTH_MIN,
  '){padding-top:',
  SVG_BOTTOM_OFFSET_ABOVE_600PX,
  ';padding-bottom:',
  GEL_SPACING_DBL,
  ';}@media screen and (-ms-high-contrast: active),print{fill:windowText;}',
  StyledLink,
  ':hover &,',
  StyledLink,
  ':focus &{text-decoration:none;border-bottom:',
  GEL_SPACING_HLF,
  ' solid ',
  function (props) {
    return props.logoColour;
  },
  ';margin-bottom:-',
  GEL_SPACING_HLF,
  ';}' +
    (process.env.NODE_ENV === 'production'
      ? ''
      : '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */'),
);

var LocalisedBrandName = function LocalisedBrandName(_ref8) {
  var product = _ref8.product,
    serviceLocalisedName = _ref8.serviceLocalisedName;
  return serviceLocalisedName
    ? /*#__PURE__*/
      // eslint-disable-next-line jsx-a11y/aria-role
      React.createElement(
        VisuallyHiddenText,
        {
          role: 'text',
        },
        /*#__PURE__*/ React.createElement(
          'span',
          {
            lang: 'en-GB',
          },
          product,
        ),
        ', ',
        serviceLocalisedName,
      )
    : /*#__PURE__*/ React.createElement(VisuallyHiddenText, null, product);
};

LocalisedBrandName.propTypes = {
  product: string.isRequired,
  serviceLocalisedName: string,
};
LocalisedBrandName.defaultProps = {
  serviceLocalisedName: null,
};

var StyledBrand = function StyledBrand(_ref9) {
  var product = _ref9.product,
    serviceLocalisedName = _ref9.serviceLocalisedName,
    svgHeight = _ref9.svgHeight,
    svg = _ref9.svg,
    maxWidth = _ref9.maxWidth,
    minWidth = _ref9.minWidth,
    backgroundColour = _ref9.backgroundColour,
    logoColour = _ref9.logoColour;
  return /*#__PURE__*/ React.createElement(
    React.Fragment,
    null,
    svg &&
      /*#__PURE__*/ React.createElement(
        React.Fragment,
        null,
        /*#__PURE__*/ React.createElement(
          BrandSvg,
          {
            height: svgHeight,
            viewBox: '0 0 '
              .concat(svg.viewbox.width, ' ')
              .concat(svg.viewbox.height),
            xmlns: 'http://www.w3.org/2000/svg',
            focusable: 'false',
            'aria-hidden': 'true',
            ratio: svg.ratio,
            maxWidth: maxWidth,
            minWidth: minWidth,
            backgroundColour: backgroundColour,
            logoColour: logoColour,
          },
          svg.group,
        ),
        /*#__PURE__*/ React.createElement(LocalisedBrandName, {
          product: product,
          serviceLocalisedName: serviceLocalisedName,
        }),
      ),
  );
};

var brandProps = {
  product: string.isRequired,
  serviceLocalisedName: string,
  maxWidth: number.isRequired,
  minWidth: number.isRequired,
  svgHeight: number.isRequired,
  svg: shape({
    group: node.isRequired,
    ratio: number.isRequired,
    viewbox: shape({
      height: number.isRequired,
      width: number.isRequired,
    }).isRequired,
  }).isRequired,
  backgroundColour: string.isRequired,
  logoColour: string.isRequired,
};
StyledBrand.propTypes = brandProps;
StyledBrand.defaultProps = {
  serviceLocalisedName: null,
};
var Brand = /*#__PURE__*/ forwardRef(function (props, ref) {
  var svgHeight = props.svgHeight,
    maxWidth = props.maxWidth,
    minWidth = props.minWidth,
    url = props.url,
    borderTop = props.borderTop,
    borderBottom = props.borderBottom,
    backgroundColour = props.backgroundColour,
    logoColour = props.logoColour,
    scriptLink = props.scriptLink,
    skipLink = props.skipLink,
    linkId = props.linkId,
    rest = _objectWithoutProperties(props, _excluded);

  return /*#__PURE__*/ React.createElement(
    Banner,
    _extends(
      {
        svgHeight: svgHeight,
        borderTop: borderTop,
        borderBottom: borderBottom,
        backgroundColour: backgroundColour,
        logoColour: logoColour,
        scriptLink: scriptLink,
      },
      rest,
    ),
    /*#__PURE__*/ React.createElement(
      SvgWrapper,
      {
        ref: ref,
      },
      url
        ? /*#__PURE__*/ React.createElement(
            StyledLink,
            {
              href: url,
              maxWidth: maxWidth,
              minWidth: minWidth,
              id: linkId,
            },
            /*#__PURE__*/ React.createElement(StyledBrand, props),
          )
        : /*#__PURE__*/ React.createElement(StyledBrand, props),
      skipLink,
      scriptLink && /*#__PURE__*/ React.createElement('div', null, scriptLink),
    ),
  );
});
Brand.defaultProps = {
  url: null,
  serviceLocalisedName: null,
  borderTop: false,
  borderBottom: false,
  scriptLink: null,
  skipLink: null,
  linkId: null,
};
Brand.propTypes = _objectSpread(
  _objectSpread({}, brandProps),
  {},
  {
    url: string,
    serviceLocalisedName: string,
    borderTop: bool,
    borderBottom: bool,
    scriptLink: node,
    skipLink: node,
    linkId: string,
  },
);
export default Brand;
