"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Link = exports.Summary = exports.Headline = void 0;

var _base = _interopRequireDefault(require("@emotion/styled/base"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = require("prop-types");

var _spacings = require("@bbc/gel-foundations/spacings");

var _breakpoints = require("@bbc/gel-foundations/breakpoints");

var _typography = require("@bbc/gel-foundations/typography");

var _colours = require("@bbc/psammead-styles/colours");

var _fontStyles = require("@bbc/psammead-styles/font-styles");

var _propTypes2 = require("@bbc/gel-foundations/prop-types");

var _detection = require("@bbc/psammead-styles/detection");

var _ImageStyles = _interopRequireDefault(require("./ImageStyles"));

var _TextStyles = _interopRequireDefault(require("./TextStyles"));

var _excluded = ["image", "info", "promoType", "dir", "displayImage", "mediaIndicator", "mediaIndicatorIsInline"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

var PROMO_TYPES = (0, _propTypes.oneOf)(['top', 'regular', 'leading']);
var wrapperTopStoryStyles = "\n  @media (min-width: ".concat(_breakpoints.GEL_GROUP_5_SCREEN_WIDTH_MIN, ") {\n    grid-template-columns: repeat(12, 1fr);\n  }\n");
var wrapperRegularStyles = "\n  @media (min-width: ".concat(_breakpoints.GEL_GROUP_4_SCREEN_WIDTH_MIN, ") {\n    display: block;\n  }\n");
var wrapperStyles = {
  top: wrapperTopStoryStyles,
  regular: wrapperRegularStyles,
  leading: ''
};
var StoryPromoWrapper = (0, _base.default)("div", process.env.NODE_ENV === "production" ? {
  target: "e1tfxkuo5"
} : {
  target: "e1tfxkuo5",
  label: "StoryPromoWrapper"
})("position:relative;@supports (", _detection.grid, "){display:grid;grid-template-columns:repeat(6, 1fr);grid-column-gap:", _spacings.GEL_SPACING, ";@media (min-width: ", _breakpoints.GEL_GROUP_3_SCREEN_WIDTH_MIN, "){grid-column-gap:", _spacings.GEL_SPACING_DBL, ";}", function (_ref) {
  var promoType = _ref.promoType;
  return wrapperStyles[promoType];
}, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
var ImageContentsWrapper = (0, _base.default)("div", process.env.NODE_ENV === "production" ? {
  target: "e1tfxkuo4"
} : {
  target: "e1tfxkuo4",
  label: "ImageContentsWrapper"
})(process.env.NODE_ENV === "production" ? {
  name: "bjn8wh",
  styles: "position:relative"
} : {
  name: "bjn8wh",
  styles: "position:relative",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
var mediaIndicatorStylesTopLeading = "\n  position: absolute;\n  bottom: 0;\n  > * {\n    height: ".concat(_spacings.GEL_SPACING_QUAD, ";\n    padding: ").concat(_spacings.GEL_SPACING, " ").concat(_spacings.GEL_SPACING_HLF, ";\n  }\n");
var mediaIndicatorStylesRegular = "\n  @media (min-width: ".concat(_breakpoints.GEL_GROUP_2_SCREEN_WIDTH_MIN, ") {\n    position: absolute;\n    bottom: 0;\n  }\n  > * {\n    @media (max-width: ").concat(_breakpoints.GEL_GROUP_1_SCREEN_WIDTH_MAX, ") {\n      height: 1.25rem;\n      padding: ").concat(_spacings.GEL_SPACING_HLF, " ").concat(_spacings.GEL_SPACING_HLF, " 0;\n    }\n\n    height: ").concat(_spacings.GEL_SPACING_QUAD, ";\n    padding: ").concat(_spacings.GEL_SPACING, " ").concat(_spacings.GEL_SPACING_HLF, ";\n  }\n");
/*
 These styles are to ensure we have the correct positioning
 & spacing of the Media Indicator over the Image in the Story Promo 
 */

var mediaIndicatorStyles = {
  top: mediaIndicatorStylesTopLeading,
  regular: mediaIndicatorStylesRegular,
  leading: mediaIndicatorStylesTopLeading
};
var ImageOverlayWrapper = (0, _base.default)("div", process.env.NODE_ENV === "production" ? {
  target: "e1tfxkuo3"
} : {
  target: "e1tfxkuo3",
  label: "ImageOverlayWrapper"
})(function (_ref2) {
  var promoType = _ref2.promoType;
  return mediaIndicatorStyles[promoType];
}, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qc3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBNEdzQyIsImZpbGUiOiIuLi9zcmMvaW5kZXguanN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IG5vZGUsIGJvb2wsIHN0cmluZywgb25lT2YsIHNoYXBlIH0gZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQge1xuICBHRUxfU1BBQ0lOR19ITEYsXG4gIEdFTF9TUEFDSU5HLFxuICBHRUxfU1BBQ0lOR19EQkwsXG4gIEdFTF9TUEFDSU5HX1FVQUQsXG59IGZyb20gJ0BiYmMvZ2VsLWZvdW5kYXRpb25zL3NwYWNpbmdzJztcbmltcG9ydCB7XG4gIEdFTF9HUk9VUF8xX1NDUkVFTl9XSURUSF9NQVgsXG4gIEdFTF9HUk9VUF8yX1NDUkVFTl9XSURUSF9NSU4sXG4gIEdFTF9HUk9VUF8yX1NDUkVFTl9XSURUSF9NQVgsXG4gIEdFTF9HUk9VUF8zX1NDUkVFTl9XSURUSF9NSU4sXG4gIEdFTF9HUk9VUF8zX1NDUkVFTl9XSURUSF9NQVgsXG4gIEdFTF9HUk9VUF80X1NDUkVFTl9XSURUSF9NSU4sXG4gIEdFTF9HUk9VUF81X1NDUkVFTl9XSURUSF9NSU4sXG59IGZyb20gJ0BiYmMvZ2VsLWZvdW5kYXRpb25zL2JyZWFrcG9pbnRzJztcbmltcG9ydCB7XG4gIGdldFBhcmFnb24sXG4gIGdldExvbmdQcmltZXIsXG4gIGdldFBpY2EsXG4gIGdldERvdWJsZVBpY2EsXG59IGZyb20gJ0BiYmMvZ2VsLWZvdW5kYXRpb25zL3R5cG9ncmFwaHknO1xuaW1wb3J0IHsgQ19FQk9OLCBDX01FVEFMLCBDX1NIQURPVyB9IGZyb20gJ0BiYmMvcHNhbW1lYWQtc3R5bGVzL2NvbG91cnMnO1xuaW1wb3J0IHtcbiAgZ2V0U2Fuc1JlZ3VsYXIsXG4gIGdldFNlcmlmTWVkaXVtLFxufSBmcm9tICdAYmJjL3BzYW1tZWFkLXN0eWxlcy9mb250LXN0eWxlcyc7XG5pbXBvcnQgeyBzY3JpcHRQcm9wVHlwZSB9IGZyb20gJ0BiYmMvZ2VsLWZvdW5kYXRpb25zL3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgZ3JpZCB9IGZyb20gJ0BiYmMvcHNhbW1lYWQtc3R5bGVzL2RldGVjdGlvbic7XG5pbXBvcnQgSW1hZ2VHcmlkSXRlbSBmcm9tICcuL0ltYWdlU3R5bGVzJztcbmltcG9ydCBUZXh0R3JpZEl0ZW0gZnJvbSAnLi9UZXh0U3R5bGVzJztcblxuY29uc3QgUFJPTU9fVFlQRVMgPSBvbmVPZihbJ3RvcCcsICdyZWd1bGFyJywgJ2xlYWRpbmcnXSk7XG5cbmNvbnN0IHdyYXBwZXJUb3BTdG9yeVN0eWxlcyA9IGBcbiAgQG1lZGlhIChtaW4td2lkdGg6ICR7R0VMX0dST1VQXzVfU0NSRUVOX1dJRFRIX01JTn0pIHtcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgxMiwgMWZyKTtcbiAgfVxuYDtcblxuY29uc3Qgd3JhcHBlclJlZ3VsYXJTdHlsZXMgPSBgXG4gIEBtZWRpYSAobWluLXdpZHRoOiAke0dFTF9HUk9VUF80X1NDUkVFTl9XSURUSF9NSU59KSB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gIH1cbmA7XG5cbmNvbnN0IHdyYXBwZXJTdHlsZXMgPSB7XG4gIHRvcDogd3JhcHBlclRvcFN0b3J5U3R5bGVzLFxuICByZWd1bGFyOiB3cmFwcGVyUmVndWxhclN0eWxlcyxcbiAgbGVhZGluZzogJycsXG59O1xuXG5jb25zdCBTdG9yeVByb21vV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTsgLyogVGhpcyBpcyBuZWVkZWQgdG8gY29udGFpbiB0aGUgZmF1eC1ibG9jay1saW5rIHRvIHRoZSBTdG9yeSBQcm9tbyAqL1xuICBAc3VwcG9ydHMgKCR7Z3JpZH0pIHtcbiAgICBkaXNwbGF5OiBncmlkO1xuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDYsIDFmcik7XG4gICAgZ3JpZC1jb2x1bW4tZ2FwOiAke0dFTF9TUEFDSU5HfTtcblxuICAgIEBtZWRpYSAobWluLXdpZHRoOiAke0dFTF9HUk9VUF8zX1NDUkVFTl9XSURUSF9NSU59KSB7XG4gICAgICBncmlkLWNvbHVtbi1nYXA6ICR7R0VMX1NQQUNJTkdfREJMfTtcbiAgICB9XG5cbiAgICAkeyh7IHByb21vVHlwZSB9KSA9PiB3cmFwcGVyU3R5bGVzW3Byb21vVHlwZV19XG4gIH1cbmA7XG5cbmNvbnN0IEltYWdlQ29udGVudHNXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuYDtcblxuY29uc3QgbWVkaWFJbmRpY2F0b3JTdHlsZXNUb3BMZWFkaW5nID0gYFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGJvdHRvbTogMDtcbiAgPiAqIHtcbiAgICBoZWlnaHQ6ICR7R0VMX1NQQUNJTkdfUVVBRH07XG4gICAgcGFkZGluZzogJHtHRUxfU1BBQ0lOR30gJHtHRUxfU1BBQ0lOR19ITEZ9O1xuICB9XG5gO1xuXG5jb25zdCBtZWRpYUluZGljYXRvclN0eWxlc1JlZ3VsYXIgPSBgXG4gIEBtZWRpYSAobWluLXdpZHRoOiAke0dFTF9HUk9VUF8yX1NDUkVFTl9XSURUSF9NSU59KSB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGJvdHRvbTogMDtcbiAgfVxuICA+ICoge1xuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAke0dFTF9HUk9VUF8xX1NDUkVFTl9XSURUSF9NQVh9KSB7XG4gICAgICBoZWlnaHQ6IDEuMjVyZW07XG4gICAgICBwYWRkaW5nOiAke0dFTF9TUEFDSU5HX0hMRn0gJHtHRUxfU1BBQ0lOR19ITEZ9IDA7XG4gICAgfVxuXG4gICAgaGVpZ2h0OiAke0dFTF9TUEFDSU5HX1FVQUR9O1xuICAgIHBhZGRpbmc6ICR7R0VMX1NQQUNJTkd9ICR7R0VMX1NQQUNJTkdfSExGfTtcbiAgfVxuYDtcblxuLypcbiBUaGVzZSBzdHlsZXMgYXJlIHRvIGVuc3VyZSB3ZSBoYXZlIHRoZSBjb3JyZWN0IHBvc2l0aW9uaW5nXG4gJiBzcGFjaW5nIG9mIHRoZSBNZWRpYSBJbmRpY2F0b3Igb3ZlciB0aGUgSW1hZ2UgaW4gdGhlIFN0b3J5IFByb21vIFxuICovXG5jb25zdCBtZWRpYUluZGljYXRvclN0eWxlcyA9IHtcbiAgdG9wOiBtZWRpYUluZGljYXRvclN0eWxlc1RvcExlYWRpbmcsXG4gIHJlZ3VsYXI6IG1lZGlhSW5kaWNhdG9yU3R5bGVzUmVndWxhcixcbiAgbGVhZGluZzogbWVkaWFJbmRpY2F0b3JTdHlsZXNUb3BMZWFkaW5nLFxufTtcblxuY29uc3QgSW1hZ2VPdmVybGF5V3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gICR7KHsgcHJvbW9UeXBlIH0pID0+IG1lZGlhSW5kaWNhdG9yU3R5bGVzW3Byb21vVHlwZV19XG5gO1xuXG5jb25zdCBoZWFkbGluZVRvcFN0b3J5VHlwb2dyYXBoeSA9IHNjcmlwdCA9PiBnZXRQYXJhZ29uKHNjcmlwdCk7XG5cbmNvbnN0IGhlYWRsaW5lUmVndWxhclR5cG9ncmFwaHkgPSBzY3JpcHQgPT4gZ2V0UGljYShzY3JpcHQpO1xuXG5jb25zdCBoZWFkbGluZUxlYWRpbmdTdG9yeVR5cG9ncmFwaHkgPSBzY3JpcHQgPT4gZ2V0RG91YmxlUGljYShzY3JpcHQpO1xuXG5jb25zdCBoZWFkbGluZVR5cG9ncmFwaHkgPSBzY3JpcHQgPT4gKHtcbiAgdG9wOiBoZWFkbGluZVRvcFN0b3J5VHlwb2dyYXBoeShzY3JpcHQpLFxuICByZWd1bGFyOiBoZWFkbGluZVJlZ3VsYXJUeXBvZ3JhcGh5KHNjcmlwdCksXG4gIGxlYWRpbmc6IGhlYWRsaW5lTGVhZGluZ1N0b3J5VHlwb2dyYXBoeShzY3JpcHQpLFxufSk7XG5cbmV4cG9ydCBjb25zdCBIZWFkbGluZSA9IHN0eWxlZC5oM2BcbiAgY29sb3I6ICR7Q19FQk9OfTtcbiAgbWFyZ2luOiAwOyAvKiBSZXNldCAqL1xuICBwYWRkaW5nLWJvdHRvbTogJHtHRUxfU1BBQ0lOR307XG4gICR7KHsgc2VydmljZSB9KSA9PiBnZXRTZXJpZk1lZGl1bShzZXJ2aWNlKX1cbiAgJHsoeyBzY3JpcHQsIHByb21vVHlwZSB9KSA9PiBzY3JpcHQgJiYgaGVhZGxpbmVUeXBvZ3JhcGh5KHNjcmlwdClbcHJvbW9UeXBlXX1cbiAgJHsoeyBwcm9tb0hhc0ltYWdlIH0pID0+XG4gICAgIXByb21vSGFzSW1hZ2UgJiZcbiAgICBgZGlzcGxheTogaW5saW5lO2B9IC8qIE5lZWRlZCBmb3IgYWxpZ25pbmcgTWVkaWEgSW5kaWNhdG9yIHdpdGggSGVhZGxpbmUgKi9cbmA7XG5cbkhlYWRsaW5lLnByb3BUeXBlcyA9IHtcbiAgc2NyaXB0OiBzaGFwZShzY3JpcHRQcm9wVHlwZSkuaXNSZXF1aXJlZCxcbiAgc2VydmljZTogc3RyaW5nLmlzUmVxdWlyZWQsXG4gIHByb21vSGFzSW1hZ2U6IGJvb2wsXG4gIHByb21vVHlwZTogUFJPTU9fVFlQRVMsXG59O1xuXG5IZWFkbGluZS5kZWZhdWx0UHJvcHMgPSB7XG4gIHByb21vSGFzSW1hZ2U6IHRydWUsXG4gIHByb21vVHlwZTogJ3JlZ3VsYXInLFxufTtcblxuY29uc3Qgc3VtbWFyeVRvcFN0b3J5U3R5bGVzID0gYFxuICBAbWVkaWEgKG1pbi13aWR0aDogJHtHRUxfR1JPVVBfM19TQ1JFRU5fV0lEVEhfTUlOfSkgYW5kIChtYXgtd2lkdGg6ICR7R0VMX0dST1VQXzNfU0NSRUVOX1dJRFRIX01BWH0pIHtcbiAgICBkaXNwbGF5OiBub25lO1xuICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgfVxuYDtcblxuY29uc3Qgc3VtbWFyeVJlZ3VsYXJTdHlsZXMgPSBgXG4gIEBtZWRpYSAobWF4LXdpZHRoOiAke0dFTF9HUk9VUF8yX1NDUkVFTl9XSURUSF9NQVh9KSB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gIH1cblxuICBAbWVkaWEgKG1pbi13aWR0aDogJHtHRUxfR1JPVVBfNF9TQ1JFRU5fV0lEVEhfTUlOfSkge1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgdmlzaWJpbGl0eTogaGlkZGVuO1xuICB9XG5gO1xuXG5jb25zdCBzdW1tYXJ5U3R5bGVzID0ge1xuICB0b3A6IHN1bW1hcnlUb3BTdG9yeVN0eWxlcyxcbiAgcmVndWxhcjogc3VtbWFyeVJlZ3VsYXJTdHlsZXMsXG4gIGxlYWRpbmc6IHN1bW1hcnlSZWd1bGFyU3R5bGVzLFxufTtcblxuZXhwb3J0IGNvbnN0IFN1bW1hcnkgPSBzdHlsZWQucGBcbiAgJHsoeyBzY3JpcHQgfSkgPT4gc2NyaXB0ICYmIGdldExvbmdQcmltZXIoc2NyaXB0KX07XG4gICR7KHsgc2VydmljZSB9KSA9PiBnZXRTYW5zUmVndWxhcihzZXJ2aWNlKX1cbiAgY29sb3I6ICR7Q19TSEFET1d9O1xuICBtYXJnaW46IDA7IC8qIFJlc2V0ICovXG4gIHBhZGRpbmctYm90dG9tOiAke0dFTF9TUEFDSU5HfTtcblxuICAkeyh7IHByb21vSGFzSW1hZ2UgfSkgPT4gIXByb21vSGFzSW1hZ2UgJiYgYHBhZGRpbmctdG9wOiAke0dFTF9TUEFDSU5HfTtgfVxuXG4gICR7KHsgcHJvbW9UeXBlIH0pID0+IHN1bW1hcnlTdHlsZXNbcHJvbW9UeXBlXX1cbmA7XG5cblN1bW1hcnkucHJvcFR5cGVzID0ge1xuICBzY3JpcHQ6IHNoYXBlKHNjcmlwdFByb3BUeXBlKS5pc1JlcXVpcmVkLFxuICBzZXJ2aWNlOiBzdHJpbmcuaXNSZXF1aXJlZCxcbiAgcHJvbW9IYXNJbWFnZTogYm9vbCxcbiAgcHJvbW9UeXBlOiBQUk9NT19UWVBFUyxcbn07XG5cblN1bW1hcnkuZGVmYXVsdFByb3BzID0ge1xuICBwcm9tb0hhc0ltYWdlOiB0cnVlLFxuICBwcm9tb1R5cGU6ICdyZWd1bGFyJyxcbn07XG5cbmV4cG9ydCBjb25zdCBMaW5rID0gc3R5bGVkLmFgXG4gIHBvc2l0aW9uOiBzdGF0aWM7XG4gIGNvbG9yOiAke0NfRUJPTn07XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgb3ZlcmZsb3ctd3JhcDogYnJlYWstd29yZDtcblxuICAmOmJlZm9yZSB7XG4gICAgYm90dG9tOiAwO1xuICAgIGNvbnRlbnQ6ICcnO1xuICAgIGxlZnQ6IDA7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgcmlnaHQ6IDA7XG4gICAgdG9wOiAwO1xuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgei1pbmRleDogMTtcbiAgfVxuXG4gICY6aG92ZXIsXG4gICY6Zm9jdXMge1xuICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xuICB9XG5cbiAgJjp2aXNpdGVkIHtcbiAgICBjb2xvcjogJHtDX01FVEFMfTtcbiAgfVxuYDtcblxuY29uc3QgU3RvcnlQcm9tbyA9ICh7XG4gIGltYWdlLFxuICBpbmZvLFxuICBwcm9tb1R5cGUsXG4gIGRpcixcbiAgZGlzcGxheUltYWdlLFxuICBtZWRpYUluZGljYXRvcixcbiAgbWVkaWFJbmRpY2F0b3JJc0lubGluZSxcbiAgLi4ucHJvcHNcbn0pID0+IHtcbiAgY29uc3QgcmVuZGVySW1hZ2UgPSBkaXNwbGF5SW1hZ2UgJiYgKFxuICAgIDxJbWFnZUdyaWRJdGVtIGRpcj17ZGlyfSBwcm9tb1R5cGU9e3Byb21vVHlwZX0+XG4gICAgICA8SW1hZ2VDb250ZW50c1dyYXBwZXI+XG4gICAgICAgIHtpbWFnZX1cbiAgICAgICAge21lZGlhSW5kaWNhdG9yICYmIChcbiAgICAgICAgICA8SW1hZ2VPdmVybGF5V3JhcHBlclxuICAgICAgICAgICAgbWVkaWFJbmRpY2F0b3JJc0lubGluZT17bWVkaWFJbmRpY2F0b3JJc0lubGluZX1cbiAgICAgICAgICAgIHByb21vVHlwZT17cHJvbW9UeXBlfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHttZWRpYUluZGljYXRvcn1cbiAgICAgICAgICA8L0ltYWdlT3ZlcmxheVdyYXBwZXI+XG4gICAgICAgICl9XG4gICAgICA8L0ltYWdlQ29udGVudHNXcmFwcGVyPlxuICAgIDwvSW1hZ2VHcmlkSXRlbT5cbiAgKTtcblxuICBjb25zdCByZW5kZXJUZXh0ID0gKFxuICAgIDxUZXh0R3JpZEl0ZW0gcHJvbW9UeXBlPXtwcm9tb1R5cGV9IGRpcj17ZGlyfSBkaXNwbGF5SW1hZ2U9e2Rpc3BsYXlJbWFnZX0+XG4gICAgICB7IWRpc3BsYXlJbWFnZSAmJiBtZWRpYUluZGljYXRvcn1cbiAgICAgIHtpbmZvfVxuICAgIDwvVGV4dEdyaWRJdGVtPlxuICApO1xuXG4gIHJldHVybiAoXG4gICAgPFN0b3J5UHJvbW9XcmFwcGVyIHByb21vVHlwZT17cHJvbW9UeXBlfSB7Li4ucHJvcHN9PlxuICAgICAge3Byb21vVHlwZSA9PT0gJ2xlYWRpbmcnID8gKFxuICAgICAgICA8PlxuICAgICAgICAgIHtyZW5kZXJUZXh0fVxuICAgICAgICAgIHtyZW5kZXJJbWFnZX1cbiAgICAgICAgPC8+XG4gICAgICApIDogKFxuICAgICAgICA8PlxuICAgICAgICAgIHtyZW5kZXJJbWFnZX1cbiAgICAgICAgICB7cmVuZGVyVGV4dH1cbiAgICAgICAgPC8+XG4gICAgICApfVxuICAgIDwvU3RvcnlQcm9tb1dyYXBwZXI+XG4gICk7XG59O1xuXG5TdG9yeVByb21vLnByb3BUeXBlcyA9IHtcbiAgZGlyOiBvbmVPZihbJ2x0cicsICdydGwnXSksXG4gIGltYWdlOiBub2RlLmlzUmVxdWlyZWQsXG4gIGluZm86IG5vZGUuaXNSZXF1aXJlZCxcbiAgcHJvbW9UeXBlOiBQUk9NT19UWVBFUyxcbiAgZGlzcGxheUltYWdlOiBib29sLFxuICBtZWRpYUluZGljYXRvcjogbm9kZSxcbiAgbWVkaWFJbmRpY2F0b3JJc0lubGluZTogYm9vbCxcbn07XG5cblN0b3J5UHJvbW8uZGVmYXVsdFByb3BzID0ge1xuICBkaXI6ICdsdHInLFxuICBwcm9tb1R5cGU6ICdyZWd1bGFyJyxcbiAgZGlzcGxheUltYWdlOiB0cnVlLFxuICBtZWRpYUluZGljYXRvcjogbnVsbCxcbiAgbWVkaWFJbmRpY2F0b3JJc0lubGluZTogZmFsc2UsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBTdG9yeVByb21vO1xuIl19 */"));

var headlineTopStoryTypography = function headlineTopStoryTypography(script) {
  return (0, _typography.getParagon)(script);
};

var headlineRegularTypography = function headlineRegularTypography(script) {
  return (0, _typography.getPica)(script);
};

var headlineLeadingStoryTypography = function headlineLeadingStoryTypography(script) {
  return (0, _typography.getDoublePica)(script);
};

var headlineTypography = function headlineTypography(script) {
  return {
    top: headlineTopStoryTypography(script),
    regular: headlineRegularTypography(script),
    leading: headlineLeadingStoryTypography(script)
  };
};

var Headline = (0, _base.default)("h3", process.env.NODE_ENV === "production" ? {
  target: "e1tfxkuo2"
} : {
  target: "e1tfxkuo2",
  label: "Headline"
})("color:", _colours.C_EBON, ";margin:0;padding-bottom:", _spacings.GEL_SPACING, ";", function (_ref3) {
  var service = _ref3.service;
  return (0, _fontStyles.getSerifMedium)(service);
}, " ", function (_ref4) {
  var script = _ref4.script,
      promoType = _ref4.promoType;
  return script && headlineTypography(script)[promoType];
}, " ", function (_ref5) {
  var promoHasImage = _ref5.promoHasImage;
  return !promoHasImage && "display: inline;";
}, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.Headline = Headline;
Headline.propTypes = {
  script: (0, _propTypes.shape)(_propTypes2.scriptPropType).isRequired,
  service: _propTypes.string.isRequired,
  promoHasImage: _propTypes.bool,
  promoType: PROMO_TYPES
};
Headline.defaultProps = {
  promoHasImage: true,
  promoType: 'regular'
};
var summaryTopStoryStyles = "\n  @media (min-width: ".concat(_breakpoints.GEL_GROUP_3_SCREEN_WIDTH_MIN, ") and (max-width: ").concat(_breakpoints.GEL_GROUP_3_SCREEN_WIDTH_MAX, ") {\n    display: none;\n    visibility: hidden;\n  }\n");
var summaryRegularStyles = "\n  @media (max-width: ".concat(_breakpoints.GEL_GROUP_2_SCREEN_WIDTH_MAX, ") {\n    display: none;\n    visibility: hidden;\n  }\n\n  @media (min-width: ").concat(_breakpoints.GEL_GROUP_4_SCREEN_WIDTH_MIN, ") {\n    display: none;\n    visibility: hidden;\n  }\n");
var summaryStyles = {
  top: summaryTopStoryStyles,
  regular: summaryRegularStyles,
  leading: summaryRegularStyles
};
var Summary = (0, _base.default)("p", process.env.NODE_ENV === "production" ? {
  target: "e1tfxkuo1"
} : {
  target: "e1tfxkuo1",
  label: "Summary"
})(function (_ref6) {
  var script = _ref6.script;
  return script && (0, _typography.getLongPrimer)(script);
}, ";", function (_ref7) {
  var service = _ref7.service;
  return (0, _fontStyles.getSansRegular)(service);
}, " color:", _colours.C_SHADOW, ";margin:0;padding-bottom:", _spacings.GEL_SPACING, ";", function (_ref8) {
  var promoHasImage = _ref8.promoHasImage;
  return !promoHasImage && "padding-top: ".concat(_spacings.GEL_SPACING, ";");
}, " ", function (_ref9) {
  var promoType = _ref9.promoType;
  return summaryStyles[promoType];
}, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qc3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBNEsrQiIsImZpbGUiOiIuLi9zcmMvaW5kZXguanN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IG5vZGUsIGJvb2wsIHN0cmluZywgb25lT2YsIHNoYXBlIH0gZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQge1xuICBHRUxfU1BBQ0lOR19ITEYsXG4gIEdFTF9TUEFDSU5HLFxuICBHRUxfU1BBQ0lOR19EQkwsXG4gIEdFTF9TUEFDSU5HX1FVQUQsXG59IGZyb20gJ0BiYmMvZ2VsLWZvdW5kYXRpb25zL3NwYWNpbmdzJztcbmltcG9ydCB7XG4gIEdFTF9HUk9VUF8xX1NDUkVFTl9XSURUSF9NQVgsXG4gIEdFTF9HUk9VUF8yX1NDUkVFTl9XSURUSF9NSU4sXG4gIEdFTF9HUk9VUF8yX1NDUkVFTl9XSURUSF9NQVgsXG4gIEdFTF9HUk9VUF8zX1NDUkVFTl9XSURUSF9NSU4sXG4gIEdFTF9HUk9VUF8zX1NDUkVFTl9XSURUSF9NQVgsXG4gIEdFTF9HUk9VUF80X1NDUkVFTl9XSURUSF9NSU4sXG4gIEdFTF9HUk9VUF81X1NDUkVFTl9XSURUSF9NSU4sXG59IGZyb20gJ0BiYmMvZ2VsLWZvdW5kYXRpb25zL2JyZWFrcG9pbnRzJztcbmltcG9ydCB7XG4gIGdldFBhcmFnb24sXG4gIGdldExvbmdQcmltZXIsXG4gIGdldFBpY2EsXG4gIGdldERvdWJsZVBpY2EsXG59IGZyb20gJ0BiYmMvZ2VsLWZvdW5kYXRpb25zL3R5cG9ncmFwaHknO1xuaW1wb3J0IHsgQ19FQk9OLCBDX01FVEFMLCBDX1NIQURPVyB9IGZyb20gJ0BiYmMvcHNhbW1lYWQtc3R5bGVzL2NvbG91cnMnO1xuaW1wb3J0IHtcbiAgZ2V0U2Fuc1JlZ3VsYXIsXG4gIGdldFNlcmlmTWVkaXVtLFxufSBmcm9tICdAYmJjL3BzYW1tZWFkLXN0eWxlcy9mb250LXN0eWxlcyc7XG5pbXBvcnQgeyBzY3JpcHRQcm9wVHlwZSB9IGZyb20gJ0BiYmMvZ2VsLWZvdW5kYXRpb25zL3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgZ3JpZCB9IGZyb20gJ0BiYmMvcHNhbW1lYWQtc3R5bGVzL2RldGVjdGlvbic7XG5pbXBvcnQgSW1hZ2VHcmlkSXRlbSBmcm9tICcuL0ltYWdlU3R5bGVzJztcbmltcG9ydCBUZXh0R3JpZEl0ZW0gZnJvbSAnLi9UZXh0U3R5bGVzJztcblxuY29uc3QgUFJPTU9fVFlQRVMgPSBvbmVPZihbJ3RvcCcsICdyZWd1bGFyJywgJ2xlYWRpbmcnXSk7XG5cbmNvbnN0IHdyYXBwZXJUb3BTdG9yeVN0eWxlcyA9IGBcbiAgQG1lZGlhIChtaW4td2lkdGg6ICR7R0VMX0dST1VQXzVfU0NSRUVOX1dJRFRIX01JTn0pIHtcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgxMiwgMWZyKTtcbiAgfVxuYDtcblxuY29uc3Qgd3JhcHBlclJlZ3VsYXJTdHlsZXMgPSBgXG4gIEBtZWRpYSAobWluLXdpZHRoOiAke0dFTF9HUk9VUF80X1NDUkVFTl9XSURUSF9NSU59KSB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gIH1cbmA7XG5cbmNvbnN0IHdyYXBwZXJTdHlsZXMgPSB7XG4gIHRvcDogd3JhcHBlclRvcFN0b3J5U3R5bGVzLFxuICByZWd1bGFyOiB3cmFwcGVyUmVndWxhclN0eWxlcyxcbiAgbGVhZGluZzogJycsXG59O1xuXG5jb25zdCBTdG9yeVByb21vV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTsgLyogVGhpcyBpcyBuZWVkZWQgdG8gY29udGFpbiB0aGUgZmF1eC1ibG9jay1saW5rIHRvIHRoZSBTdG9yeSBQcm9tbyAqL1xuICBAc3VwcG9ydHMgKCR7Z3JpZH0pIHtcbiAgICBkaXNwbGF5OiBncmlkO1xuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDYsIDFmcik7XG4gICAgZ3JpZC1jb2x1bW4tZ2FwOiAke0dFTF9TUEFDSU5HfTtcblxuICAgIEBtZWRpYSAobWluLXdpZHRoOiAke0dFTF9HUk9VUF8zX1NDUkVFTl9XSURUSF9NSU59KSB7XG4gICAgICBncmlkLWNvbHVtbi1nYXA6ICR7R0VMX1NQQUNJTkdfREJMfTtcbiAgICB9XG5cbiAgICAkeyh7IHByb21vVHlwZSB9KSA9PiB3cmFwcGVyU3R5bGVzW3Byb21vVHlwZV19XG4gIH1cbmA7XG5cbmNvbnN0IEltYWdlQ29udGVudHNXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuYDtcblxuY29uc3QgbWVkaWFJbmRpY2F0b3JTdHlsZXNUb3BMZWFkaW5nID0gYFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGJvdHRvbTogMDtcbiAgPiAqIHtcbiAgICBoZWlnaHQ6ICR7R0VMX1NQQUNJTkdfUVVBRH07XG4gICAgcGFkZGluZzogJHtHRUxfU1BBQ0lOR30gJHtHRUxfU1BBQ0lOR19ITEZ9O1xuICB9XG5gO1xuXG5jb25zdCBtZWRpYUluZGljYXRvclN0eWxlc1JlZ3VsYXIgPSBgXG4gIEBtZWRpYSAobWluLXdpZHRoOiAke0dFTF9HUk9VUF8yX1NDUkVFTl9XSURUSF9NSU59KSB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGJvdHRvbTogMDtcbiAgfVxuICA+ICoge1xuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAke0dFTF9HUk9VUF8xX1NDUkVFTl9XSURUSF9NQVh9KSB7XG4gICAgICBoZWlnaHQ6IDEuMjVyZW07XG4gICAgICBwYWRkaW5nOiAke0dFTF9TUEFDSU5HX0hMRn0gJHtHRUxfU1BBQ0lOR19ITEZ9IDA7XG4gICAgfVxuXG4gICAgaGVpZ2h0OiAke0dFTF9TUEFDSU5HX1FVQUR9O1xuICAgIHBhZGRpbmc6ICR7R0VMX1NQQUNJTkd9ICR7R0VMX1NQQUNJTkdfSExGfTtcbiAgfVxuYDtcblxuLypcbiBUaGVzZSBzdHlsZXMgYXJlIHRvIGVuc3VyZSB3ZSBoYXZlIHRoZSBjb3JyZWN0IHBvc2l0aW9uaW5nXG4gJiBzcGFjaW5nIG9mIHRoZSBNZWRpYSBJbmRpY2F0b3Igb3ZlciB0aGUgSW1hZ2UgaW4gdGhlIFN0b3J5IFByb21vIFxuICovXG5jb25zdCBtZWRpYUluZGljYXRvclN0eWxlcyA9IHtcbiAgdG9wOiBtZWRpYUluZGljYXRvclN0eWxlc1RvcExlYWRpbmcsXG4gIHJlZ3VsYXI6IG1lZGlhSW5kaWNhdG9yU3R5bGVzUmVndWxhcixcbiAgbGVhZGluZzogbWVkaWFJbmRpY2F0b3JTdHlsZXNUb3BMZWFkaW5nLFxufTtcblxuY29uc3QgSW1hZ2VPdmVybGF5V3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gICR7KHsgcHJvbW9UeXBlIH0pID0+IG1lZGlhSW5kaWNhdG9yU3R5bGVzW3Byb21vVHlwZV19XG5gO1xuXG5jb25zdCBoZWFkbGluZVRvcFN0b3J5VHlwb2dyYXBoeSA9IHNjcmlwdCA9PiBnZXRQYXJhZ29uKHNjcmlwdCk7XG5cbmNvbnN0IGhlYWRsaW5lUmVndWxhclR5cG9ncmFwaHkgPSBzY3JpcHQgPT4gZ2V0UGljYShzY3JpcHQpO1xuXG5jb25zdCBoZWFkbGluZUxlYWRpbmdTdG9yeVR5cG9ncmFwaHkgPSBzY3JpcHQgPT4gZ2V0RG91YmxlUGljYShzY3JpcHQpO1xuXG5jb25zdCBoZWFkbGluZVR5cG9ncmFwaHkgPSBzY3JpcHQgPT4gKHtcbiAgdG9wOiBoZWFkbGluZVRvcFN0b3J5VHlwb2dyYXBoeShzY3JpcHQpLFxuICByZWd1bGFyOiBoZWFkbGluZVJlZ3VsYXJUeXBvZ3JhcGh5KHNjcmlwdCksXG4gIGxlYWRpbmc6IGhlYWRsaW5lTGVhZGluZ1N0b3J5VHlwb2dyYXBoeShzY3JpcHQpLFxufSk7XG5cbmV4cG9ydCBjb25zdCBIZWFkbGluZSA9IHN0eWxlZC5oM2BcbiAgY29sb3I6ICR7Q19FQk9OfTtcbiAgbWFyZ2luOiAwOyAvKiBSZXNldCAqL1xuICBwYWRkaW5nLWJvdHRvbTogJHtHRUxfU1BBQ0lOR307XG4gICR7KHsgc2VydmljZSB9KSA9PiBnZXRTZXJpZk1lZGl1bShzZXJ2aWNlKX1cbiAgJHsoeyBzY3JpcHQsIHByb21vVHlwZSB9KSA9PiBzY3JpcHQgJiYgaGVhZGxpbmVUeXBvZ3JhcGh5KHNjcmlwdClbcHJvbW9UeXBlXX1cbiAgJHsoeyBwcm9tb0hhc0ltYWdlIH0pID0+XG4gICAgIXByb21vSGFzSW1hZ2UgJiZcbiAgICBgZGlzcGxheTogaW5saW5lO2B9IC8qIE5lZWRlZCBmb3IgYWxpZ25pbmcgTWVkaWEgSW5kaWNhdG9yIHdpdGggSGVhZGxpbmUgKi9cbmA7XG5cbkhlYWRsaW5lLnByb3BUeXBlcyA9IHtcbiAgc2NyaXB0OiBzaGFwZShzY3JpcHRQcm9wVHlwZSkuaXNSZXF1aXJlZCxcbiAgc2VydmljZTogc3RyaW5nLmlzUmVxdWlyZWQsXG4gIHByb21vSGFzSW1hZ2U6IGJvb2wsXG4gIHByb21vVHlwZTogUFJPTU9fVFlQRVMsXG59O1xuXG5IZWFkbGluZS5kZWZhdWx0UHJvcHMgPSB7XG4gIHByb21vSGFzSW1hZ2U6IHRydWUsXG4gIHByb21vVHlwZTogJ3JlZ3VsYXInLFxufTtcblxuY29uc3Qgc3VtbWFyeVRvcFN0b3J5U3R5bGVzID0gYFxuICBAbWVkaWEgKG1pbi13aWR0aDogJHtHRUxfR1JPVVBfM19TQ1JFRU5fV0lEVEhfTUlOfSkgYW5kIChtYXgtd2lkdGg6ICR7R0VMX0dST1VQXzNfU0NSRUVOX1dJRFRIX01BWH0pIHtcbiAgICBkaXNwbGF5OiBub25lO1xuICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgfVxuYDtcblxuY29uc3Qgc3VtbWFyeVJlZ3VsYXJTdHlsZXMgPSBgXG4gIEBtZWRpYSAobWF4LXdpZHRoOiAke0dFTF9HUk9VUF8yX1NDUkVFTl9XSURUSF9NQVh9KSB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gIH1cblxuICBAbWVkaWEgKG1pbi13aWR0aDogJHtHRUxfR1JPVVBfNF9TQ1JFRU5fV0lEVEhfTUlOfSkge1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgdmlzaWJpbGl0eTogaGlkZGVuO1xuICB9XG5gO1xuXG5jb25zdCBzdW1tYXJ5U3R5bGVzID0ge1xuICB0b3A6IHN1bW1hcnlUb3BTdG9yeVN0eWxlcyxcbiAgcmVndWxhcjogc3VtbWFyeVJlZ3VsYXJTdHlsZXMsXG4gIGxlYWRpbmc6IHN1bW1hcnlSZWd1bGFyU3R5bGVzLFxufTtcblxuZXhwb3J0IGNvbnN0IFN1bW1hcnkgPSBzdHlsZWQucGBcbiAgJHsoeyBzY3JpcHQgfSkgPT4gc2NyaXB0ICYmIGdldExvbmdQcmltZXIoc2NyaXB0KX07XG4gICR7KHsgc2VydmljZSB9KSA9PiBnZXRTYW5zUmVndWxhcihzZXJ2aWNlKX1cbiAgY29sb3I6ICR7Q19TSEFET1d9O1xuICBtYXJnaW46IDA7IC8qIFJlc2V0ICovXG4gIHBhZGRpbmctYm90dG9tOiAke0dFTF9TUEFDSU5HfTtcblxuICAkeyh7IHByb21vSGFzSW1hZ2UgfSkgPT4gIXByb21vSGFzSW1hZ2UgJiYgYHBhZGRpbmctdG9wOiAke0dFTF9TUEFDSU5HfTtgfVxuXG4gICR7KHsgcHJvbW9UeXBlIH0pID0+IHN1bW1hcnlTdHlsZXNbcHJvbW9UeXBlXX1cbmA7XG5cblN1bW1hcnkucHJvcFR5cGVzID0ge1xuICBzY3JpcHQ6IHNoYXBlKHNjcmlwdFByb3BUeXBlKS5pc1JlcXVpcmVkLFxuICBzZXJ2aWNlOiBzdHJpbmcuaXNSZXF1aXJlZCxcbiAgcHJvbW9IYXNJbWFnZTogYm9vbCxcbiAgcHJvbW9UeXBlOiBQUk9NT19UWVBFUyxcbn07XG5cblN1bW1hcnkuZGVmYXVsdFByb3BzID0ge1xuICBwcm9tb0hhc0ltYWdlOiB0cnVlLFxuICBwcm9tb1R5cGU6ICdyZWd1bGFyJyxcbn07XG5cbmV4cG9ydCBjb25zdCBMaW5rID0gc3R5bGVkLmFgXG4gIHBvc2l0aW9uOiBzdGF0aWM7XG4gIGNvbG9yOiAke0NfRUJPTn07XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgb3ZlcmZsb3ctd3JhcDogYnJlYWstd29yZDtcblxuICAmOmJlZm9yZSB7XG4gICAgYm90dG9tOiAwO1xuICAgIGNvbnRlbnQ6ICcnO1xuICAgIGxlZnQ6IDA7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgcmlnaHQ6IDA7XG4gICAgdG9wOiAwO1xuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgei1pbmRleDogMTtcbiAgfVxuXG4gICY6aG92ZXIsXG4gICY6Zm9jdXMge1xuICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xuICB9XG5cbiAgJjp2aXNpdGVkIHtcbiAgICBjb2xvcjogJHtDX01FVEFMfTtcbiAgfVxuYDtcblxuY29uc3QgU3RvcnlQcm9tbyA9ICh7XG4gIGltYWdlLFxuICBpbmZvLFxuICBwcm9tb1R5cGUsXG4gIGRpcixcbiAgZGlzcGxheUltYWdlLFxuICBtZWRpYUluZGljYXRvcixcbiAgbWVkaWFJbmRpY2F0b3JJc0lubGluZSxcbiAgLi4ucHJvcHNcbn0pID0+IHtcbiAgY29uc3QgcmVuZGVySW1hZ2UgPSBkaXNwbGF5SW1hZ2UgJiYgKFxuICAgIDxJbWFnZUdyaWRJdGVtIGRpcj17ZGlyfSBwcm9tb1R5cGU9e3Byb21vVHlwZX0+XG4gICAgICA8SW1hZ2VDb250ZW50c1dyYXBwZXI+XG4gICAgICAgIHtpbWFnZX1cbiAgICAgICAge21lZGlhSW5kaWNhdG9yICYmIChcbiAgICAgICAgICA8SW1hZ2VPdmVybGF5V3JhcHBlclxuICAgICAgICAgICAgbWVkaWFJbmRpY2F0b3JJc0lubGluZT17bWVkaWFJbmRpY2F0b3JJc0lubGluZX1cbiAgICAgICAgICAgIHByb21vVHlwZT17cHJvbW9UeXBlfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHttZWRpYUluZGljYXRvcn1cbiAgICAgICAgICA8L0ltYWdlT3ZlcmxheVdyYXBwZXI+XG4gICAgICAgICl9XG4gICAgICA8L0ltYWdlQ29udGVudHNXcmFwcGVyPlxuICAgIDwvSW1hZ2VHcmlkSXRlbT5cbiAgKTtcblxuICBjb25zdCByZW5kZXJUZXh0ID0gKFxuICAgIDxUZXh0R3JpZEl0ZW0gcHJvbW9UeXBlPXtwcm9tb1R5cGV9IGRpcj17ZGlyfSBkaXNwbGF5SW1hZ2U9e2Rpc3BsYXlJbWFnZX0+XG4gICAgICB7IWRpc3BsYXlJbWFnZSAmJiBtZWRpYUluZGljYXRvcn1cbiAgICAgIHtpbmZvfVxuICAgIDwvVGV4dEdyaWRJdGVtPlxuICApO1xuXG4gIHJldHVybiAoXG4gICAgPFN0b3J5UHJvbW9XcmFwcGVyIHByb21vVHlwZT17cHJvbW9UeXBlfSB7Li4ucHJvcHN9PlxuICAgICAge3Byb21vVHlwZSA9PT0gJ2xlYWRpbmcnID8gKFxuICAgICAgICA8PlxuICAgICAgICAgIHtyZW5kZXJUZXh0fVxuICAgICAgICAgIHtyZW5kZXJJbWFnZX1cbiAgICAgICAgPC8+XG4gICAgICApIDogKFxuICAgICAgICA8PlxuICAgICAgICAgIHtyZW5kZXJJbWFnZX1cbiAgICAgICAgICB7cmVuZGVyVGV4dH1cbiAgICAgICAgPC8+XG4gICAgICApfVxuICAgIDwvU3RvcnlQcm9tb1dyYXBwZXI+XG4gICk7XG59O1xuXG5TdG9yeVByb21vLnByb3BUeXBlcyA9IHtcbiAgZGlyOiBvbmVPZihbJ2x0cicsICdydGwnXSksXG4gIGltYWdlOiBub2RlLmlzUmVxdWlyZWQsXG4gIGluZm86IG5vZGUuaXNSZXF1aXJlZCxcbiAgcHJvbW9UeXBlOiBQUk9NT19UWVBFUyxcbiAgZGlzcGxheUltYWdlOiBib29sLFxuICBtZWRpYUluZGljYXRvcjogbm9kZSxcbiAgbWVkaWFJbmRpY2F0b3JJc0lubGluZTogYm9vbCxcbn07XG5cblN0b3J5UHJvbW8uZGVmYXVsdFByb3BzID0ge1xuICBkaXI6ICdsdHInLFxuICBwcm9tb1R5cGU6ICdyZWd1bGFyJyxcbiAgZGlzcGxheUltYWdlOiB0cnVlLFxuICBtZWRpYUluZGljYXRvcjogbnVsbCxcbiAgbWVkaWFJbmRpY2F0b3JJc0lubGluZTogZmFsc2UsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBTdG9yeVByb21vO1xuIl19 */"));
exports.Summary = Summary;
Summary.propTypes = {
  script: (0, _propTypes.shape)(_propTypes2.scriptPropType).isRequired,
  service: _propTypes.string.isRequired,
  promoHasImage: _propTypes.bool,
  promoType: PROMO_TYPES
};
Summary.defaultProps = {
  promoHasImage: true,
  promoType: 'regular'
};
var Link = (0, _base.default)("a", process.env.NODE_ENV === "production" ? {
  target: "e1tfxkuo0"
} : {
  target: "e1tfxkuo0",
  label: "Link"
})("position:static;color:", _colours.C_EBON, ";text-decoration:none;overflow-wrap:break-word;&:before{bottom:0;content:'';left:0;overflow:hidden;position:absolute;right:0;top:0;white-space:nowrap;z-index:1;}&:hover,&:focus{text-decoration:underline;}&:visited{color:", _colours.C_METAL, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.Link = Link;

var StoryPromo = function StoryPromo(_ref10) {
  var image = _ref10.image,
      info = _ref10.info,
      promoType = _ref10.promoType,
      dir = _ref10.dir,
      displayImage = _ref10.displayImage,
      mediaIndicator = _ref10.mediaIndicator,
      mediaIndicatorIsInline = _ref10.mediaIndicatorIsInline,
      props = _objectWithoutProperties(_ref10, _excluded);

  var renderImage = displayImage && /*#__PURE__*/_react.default.createElement(_ImageStyles.default, {
    dir: dir,
    promoType: promoType
  }, /*#__PURE__*/_react.default.createElement(ImageContentsWrapper, null, image, mediaIndicator && /*#__PURE__*/_react.default.createElement(ImageOverlayWrapper, {
    mediaIndicatorIsInline: mediaIndicatorIsInline,
    promoType: promoType
  }, mediaIndicator)));

  var renderText = /*#__PURE__*/_react.default.createElement(_TextStyles.default, {
    promoType: promoType,
    dir: dir,
    displayImage: displayImage
  }, !displayImage && mediaIndicator, info);

  return /*#__PURE__*/_react.default.createElement(StoryPromoWrapper, _extends({
    promoType: promoType
  }, props), promoType === 'leading' ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, renderText, renderImage) : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, renderImage, renderText));
};

StoryPromo.propTypes = {
  dir: (0, _propTypes.oneOf)(['ltr', 'rtl']),
  image: _propTypes.node.isRequired,
  info: _propTypes.node.isRequired,
  promoType: PROMO_TYPES,
  displayImage: _propTypes.bool,
  mediaIndicator: _propTypes.node,
  mediaIndicatorIsInline: _propTypes.bool
};
StoryPromo.defaultProps = {
  dir: 'ltr',
  promoType: 'regular',
  displayImage: true,
  mediaIndicator: null,
  mediaIndicatorIsInline: false
};
var _default = StoryPromo;
exports.default = _default;